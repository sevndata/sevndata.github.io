<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>搭建邮箱服务器&amp;发送通知邮件</title>
      <link href="/2024/09/02/linux-mail/"/>
      <url>/2024/09/02/linux-mail/</url>
      
        <content type="html"><![CDATA[<p>本文分享了如何搭建邮箱服务器以及发送通知类邮件</p><span id="more"></span><h3 id="1-选型"><a href="#1-选型" class="headerlink" title="1. 选型"></a>1. 选型</h3><p>针对不同的发送邮件需求，有不同的方案选择</p><ol><li>少量系统邮件发送，可寻找邮箱服务商，设置开启<code>smtps</code>等服务发送，一般会有条数等限制，如每日500条</li><li>云服务，如aws的ses服务可以提供发送邮件服务,使用aws sdk或者<code>smtps</code>调用，申请比较费劲</li><li>自己搭建邮箱服务器，需自己机房或者计算机搭建，不能使用云服务器，如aws，申请开端口比ses更加费劲</li><li>搭建服务器可以使用<code>postfix + Dovecot + Roundcube</code>或者是<code>iRedMail</code>。推荐使用<code>iRedMail</code>，<code>iRedMail</code>集成了这些组件。前一种方法需要自己部署的组件，证书太多，无用功太多。</li></ol><p>简单的说，需要有一个完整的域名并使用非云服务器完成以下三步即可完成邮件服务器的搭建，其他问题也可以参考<code>iRedMail</code>文档</p><ul><li><a href="https://docs.iredmail.org/index.html">Install iRedMail</a> ，查看<code>iRedMail</code>官方的文档完成安装</li><li><code>iRedMail</code>是自己生成的<code>ssl</code>证书，手动替换一下</li><li><a href="https://docs.iredmail.org/setup.dns.html">Setup DNS</a> ，DNS(A, PTR, MX, SPF, DKIM, DMARC)的设置很重要，使邮件安全，并不会被视为垃圾，欺诈邮件。</li></ul><h3 id="2-邮箱服务搭建"><a href="#2-邮箱服务搭建" class="headerlink" title="2. 邮箱服务搭建"></a>2. 邮箱服务搭建</h3><p>以下环境是使用的Ubuntu24，使用的域名是<code>mail.sevndata.com</code>,发邮件的邮箱地址是<code>nepoly@sevndata.com</code></p><ol><li>为服务器设置一个完整域名（FQDN）的主机名</li></ol><ul><li><p>查看主机名</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">hostname</span> <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改主机名 </p><ul><li><p>修改/etc/hostname</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mail<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改/etc/hosts</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1   mail.sevndata.com mail localhost localhost.localdomain<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><ol start="2"><li>更新<code>apt</code>安装<code>tar</code>和<code>gzip</code> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">tar</span> <span class="token function">gzip</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>下载<code>iRedMail</code>软件包<a href="https://www.iredmail.org/download.html">下载页面</a>，并上传到服务器，解压，进入目录 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> zxf iRedMail-1.7.1.tar.gz<span class="token builtin class-name">cd</span> iRedMail-1.7.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>执行<code>iRedMail</code>安装脚本 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> iRedMail.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>弹出安装界面<ul><li>欢迎界面，按<code>Enter</code>确认</li><li>存储用户邮箱地址默认<code>/var/vmail</code>,可选修改并确认</li><li>指定<code>web</code>容器,可选<code>nginx</code></li><li>指定数据库，可选<code>mysql</code>，<code>空格</code>选择，<code>Enter</code>确认</li><li>如果选择<code>mysql</code>输入密码</li><li>输入域名</li><li>设置总管理密码也就是<code>postmaster@sevndata.com</code>的密码</li></ul></li><li>安装成功提示<code>web</code>访问目录等内容，也可以访问<code>iRedMail.tips</code>查看，需要先看第七步安装自己的<code>ssl</code>证书 <pre class="line-numbers language-uri" data-language="uri"><code class="language-uri"><span class="token scheme">https<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">mail.sevndata.com</span></span><span class="token path"><span class="token path-separator">/</span>iredadmin<span class="token path-separator">/</span></span> <span class="token fragment"><span class="token fragment-delimiter">#</span>iRedAdmin</span>的管理端admin界面，用户postmaster@sevndata.com<span class="token scheme">https<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">mail.sevndata.com</span></span><span class="token path"><span class="token path-separator">/</span>mail<span class="token path-separator">/</span></span> <span class="token fragment"><span class="token fragment-delimiter">#</span>Roundcube</span>的web界面，可在admin创建邮箱用户在这里登录收发邮件<span class="token scheme">https<span class="token scheme-delimiter">:</span></span><span class="token authority"><span class="token authority-delimiter">//</span><span class="token host">mail.sevndata.com</span></span><span class="token path"><span class="token path-separator">/</span>netdata<span class="token path-separator">/</span></span> <span class="token fragment"><span class="token fragment-delimiter">#</span>netdata</span>服务器监控界面，用户postmaster@sevndata.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>安装<code>ssl</code>证书，重启 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#iRedMail生成的证书备份</span><span class="token function">mv</span> /etc/ssl/certs/iRedMail.crt<span class="token punctuation">&#123;</span>,.bak<span class="token punctuation">&#125;</span><span class="token function">mv</span> /etc/ssl/private/iRedMail.key<span class="token punctuation">&#123;</span>,.bak<span class="token punctuation">&#125;</span><span class="token comment">#把自己的证书替换过来</span><span class="token function">cp</span> /nginx_web/mail.sevndata.com/cert/private.key /etc/ssl/private/iRedMail.key<span class="token function">cp</span> /nginx_web/mail.sevndata.com/cert/fullchain.cer /etc/ssl/certs/iRedMail.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>其他一些操作，<code>iRedMail</code>集成了这些组件，所以可以单独管理这些组件 <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart nginx <span class="token comment">#stop start status</span>systemctl restart postfixsystemctl restart dovecot.servicesystemctl restart mariadb.servicesystemctl restart iredapd.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="3-DNS配置"><a href="#3-DNS配置" class="headerlink" title="3. DNS配置"></a>3. DNS配置</h3><p>这个步骤很重要，以域名<code>mail.sevndata.com</code>，ip是<code>111.111.111.111</code>为例</p><ol><li><p>添加A记录</p> <pre class="line-numbers language-text" data-language="text"><code class="language-text">A   mail    111.111.111.111 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在你的域名服务商添加prt记录，将域名映射到 IP 地址是正向解析，反向解析是从 IP 地址到域名的映射</p></li><li><p>添加MX记录</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">MAX    sevndata.com    mail.sevndata.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>设置autodiscover</p></li><li><p>添加SPF记录，发出邮件的服务器ip</p> <pre class="line-numbers language-text" data-language="text"><code class="language-text">TXT    sevndata.com    v=spf1 ip4:111.111.111.111 -all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加DKIM记录</p><ul><li>执行命令显示DKIM KEY<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">amavisd showkeysamavisd-new showkeys <span class="token comment">#有些系统用的这个，上面那个不能用可以用这个</span>amavisd-new testkeys <span class="token comment">#测试key，测试通过显示pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li>拷贝显示的key，组成DKIM记录，并添加到DNS中<pre class="line-numbers language-text" data-language="text"><code class="language-text">TXT     dkim._domainkey v=DKIM1; p=MIIBdsadsadsadsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li><li><p>添加DMARC记录</p><p><code>rua</code>,<code>ruf</code>等具体配置可以看<a href="https://docs.iredmail.org/setup.dns.html">Setup DNS</a></p> <pre class="line-numbers language-text" data-language="text"><code class="language-text">TXT    _dmarc    v=DMARC1; p=reject; rua=mailto:support@sevndata.com; ruf=mailto:support@sevndata.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果你安装了<code>Prosody</code>作为<code>Jabber/XMPP</code>服务，你还需要配置<code>_xmpp-client</code>,<code>_xmpp-server</code>，不需要就忽略，步骤二和四需要域名服务商，可以先忽略，尝试测试是否正常</p></li></ol><h3 id="4-调用测试"><a href="#4-调用测试" class="headerlink" title="4. 调用测试"></a>4. 调用测试</h3><ol><li><p>测试 </p><ul><li>在管理端web上添加测试邮箱用户</li><li>在邮件收发web上登录测试邮箱用户，测试邮件收发是否正常</li></ul></li><li><p>调用</p> <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> api_libUtils<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"crypto/tls"</span><span class="token string">"github.com/jordan-wright/email"</span><span class="token string">"net/smtp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">SendMail</span><span class="token punctuation">(</span>subject <span class="token builtin">string</span><span class="token punctuation">,</span> mail <span class="token builtin">string</span><span class="token punctuation">,</span> context <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>    mailUserName <span class="token operator">:=</span> <span class="token string">"noreply@sevndata.com"</span>    mailPassword <span class="token operator">:=</span> <span class="token string">"password"</span>    addr <span class="token operator">:=</span> <span class="token string">"mail.sevndata.com:465"</span>    host <span class="token operator">:=</span> <span class="token string">"mail.sevndata.com"</span>    e <span class="token operator">:=</span> email<span class="token punctuation">.</span><span class="token function">NewEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    e<span class="token punctuation">.</span>From <span class="token operator">=</span> <span class="token string">"Sevndata Mail Center&lt;noreply@sevndata.com>"</span>    e<span class="token punctuation">.</span>To <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span>mail<span class="token punctuation">&#125;</span>    e<span class="token punctuation">.</span>Subject <span class="token operator">=</span> subject    e<span class="token punctuation">.</span>HTML <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">SendWithTLS</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> smtp<span class="token punctuation">.</span><span class="token function">PlainAuth</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> mailUserName<span class="token punctuation">,</span> mailPassword<span class="token punctuation">,</span> host<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">&amp;</span>tls<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span>InsecureSkipVerify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ServerName<span class="token punctuation">:</span> host<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>其他一些内容</p><p> <a href="https://docs.iredmail.org/allow.user.to.send.email.without.authentication-zh_CN.html">允许用户无需身份验证发送邮件</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> mail </category>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mail </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell批量修改文件名</title>
      <link href="/2024/07/16/shell-rename/"/>
      <url>/2024/07/16/shell-rename/</url>
      
        <content type="html"><![CDATA[<p>孩子的视频，照片非常多，批量修改下文件名</p><span id="more"></span><p>如：wx_camera_1713872311407.mp4格式的修改为2024年04月23日19时38分31秒_407.mp4</p><pre class="line-numbers language-none"><code class="language-none">Renaming file: wx_camera_1713872311407.mp4 -&gt; 2024年04月23日19时38分31秒_407.mp4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">files</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$files</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">$file</span>"</span><span class="token variable">)</span></span>        <span class="token assign-left variable">extension</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;filename<span class="token operator">##</span>*.&#125;</span>"</span>        <span class="token assign-left variable">filename</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;filename<span class="token operator">%</span>.*&#125;</span>"</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$filename</span> <span class="token operator">=~</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>+<span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token assign-left variable">timestamp</span><span class="token operator">=</span><span class="token variable">$&#123;<span class="token environment constant">BASH_REMATCH</span><span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span>            <span class="token assign-left variable">seconds</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$timestamp <span class="token operator">/</span> <span class="token number">1000</span><span class="token variable">))</span></span>            <span class="token assign-left variable">milliseconds</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$timestamp <span class="token operator">%</span> <span class="token number">1000</span><span class="token variable">))</span></span>            <span class="token assign-left variable">nanoseconds</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$timestamp <span class="token operator">%</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000000</span><span class="token variable">))</span></span>            <span class="token assign-left variable">formatted_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">-r</span> $seconds <span class="token string">"+%Y年%m月%d日%H时%M分%S秒"</span><span class="token variable">)</span></span>            <span class="token assign-left variable">new_filename</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;formatted_time&#125;</span>_<span class="token variable">$&#123;milliseconds&#125;</span>.<span class="token variable">$&#123;extension&#125;</span>"</span>            <span class="token builtin class-name">echo</span> <span class="token string">"Renaming file: <span class="token variable">$file</span> -> <span class="token variable">$new_filename</span>"</span>            <span class="token function">mv</span> <span class="token string">"<span class="token variable">$file</span>"</span> <span class="token string">"<span class="token variable">$new_filename</span>"</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Python做web国际化，提取语言文件</title>
      <link href="/2022/07/08/python-repalce/"/>
      <url>/2022/07/08/python-repalce/</url>
      
        <content type="html"><![CDATA[<p>本文分享了Web项目国际化过程中提取语言文件，让代码帮你工作。</p><span id="more"></span><p>起因是一次Web项目需要国际化，但项目前期未考虑到项目需要国际化，所以大量汉字在<code>JS</code>文件中，未提取到语言文件中。需要人工提取汉字并以映射<code>key value</code>方式写入到语言文件中。</p><p>此项工作需要大量人力重复工作，所以考虑使用<code>Python</code>写一个工具，帮助开发做此项工作。</p><p>大体逻辑为通过正则方式提取<code>&quot;汉字&quot; &#39;汉字&#39; &gt;汉字</code>三种形式的汉字，排除注释等其他内容，并将内容通过映射<code>key value</code>写入语言文件，并去重避免重复的翻译内容。把原JS文件中<code>&quot;汉字&quot; &#39;汉字&#39; &gt;汉字</code>替换为<code>&#123;key&#125;</code>等表达式，达到语言文件提取目的。</p><p>以下为参考代码，可能存在部分问题，可据不同情况修改。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> translate<span class="token comment"># 原代码文件夹</span>old_dir <span class="token operator">=</span> <span class="token string">'/doc'</span><span class="token comment"># 处理后的代码文件夹</span>new_dir <span class="token operator">=</span> <span class="token string">'/newdoc'</span><span class="token comment"># 语言文件</span>message_file<span class="token operator">=</span><span class="token string">'zh-CN.js'</span><span class="token comment"># 依次执行除message_file和.DS_Store等无关内容的代码文件</span><span class="token keyword">def</span> <span class="token function">get_filelist</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> home<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'.DS_Store'</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>            files<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.DS_Store'</span><span class="token punctuation">)</span>        files<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>message_file<span class="token punctuation">)</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> files<span class="token punctuation">:</span>            fullname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>home<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>            get_file<span class="token punctuation">(</span>fullname<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>home<span class="token punctuation">)</span><span class="token comment"># 读取文件内容</span><span class="token keyword">def</span> <span class="token function">get_file</span><span class="token punctuation">(</span>fullname<span class="token punctuation">,</span>filename<span class="token punctuation">,</span>home<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>         <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fullname<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>            lines <span class="token operator">=</span> file_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        get_key<span class="token punctuation">(</span>lines<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fullname<span class="token punctuation">)</span><span class="token comment"># 提取 "汉字" '汉字' >汉字 三种类型的字符，组成字典</span><span class="token keyword">def</span> <span class="token function">get_key</span><span class="token punctuation">(</span>lines<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    data3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    res1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\"[\u4e00-\u9fa5]&#123;1,&#125;\"'</span><span class="token punctuation">,</span>lines<span class="token punctuation">)</span>    <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> res1<span class="token punctuation">:</span>        pre_key<span class="token operator">=</span>filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.js'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        data1<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>iterating_var<span class="token punctuation">,</span>pre_key<span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\'[\u4e00-\u9fa5]&#123;1,&#125;\''</span><span class="token punctuation">,</span>lines<span class="token punctuation">)</span>    <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> res2<span class="token punctuation">:</span>        data2<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>iterating_var<span class="token punctuation">,</span>pre_key<span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res3 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\>[\u4e00-\u9fa5]&#123;1,&#125;'</span><span class="token punctuation">,</span>lines<span class="token punctuation">)</span>    <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> res3<span class="token punctuation">:</span>        data3<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>iterating_var<span class="token punctuation">,</span>pre_key<span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">+</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choices<span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_lowercase<span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    open_message<span class="token punctuation">(</span>lines<span class="token punctuation">,</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token comment"># 打开语言文件，读取已有的翻译，生成已有翻译data</span><span class="token keyword">def</span> <span class="token function">open_message</span><span class="token punctuation">(</span>oldlines<span class="token punctuation">,</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">try</span><span class="token punctuation">:</span>        data_already <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        messagefilename<span class="token operator">=</span>old_dir<span class="token operator">+</span><span class="token string">'/'</span><span class="token operator">+</span>message_file        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>messagefilename<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>            lines <span class="token operator">=</span> file_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        res5 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\'[\S]&#123;1,&#125;\': \'[\u4e00-\u9fa5]&#123;1,&#125;\''</span><span class="token punctuation">,</span>lines<span class="token punctuation">)</span>        <span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> res5<span class="token punctuation">:</span>            resvalue <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\'[\S]&#123;1,&#125;\': '</span><span class="token punctuation">,</span>iterating_var<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            reskey <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">': \'[\u4e00-\u9fa5]&#123;1,&#125;\''</span><span class="token punctuation">,</span>iterating_var<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">': '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            data_already<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>reskey<span class="token punctuation">,</span>resvalue<span class="token punctuation">)</span>        oldlines<span class="token operator">=</span>get_neew_data<span class="token punctuation">(</span>oldlines<span class="token punctuation">,</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">,</span>data_already<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>messagefilename<span class="token punctuation">)</span><span class="token comment"># 根据已有翻译替换提取文字的value</span><span class="token keyword">def</span> <span class="token function">get_neew_data</span><span class="token punctuation">(</span>oldlines<span class="token punctuation">,</span>data1<span class="token punctuation">,</span>data2<span class="token punctuation">,</span>data3<span class="token punctuation">,</span>data_already<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    datatemp<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    data_already_new<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    sign1<span class="token operator">=</span><span class="token string">'"'</span>    sign2<span class="token operator">=</span><span class="token string">'\''</span>    sign3<span class="token operator">=</span><span class="token string">'>'</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> data1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        keytemp<span class="token operator">=</span>key<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>sign1<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> data_already<span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span>keytemp<span class="token punctuation">)</span><span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>data_already<span class="token punctuation">[</span>keytemp<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            data_already_new<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>keytemp<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> data2<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        keytemp<span class="token operator">=</span>key<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>sign2<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> data_already<span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span>keytemp<span class="token punctuation">)</span><span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>data_already<span class="token punctuation">[</span>keytemp<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            data_already_new<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>keytemp<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> data3<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        keytemp<span class="token operator">=</span>key<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>sign3<span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> data_already<span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span>keytemp<span class="token punctuation">)</span><span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>data_already<span class="token punctuation">[</span>keytemp<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token punctuation">:</span>            datatemp<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>            data_already_new<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span>keytemp<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    get_new_message_file<span class="token punctuation">(</span>data_already_new<span class="token punctuation">)</span>    get_new_file<span class="token punctuation">(</span>oldlines<span class="token punctuation">,</span>datatemp<span class="token punctuation">,</span>filename<span class="token punctuation">)</span>    <span class="token comment"># 替换旧js文件中翻译标记位,并记录到新文件中,保存文件</span><span class="token keyword">def</span> <span class="token function">get_new_file</span><span class="token punctuation">(</span>oldlines<span class="token punctuation">,</span>datatemp<span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> datatemp<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            oldlines<span class="token operator">=</span>oldlines<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">"&#123;"</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            oldlines<span class="token operator">=</span>oldlines<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">">&#123;"</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>new_dir<span class="token operator">+</span><span class="token string">'/new'</span><span class="token operator">+</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>oldlines<span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 生成新语言,并追加到语言文件中</span><span class="token keyword">def</span> <span class="token function">get_new_message_file</span><span class="token punctuation">(</span>data_already_new<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_message<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> data_already_new<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_message<span class="token operator">=</span>new_message<span class="token operator">+</span><span class="token string">'  \''</span><span class="token operator">+</span>value<span class="token operator">+</span><span class="token string">'\': \''</span><span class="token operator">+</span>key<span class="token operator">+</span><span class="token string">'\','</span><span class="token operator">+</span><span class="token string">'\n'</span>    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>old_dir<span class="token operator">+</span><span class="token string">'/'</span><span class="token punctuation">,</span> message_file<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'a+'</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>new_message<span class="token punctuation">)</span>    <span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 程序入口</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    get_filelist<span class="token punctuation">(</span>old_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell分布式架构下分发应用</title>
      <link href="/2022/07/02/shell-scpfile/"/>
      <url>/2022/07/02/shell-scpfile/</url>
      
        <content type="html"><![CDATA[<p>本文分享了在<code>linux</code>下通过<code>shell</code>脚本做一些分发文件的重复操作。</p><span id="more"></span><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">controllist</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">172.24</span>.18.177 <span class="token number">172.24</span>.18.175<span class="token punctuation">)</span><span class="token assign-left variable">backuppath</span><span class="token operator">=</span>/root/ready_release/backup/<span class="token assign-left variable">readypath</span><span class="token operator">=</span>/root/ready_release/war/<span class="token assign-left variable">webapppath</span><span class="token operator">=</span>/home/webapp/apache-tomcat-9.0.40/webapps/<span class="token assign-left variable">date</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y.%m.%d.%H.%M.%S"</span><span class="token variable">)</span></span><span class="token assign-left variable">newfilepath</span><span class="token operator">=</span>/root/ready_release/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$backuppath</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">$backuppath</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$readypath</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">$readypath</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"comand fail"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"example sh run.sh control"</span>    <span class="token builtin class-name">exit</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">!=</span> <span class="token string">"node"</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">!=</span> <span class="token string">"control"</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token variable">$1</span> <span class="token operator">!=</span> <span class="token string">"batch"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"command fail:"</span><span class="token variable">$1</span>    <span class="token builtin class-name">echo</span> <span class="token string">"example: sh run.sh control"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"support：control， node， batch"</span>    <span class="token builtin class-name">exit</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"control"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$newfilepath</span><span class="token string">"control.war"</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">then</span>        <span class="token keyword">for</span> <span class="token for-or-select variable">control</span> <span class="token keyword">in</span> <span class="token variable">$&#123;controllist<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>        <span class="token keyword">do</span>            <span class="token function">scp</span> root@<span class="token variable">$control</span><span class="token builtin class-name">:</span><span class="token variable">$webapppath</span><span class="token string">"control.war"</span> <span class="token variable">$backuppath</span><span class="token string">"control.war"</span>.bak.<span class="token variable">$date</span>            <span class="token function">scp</span> <span class="token variable">$newfilepath</span><span class="token string">"control.war"</span> root@<span class="token variable">$control</span><span class="token builtin class-name">:</span><span class="token variable">$webapppath</span><span class="token string">"control.war"</span>            <span class="token builtin class-name">echo</span> <span class="token string">"SUCCESS->"</span><span class="token variable">$newfilepath</span><span class="token string">"control.war"</span>            <span class="token function">sleep</span> <span class="token number">240</span>        <span class="token keyword">done</span>        <span class="token function">mv</span> <span class="token variable">$newfilepath</span><span class="token string">"control.war"</span> <span class="token variable">$readypath</span><span class="token string">"control.war"</span>.bak.<span class="token variable">$date</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"NOSUCH FILE->"</span><span class="token variable">$newfilepath</span><span class="token string">"control.war"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"batch"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token variable">$newfilepath</span><span class="token string">"batch.war"</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">then</span>        <span class="token function">mv</span> <span class="token variable">$webapppath</span><span class="token string">"batch.war"</span> <span class="token variable">$backuppath</span><span class="token string">"batch.war"</span>.bak.<span class="token variable">$date</span>        <span class="token function">cp</span> <span class="token variable">$newfilepath</span><span class="token string">"batch.war"</span> <span class="token variable">$webapppath</span><span class="token string">"batch.war"</span>        <span class="token function">mv</span> <span class="token variable">$newfilepath</span><span class="token string">"batch.war"</span> <span class="token variable">$readypath</span><span class="token string">"batch.war"</span>.bak.<span class="token variable">$date</span>        <span class="token builtin class-name">echo</span> <span class="token string">"SUCCESS->"</span><span class="token variable">$newfilepath</span><span class="token string">"node.war"</span>    <span class="token keyword">else</span>        <span class="token builtin class-name">echo</span> <span class="token string">"NOSUCH FILE->"</span><span class="token variable">$newfilepath</span><span class="token string">"batch.war"</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java递归不建议使用对象参数本身</title>
      <link href="/2022/03/28/java-recursion/"/>
      <url>/2022/03/28/java-recursion/</url>
      
        <content type="html"><![CDATA[<p>本文分享了Java在使用递归时，不建议使用对象参数本身。</p><span id="more"></span><p>开发反映一个奇怪现象，菜单列表出现奇怪错误，此环境使用<code>spring-data-jpa</code>，现象如下：</p><p>正常为：</p><pre><code>X:一级菜单A1-二级菜单A2Y:一级菜单A1-二级菜单A2-三级菜单A3</code></pre><p>错误显示：</p><pre><code>X:二级菜单A2-三级菜单A3    //出错Y:一级菜单A1-二级菜单A2-三级菜单A3</code></pre><p>查看代码后，发现使用<code>setDetailData</code>此递归获取拼接的菜单名称。出错在<code>X</code>上，原因是如下：</p><ol><li>递归<code>X</code>对象，获取到菜单名称为<code>一级菜单A1-二级菜单A2</code>,正确</li><li>递归<code>Y</code>对象，再递归到第二级时获取对象<code>menu</code>其实为<code>X</code>，拼接菜单名称使用<code>setDetailMenuName</code>，导致<code>X</code>对象发生改变，所以已经做完递归的<code>X</code>数据变化为错误数据<code>二级菜单A2-三级菜单A3</code>。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">setDetailData</span><span class="token punctuation">(</span><span class="token class-name">Menu</span> menu<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menu<span class="token punctuation">.</span><span class="token function">getMenuPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">getDetailMenuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">></span></span> optionalMenu <span class="token operator">=</span> <span class="token function">getJpaRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findByMenuId</span><span class="token punctuation">(</span>menu<span class="token punctuation">.</span><span class="token function">getMenuPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optionalMenu<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Menu</span> menuTemp <span class="token operator">=</span> optionalMenu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            menuTemp<span class="token punctuation">.</span><span class="token function">setDetailMenuName</span><span class="token punctuation">(</span>menuTemp<span class="token punctuation">.</span><span class="token function">getMenuTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> menu<span class="token punctuation">.</span><span class="token function">getDetailMenuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">setDetailData</span><span class="token punctuation">(</span>menuTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> menu<span class="token punctuation">.</span><span class="token function">getDetailMenuName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此错误类似于遍历数组时修改数组本身，此问题只要简单将<code>Menu</code>对象更换即可修复，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">setDetailData</span><span class="token punctuation">(</span><span class="token class-name">String</span> detailMenuName<span class="token punctuation">,</span> <span class="token class-name">Integer</span> menuPid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>menuPid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> detailMenuName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Menu</span><span class="token punctuation">></span></span> optionalMenu <span class="token operator">=</span> <span class="token function">getJpaRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findByMenuId</span><span class="token punctuation">(</span>menuPid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>optionalMenu<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Menu</span> menuTemp <span class="token operator">=</span> optionalMenu<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>menuTemp<span class="token punctuation">.</span><span class="token function">getMenuPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>menuTemp<span class="token punctuation">.</span><span class="token function">getMenuId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//todo 死循环情况处理</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token function">setDetailData</span><span class="token punctuation">(</span>menuTemp<span class="token punctuation">.</span><span class="token function">getMenuTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> detailMenuName<span class="token punctuation">,</span> menuTemp<span class="token punctuation">.</span><span class="token function">getMenuPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> detailMenuName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止任意邮件伪造-SPF</title>
      <link href="/2022/01/20/java-spf/"/>
      <url>/2022/01/20/java-spf/</url>
      
        <content type="html"><![CDATA[<p>本文分享了中危漏洞-任意邮件伪造介绍及修复办法</p><span id="more"></span><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><ol><li>由于在 SMTP 协议中，允许发件人伪造绝大多数的发件人特征信息，从而导致了任意邮件伪造漏洞。</li><li>为了防止邮箱伪造，出现了 SPF，SPF(或是 Sender ID)是 Sender Policy Framework 的缩写。当定义了域名的 SPF 记录后，接收邮件方会根据你的 SPF 记录来判断连接过来的 IP 地址是否被包含在 SPF记录里面，如果在，则认为是一封正确的邮件，否则则认为是一封伪造的邮件。现在绝大部份反垃圾邮件系统都支持 SPF 过滤，这种过滤一般不会有误判，除非是邮件系统管理员自己把 SPF 记录配置错误或遗漏。</li><li>任意邮件伪造漏洞可伪造管理员或公司其他人员邮箱发送钓鱼邮件，获取接收方信任，使其打开附带的木马文件或者回复想要获取的敏感资料，从而引发主机被控制、重要资料泄密等风险。</li></ol><h2 id="2-修复建议"><a href="#2-修复建议" class="headerlink" title="2. 修复建议"></a>2. 修复建议</h2><ol><li>在域名解析记录中添加 SPF 记录。增加 SPF 记录非常简单，在DNS 里面添加 TXT 记录即可。</li><li>如非必要，可将 MX 记录删除。</li></ol><h2 id="3-SPF-是什么呢？"><a href="#3-SPF-是什么呢？" class="headerlink" title="3. SPF 是什么呢？"></a>3. SPF 是什么呢？</h2><p>简单来说就是人们设计的一套可以杜绝邮件伪造的机制，只要遵照他们设计的方法来配置自己域名的 DNS 解析，就可以杜绝邮件伪造。</p><p>关于 SPF 的一切，你可以在这个网站（英文）上获得：<a href="http://www.openspf.orgSPF">www.openspf.orgSPF</a> 的原理是这样的，伪造者虽然能伪造你的域名，但是却不能控制你的域名的DNS 解析记录。因为只有拥有域名账户权限，才能更改解析记录。你域名解析到的 ip是 1.1.1.1，而伪造者的 ip 是 2.2.2.2。如果能做一个声明，告诉邮件接收者，我的域名发的邮件 ip 都是 1.1.1.1，其他的都是假的，可以抛弃掉，那么就可以杜绝邮件伪造了。SPF 就是这样的一个协议，你可以按照 SPF 的格式发出声明，邮件服务器按照 SPF 解读你的声明。这样的一次沟通，就可以解决邮件伪造问题了。</p><h2 id="4-如何使用-SPF？"><a href="#4-如何使用-SPF？" class="headerlink" title="4. 如何使用 SPF？"></a>4. 如何使用 SPF？</h2><p>首先，登录你的域名提供商的管理页面，这个页面就是通常用来设置域名解析 IP地址的地方。例如上述例子，可以这样声明，在域名的解析记录里添加一条 txt 记录，</p><pre class="line-numbers language-none"><code class="language-none">二级域名：空或@txt记录值为：v&#x3D;spf1 ip4:1.1.1.1 -all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样，就设置了你的邮件只能是从 1.1.1.1 这个 ip 发出的。其中 txt 记录的意义：</p><pre class="line-numbers language-none"><code class="language-none">1. v&#x3D;spf1  #版本号声明2. ip4:1.1.1.1  #指定ip地址3. -all  #对其余的标记无效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然这样设置有些问题就是你的域名可能需要变化的 ip 地址，或扩增多个 ip，这时候就可以用其他方式，更改中间的部分（ip4 对应位置）:</p><pre class="line-numbers language-none"><code class="language-none">二级域名：空或@txt记录值为：v&#x3D;spf1 include:spf1.a.com include:spf2.a.com -all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再设置一个 spf1.a.com 的 txt 解析记录，内容为：</p><pre class="line-numbers language-none"><code class="language-none">二级域名：空或@txt记录值为：v&#x3D;spf1 ip4:1.1.1.0&#x2F;24 ip4:1.2.3.4 -all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 include 的意思是使用其后的地址的 SPF 记录。而 ip4:1.1.1.0/24则是使用一个段。设置 spf2.a.com 与此类似。这样就可以使用更多的地址作为合法地址。也可以 include 多层，但常见的一般最多三层已经够用，最后一层要指定到具体的 ip 或域名。<br>其他如：v=spf1 a mx ip4:x.x.x.x -all 使用 a 记录，mx 解析记录和指定的ip 作为合法地址。</p><h2 id="5-剩余检查项-all-的配置"><a href="#5-剩余检查项-all-的配置" class="headerlink" title="5. 剩余检查项 all 的配置"></a>5. 剩余检查项 all 的配置</h2><p>关于剩余检查项 all 前面的“-”符号，参见下表：</p><pre class="line-numbers language-none"><code class="language-none">&quot;+&quot; Pass&quot;-&quot; Fail&quot;~&quot; Soft Fail&quot;?&quot; Neutarl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>建议使用“all”来拒绝陌生地址的邮件。当使用“~all”时，一般会将邮件标记为垃圾邮件。但是由于有时人们还是会翻查垃圾邮件（甚至有时官方都会建议去检查垃圾邮件），因此这样处理并不安全。所以如无特殊需求，建议使用“all”来拒绝。</p><p>禁用所有邮件服务</p><pre class="line-numbers language-none"><code class="language-none">txt记录值为：v&#x3D;spf1 -all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>— 摘录于支付宝小程序漏洞检测</p>]]></content>
      
      
      <categories>
          
          <category> mail </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mail </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell获取CPU使用率信息并重启应用</title>
      <link href="/2022/01/02/shell-getcpurestart/"/>
      <url>/2022/01/02/shell-getcpurestart/</url>
      
        <content type="html"><![CDATA[<p>本文分享了在<code>linux</code>下通过<code>shell</code>脚本获取<code>CPU</code>使用率，超过预警值后重新启动异常应用。</p><span id="more"></span><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!bin/bash</span><span class="token comment">#监控程序</span><span class="token assign-left variable">process</span><span class="token operator">=</span><span class="token string">"java"</span><span class="token comment">#输出文件</span><span class="token assign-left variable">output_file</span><span class="token operator">=</span><span class="token string">"mn_info.log"</span><span class="token comment">#一分钟探测一次</span><span class="token assign-left variable">TIME_INTERVAL</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">TIME_SLEEP</span><span class="token operator">=</span><span class="token number">50</span><span class="token comment">#记录连续超过告警值的次数</span><span class="token assign-left variable">init_count</span><span class="token operator">=</span><span class="token number">0</span><span class="token assign-left variable">count_step</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#告警值</span><span class="token assign-left variable">cpu_top</span><span class="token operator">=</span><span class="token number">80</span><span class="token comment">#连续超过多少次执行操作</span><span class="token assign-left variable">top_count</span><span class="token operator">=</span><span class="token number">5</span><span class="token comment">#持续监控</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span><span class="token variable">)</span></span>    <span class="token assign-left variable">LAST_CPU_INFO</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/stat <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-w</span> cpu <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2,$3,$4,$5,$6,$7,$8&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">LAST_SYS_IDLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $LAST_CPU_INFO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $4&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">LAST_TOTAL_CPU_T</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $LAST_CPU_INFO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1+$2+$3+$4+$5+$6+$7&#125;'</span><span class="token variable">)</span></span>    <span class="token function">sleep</span> <span class="token variable">$&#123;TIME_INTERVAL&#125;</span>    <span class="token assign-left variable">NEXT_CPU_INFO</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /proc/stat <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-w</span> cpu <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2,$3,$4,$5,$6,$7,$8&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">NEXT_SYS_IDLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $NEXT_CPU_INFO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $4&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">NEXT_TOTAL_CPU_T</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $NEXT_CPU_INFO <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1+$2+$3+$4+$5+$6+$7&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">SYSTEM_IDLE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>NEXT_SYS_IDLE<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>LAST_SYS_IDLE<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1-$2&#125;'</span><span class="token variable">`</span></span>    <span class="token assign-left variable">TOTAL_TIME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>NEXT_TOTAL_CPU_T<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>LAST_TOTAL_CPU_T<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1-$2&#125;'</span><span class="token variable">`</span></span>    <span class="token assign-left variable">CPU_USAGE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $<span class="token punctuation">&#123;</span>SYSTEM_IDLE<span class="token punctuation">&#125;</span> $<span class="token punctuation">&#123;</span>TOTAL_TIME<span class="token punctuation">&#125;</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;printf "%.2f", 100-$1/$2*100&#125;'</span><span class="token variable">`</span></span>    <span class="token assign-left variable">cpu</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$CPU_USAGE</span>"</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">"."</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">`</span></span>    <span class="token comment">#记录CPU过高</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;cpu&#125;</span>"</span> <span class="token parameter variable">-gt</span> <span class="token string">"<span class="token variable">$&#123;cpu_top&#125;</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token assign-left variable">init_count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>$init_count<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$&#123;time&#125;</span>连续第<span class="token variable">$&#123;init_count&#125;</span>次发生cpu使用率过高<span class="token variable">$&#123;cpu&#125;</span>%"</span> <span class="token operator">>></span> <span class="token variable">$output_file</span>    <span class="token keyword">else</span>        <span class="token assign-left variable">init_count</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">fi</span>    <span class="token comment">#超过次数触发重启</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$&#123;top_count&#125;</span>"</span> <span class="token parameter variable">-le</span> <span class="token string">"<span class="token variable">$&#123;init_count&#125;</span>"</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"触发重启行为：<span class="token variable">$&#123;time&#125;</span>连续第<span class="token variable">$&#123;init_count&#125;</span>次发生cpu使用率过高<span class="token variable">$&#123;cpu&#125;</span>%"</span> <span class="token operator">>></span> <span class="token variable">$output_file</span>        <span class="token assign-left variable">init_count</span><span class="token operator">=</span><span class="token number">0</span>        <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>pgrep $process<span class="token variable">)</span></span>        <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token variable">$&#123;pid&#125;</span>        <span class="token function">sh</span> startup.sh        <span class="token function">sleep</span> <span class="token number">120</span>    <span class="token keyword">fi</span>    <span class="token function">sleep</span> <span class="token string">"<span class="token variable">$&#123;TIME_SLEEP&#125;</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grafana重置密码</title>
      <link href="/2021/05/31/grafana-reset/"/>
      <url>/2021/05/31/grafana-reset/</url>
      
        <content type="html"><![CDATA[<p>分享<code>Grafana</code>忘记密码后如何重置密码。</p><span id="more"></span><h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h2><p>逻辑：修改<code>Grafana sqlite</code>中用户表密码</p><ol><li>找到<code>grafana.db</code></li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">find <span class="token operator">/</span> <span class="token operator">-</span>name <span class="token string">"grafana.db"</span><span class="token comment">-- /var/lib/grafana/grafana.db</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>进入<code>sqlite</code>修改数据</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--进入数据库</span>sqlite3 <span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>grafana<span class="token operator">/</span>grafana<span class="token punctuation">.</span>db<span class="token comment">--显示所有表</span><span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token comment">--查询表user数据</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token comment">--修改admin密码为admin</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password <span class="token operator">=</span> <span class="token string">'59acf18b94d7eb0694c61e60ce44c110c7a683ac6a8f09580d626f90f4a242000746579358d77dd9e570e83fa24faa88a8a6'</span><span class="token punctuation">,</span> salt <span class="token operator">=</span> <span class="token string">'F3FAxVm33R'</span> <span class="token keyword">where</span> login <span class="token operator">=</span> <span class="token string">'admin'</span><span class="token punctuation">;</span><span class="token comment">--退出</span><span class="token punctuation">.</span><span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>重启<code>Grafana</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop grafana-server.servicesystemctl start grafana-server.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Grafana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot自定义框架starter方式引入</title>
      <link href="/2021/04/07/spring-boot-mybatis/"/>
      <url>/2021/04/07/spring-boot-mybatis/</url>
      
        <content type="html"><![CDATA[<p>本文分享了Spring Boot自定义框架starter方式引入，以<code>mybatis-spring-boot-starter</code>源码作为示例。</p><span id="more"></span><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>分享了如何优雅的将自定义框架以<code>starter</code>形式引入到项目中，本文以<code>mybatis-spring-boot-starter</code>源码作为示例。</p><h2 id="2-命名"><a href="#2-命名" class="headerlink" title="2. 命名"></a>2. 命名</h2><p><code>Spring</code>官方建议了<code>artifactId</code>的命名规则，可遵循建议命名规则，如下：</p><ol><li>官方通常命名为<code>spring-boot-starter-&#123;name&#125;</code>，如：<code>spring-boot-starter-jdbc</code>,<code>spring-data-jpa</code>。</li><li>建议非官方<code>starter</code>命名遵循<code>&#123;name&#125;-spring-boot-starter</code>，如<code>mybatis-spring-boot-start</code>。</li></ol><h2 id="3-mybatis-spring-boot-start"><a href="#3-mybatis-spring-boot-start" class="headerlink" title="3. mybatis-spring-boot-start"></a>3. mybatis-spring-boot-start</h2><p><code>mybatis-spring-boot-start</code>为一个空的项目，只有<code>pom.xml</code>引入了<code>mybatis-spring-boot-autoconfigure</code>与其他一些依赖项。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-mybatis-spring-boot-autoconfigure"><a href="#4-mybatis-spring-boot-autoconfigure" class="headerlink" title="4. mybatis-spring-boot-autoconfigure"></a>4. mybatis-spring-boot-autoconfigure</h2><p>在<code>mybatis-spring-boot-autoconfigure</code>中，可以看到一些核心文件<code>MybatisProperties</code>,<code>MybatisAutoConfiguration</code>,<code>ConfigurationCustomizer</code>,<br><code>MybatisLanguageDriverAutoConfiguration</code>,<code>SpringBootVFS</code>,<code>spring.factories</code>,<br><code>additional-spring-configuration-metadata.json</code>等。下面将一一进行查看。</p><h2 id="5-Spring-Boot自定义配置"><a href="#5-Spring-Boot自定义配置" class="headerlink" title="5. Spring Boot自定义配置"></a>5. Spring Boot自定义配置</h2><ol><li>spring.factories<br>在<code>spring-core</code>中<code>SpringFactoriesLoader</code>遍历<code>META-INF/spring.factories</code>，此配置实例化了<code>MybatisLanguageDriverAutoConfiguration</code>和<code>MybatisAutoConfiguration</code>并配置到<code>Spring</code>中。</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>MybatisProperties<br>定义了一些<code>mybatis</code>使用的参数，并提供入口，可由开发者通过<code>application.properties</code>配置<code>mybatis</code>参数，前缀为<code>mybatis</code>。如：<code>mybatis.configLocation=xmlPath</code></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token class-name">MybatisProperties</span><span class="token punctuation">.</span><span class="token constant">MYBATIS_PREFIX</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisProperties</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MYBATIS_PREFIX</span> <span class="token operator">=</span> <span class="token string">"mybatis"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ResourcePatternResolver</span> resourceResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * Location of MyBatis xml config file.   */</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> configLocation<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>ConfigurationCustomizer<br>提供函数式接口，可由开发者实现接口来自定义配置。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurationCustomizer</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">void</span> <span class="token function">customize</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>Metadata<br><code>metadata.json</code>文件中包含了支持的所有配置属性的详细信息，可以帮助开发者在使用<code>application.properties</code>或者<code>application.yml</code>提供上下文提示等信息。</li></ol><p>模仿以上几个关键点，就可以自定义<code>starter</code>的配置，使开发者能够便利的进行配置。</p><h2 id="6-Mybatis的自动配置"><a href="#6-Mybatis的自动配置" class="headerlink" title="6. Mybatis的自动配置"></a>6. Mybatis的自动配置</h2><ol><li>MybatisAutoConfiguration</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org.springframework.context.annotation.Configuration</span><span class="token comment">//有这俩个文件配置生效</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">SqlSessionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//有主DataSource生效</span><span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//开启配置properties</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">MybatisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">//配置之后配置</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">DataSourceAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MybatisLanguageDriverAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisAutoConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">MybatisAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//开发者配置properties</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">MybatisProperties</span> properties<span class="token punctuation">;</span>  <span class="token comment">//拦截器</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors<span class="token punctuation">;</span>  <span class="token comment">//类型转换处理器</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TypeHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> typeHandlers<span class="token punctuation">;</span>  <span class="token comment">//语言驱动</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LanguageDriver</span><span class="token punctuation">[</span><span class="token punctuation">]</span> languageDrivers<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DatabaseIdProvider</span> databaseIdProvider<span class="token punctuation">;</span>  <span class="token comment">//开发者自定义的配置Configuration</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConfigurationCustomizer</span><span class="token punctuation">></span></span> configurationCustomizers<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token comment">//检查配置是否存在</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">checkConfigFileExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkConfigFileExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">isCheckConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token string">"Cannot find config location: "</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">" (please add config file or check your Mybatis configuration)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//容器中没有SqlSessionFactory对象才会实例化，优先使用开发者自定义SqlSessionFactory</span>  <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化</span>    <span class="token class-name">SqlSessionFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置开发者dataSource</span>    factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置VFS，读取资源文件</span>    factory<span class="token punctuation">.</span><span class="token function">setVfs</span><span class="token punctuation">(</span><span class="token class-name">SpringBootVFS</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置开发者配置的xml路径</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      factory<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//处理配置</span>    <span class="token function">applyConfiguration</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">//通过开发者参数设置SqlSessionFactory</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">resolveMapperLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      factory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">resolveMapperLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> factoryPropertyNames <span class="token operator">=</span> <span class="token class-name">Stream</span>        <span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化设置动态SQL语言驱动</span>    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">LanguageDriver</span><span class="token punctuation">></span></span> defaultLanguageDriver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getDefaultScriptingLanguageDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryPropertyNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"scriptingLanguageDrivers"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>languageDrivers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Need to mybatis-spring 2.0.2+</span>      factory<span class="token punctuation">.</span><span class="token function">setScriptingLanguageDrivers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>languageDrivers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultLanguageDriver <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>languageDrivers<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        defaultLanguageDriver <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>languageDrivers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>factoryPropertyNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"defaultScriptingLanguageDriver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Need to mybatis-spring 2.0.2+</span>      factory<span class="token punctuation">.</span><span class="token function">setDefaultScriptingLanguageDriver</span><span class="token punctuation">(</span>defaultLanguageDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//最终获取到SqlSessionFactory</span>    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//处理配置</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">applyConfiguration</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactoryBean</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">///配置文件中读取配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getConfigLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从开放的自定义接口实现中读取配置</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationCustomizers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurationCustomizer</span> customizer <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configurationCustomizers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设置配置</span>    factory<span class="token punctuation">.</span><span class="token function">setConfiguration</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Bean</span>  <span class="token comment">//容器中没有该实例则初始化SqlSessionTemplate，优先使用开发者自定义的SqlSessionTemplate</span>  <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionTemplate</span> <span class="token function">sqlSessionTemplate</span><span class="token punctuation">(</span><span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//指定执行器类型</span>    <span class="token class-name">ExecutorType</span> executorType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executorType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">,</span> executorType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionTemplate</span><span class="token punctuation">(</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfiguredMapperScannerRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//必须存在 @EnableAutoConfiguration 注解</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">AutoConfigurationPackages</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not determine auto-configuration package, automatic mapper scanning disabled."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Searching for mappers annotated with @Mapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//@EnableAutoConfiguration 注解 指定类的路径</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> packages <span class="token operator">=</span> <span class="token class-name">AutoConfigurationPackages</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        packages<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>pkg <span class="token operator">-></span> logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using auto-configuration base package '&#123;&#125;'"</span><span class="token punctuation">,</span> pkg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//扫描注册 @Mapper</span>      <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"processPropertyPlaceHolders"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"annotationClass"</span><span class="token punctuation">,</span> <span class="token class-name">Mapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"basePackage"</span><span class="token punctuation">,</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>packages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BeanWrapper</span> beanWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span><span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>beanWrapper<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token comment">// Need to mybatis-spring 2.0.2+</span>          <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>x <span class="token operator">-></span> x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"lazyInitialization"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>x <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"lazyInitialization"</span><span class="token punctuation">,</span> <span class="token string">"$&#123;mybatis.lazy-initialization:false&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@org.springframework.context.annotation.Configuration</span>  <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">AutoConfiguredMapperScannerRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment">//没有MapperFactoryBean，MapperScannerConfigurer时扫描注册才会生效</span>  <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">MapperFactoryBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token comment">//未找到注册mapper的配置，如@MapperScan, MapperFactoryBean和MapperScannerConfigurer</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MapperScannerRegistrarNotFoundConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>          <span class="token string">"Not found configuration for registering mapper bean using @MapperScan, MapperFactoryBean and MapperScannerConfigurer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>MybatisLanguageDriverAutoConfiguration</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">LanguageDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisLanguageDriverAutoConfiguration</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">CONFIGURATION_PROPERTY_PREFIX</span> <span class="token operator">=</span> <span class="token string">"mybatis.scripting-language-driver"</span><span class="token punctuation">;</span>  <span class="token comment">//FreeMarkerLanguageDriver,FreeMarker动态sql语言驱动</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">FreeMarkerLanguageDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">"org.mybatis.scripting.freemarker.FreeMarkerLanguageDriverConfig"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">LegacyFreeMarkerConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token class-name">FreeMarkerLanguageDriver</span> <span class="token function">freeMarkerLanguageDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FreeMarkerLanguageDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">FreeMarkerLanguageDriver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">FreeMarkerLanguageDriverConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">FreeMarkerConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token class-name">FreeMarkerLanguageDriver</span> <span class="token function">freeMarkerLanguageDriver</span><span class="token punctuation">(</span><span class="token class-name">FreeMarkerLanguageDriverConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FreeMarkerLanguageDriver</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token constant">CONFIGURATION_PROPERTY_PREFIX</span> <span class="token operator">+</span> <span class="token string">".freemarker"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">FreeMarkerLanguageDriverConfig</span> <span class="token function">freeMarkerLanguageDriverConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">FreeMarkerLanguageDriverConfig</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>SpringBootVFS</li></ol><p><code>mybatis</code>中<code>VFS</code>的默认实现<code>DefaultVFS</code>无法读取<code>Spring Boot</code>嵌套jar的资源文件，所以更换为SpringBootVFS读取。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> urlString <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> baseUrlString <span class="token operator">=</span> urlString<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">?</span> urlString <span class="token operator">:</span> urlString<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> resourceResolver<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>baseUrlString <span class="token operator">+</span> <span class="token string">"**/*.class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>resources<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>resource <span class="token operator">-></span> <span class="token function">preserveSubpackageName</span><span class="token punctuation">(</span>baseUrlString<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">preserveSubpackageName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> baseUrlString<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Resource</span> resource<span class="token punctuation">,</span>    <span class="token keyword">final</span> <span class="token class-name">String</span> rootPath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rootPath <span class="token operator">+</span> <span class="token punctuation">(</span>rootPath<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">)</span>            <span class="token operator">+</span> resource<span class="token punctuation">.</span><span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>baseUrlString<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UncheckedIOException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付动态码设计及TOTP算法Luhm算法过程解析</title>
      <link href="/2021/03/30/algo-totp/"/>
      <url>/2021/03/30/algo-totp/</url>
      
        <content type="html"><![CDATA[<p>本文分享了支付动态码设计实现，及TOTP算法和Luhm算法过程解析。</p><span id="more"></span><h2 id="支付动态码"><a href="#支付动态码" class="headerlink" title="支付动态码"></a>支付动态码</h2><p>业务需求会员余额可被扫动态码直接扣款，暂未查询到相关资料，于是在引用成熟算法的基础上简单设计了一个支付动态码规则。大佬指点请发邮件。</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><p>参考现有成熟支付码为18位数字，且每分钟变化一次，同时动态码唯一并识别到会员，并且有一定安全性。</p><ul><li>1.会员id不能明文出现在支付码中，且位数太长，只能映射到存储</li><li>2.支付码有业务规则，不能通过uuid或者其他类似规则生成，并且要区别于其他支付码，使用前俩位识别</li><li>3.每分钟更新可通过设置过期时间实现，定为TOTP算法生成部分位数</li><li>4.映射会员需要校验识别会员，定为4位随机数缓存映射+会员id十进制转八进制后三位校验</li><li>5.参考银行卡号等生成规则使用Luhm算法校验支付码的正确性。</li><li>6.保证支付码的当前唯一性，通过支付码为key保存，确保支付码唯一。</li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><code>xx,xxxxxxxx,xxxx,xxx,x</code><br><code>43,55878487,6107,262,9</code></p><ul><li>1-2位：识别码，固定数字xx（2位），区别于其他支付码，如支付宝11-15开头等。</li><li>3-10位：TOTP算法，每60秒更新一次（8位）。</li><li>11-14位：随机数（4位）通过获取登录用户的随机数在缓存中校验。</li><li>15-17：会员id十进制转八进制后截取最后三位，校验用户（3位）。</li><li>18：Luhm算法，付款码正确性校验位（1位）。</li></ul><h2 id="TOTP算法"><a href="#TOTP算法" class="headerlink" title="TOTP算法"></a>TOTP算法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//使用会员id+会员支付密码密文+共享密码组成作为HmacSHA256秘钥</span>    <span class="token class-name">String</span> key<span class="token operator">=</span><span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> step<span class="token operator">=</span><span class="token number">60000</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> crypto<span class="token operator">=</span><span class="token string">"HmacSHA256"</span><span class="token punctuation">;</span>    <span class="token comment">//取时间</span>    <span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//(时间-0)/60000后转换为16进制</span>    <span class="token comment">//time=19B4AD8</span>    <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>now<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">/</span>step<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> timeBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//不够十六位前补0</span>    <span class="token comment">//time=00000000019B4AD8</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>timeBuilder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>        timeBuilder<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> timeBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//time转byte</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg <span class="token operator">=</span> <span class="token function">hexStr2Bytes</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//key转byte</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> k <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//Mac HmacSHA256算法加密 Mac还包含HmacSHA1等其他算法</span>    <span class="token class-name">Mac</span> hmac<span class="token punctuation">;</span>    hmac <span class="token operator">=</span> <span class="token class-name">Mac</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>crypto<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SecretKeySpec</span> macKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecretKeySpec</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">"AES"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hmac<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>macKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target <span class="token operator">=</span> hmac<span class="token punctuation">.</span><span class="token function">doFinal</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">StringBuilder</span> result<span class="token punctuation">;</span>    <span class="token comment">//取最后一个字节(60)和0xf做按位与操作，取低四位 offset=1101(13)</span>    <span class="token comment">//111101&amp;1111->1101(13)</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> target<span class="token punctuation">[</span>target<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">;</span>    <span class="token comment">//从offset开始取4个字节，大端模式组成整数</span>    <span class="token keyword">int</span> binary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>offset<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x7f</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span>            <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span>            <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>offset <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//取余</span>    <span class="token keyword">int</span> otp <span class="token operator">=</span> binary <span class="token operator">%</span> <span class="token number">10000000</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>otp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//不够位数前补0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//得到加密后8位字符</span>    <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Luhm算法"><a href="#Luhm算法" class="headerlink" title="Luhm算法"></a>Luhm算法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">getCheckCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> nonCheckCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//43558784876107262</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> nonCheckCode<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> luhmSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//i从最后一位开始</span>    <span class="token comment">//j从第一位开始</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> chs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果为奇数位，则*2</span>            <span class="token comment">//从最后一位开始，校验的时候为（包含校验位）偶数位，要得到校验位则是奇数位，也就是除了校验位第一位</span>            k <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token comment">//如果是俩位数则十位数+个位数（-9）</span>            k <span class="token operator">=</span> k <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">+</span> k <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//其他位不做处理，将所有值相加</span>        luhmSum <span class="token operator">+=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//示例43558784876107262</span>    <span class="token comment">//2->4 2->4 0->0 6->3 8->7 8->7 8->7 5->1 4->8</span>    <span class="token comment">//4+4+0+3+7+7+7+1+8+6+7+1+7+4+7+5+3=81</span>    <span class="token comment">//如果为0取0，10-luhmSum%10得到最后校验位</span>    <span class="token comment">//10-81%10=9</span>    <span class="token comment">//得到的校验位是9 所以正确号码为435587848761072629</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>luhmSum <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token char">'0'</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> luhmSum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TOTP </tag>
            
            <tag> Luhm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中编译OpenJDK11</title>
      <link href="/2021/03/20/jdk-ubuntu/"/>
      <url>/2021/03/20/jdk-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>本文分享了在Ubuntu中编译OpenJDK11</p><span id="more"></span><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h2><ol><li>下载源码<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载源码</span><span class="token function">wget</span> http://hg.openjdk.java.net/jdk/jdk11/archive/tip.tar.gz<span class="token comment">#解压源码包</span><span class="token function">tar</span> <span class="token parameter variable">-xzf</span> tip.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>从<code>github</code>克隆<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:openjdk/jdk.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-依赖"><a href="#2-依赖" class="headerlink" title="2. 依赖"></a>2. 依赖</h2><p>查看<code>doc/building.html (html version)</code>或者<code>doc/building.md (markdown version)</code>获取编译步骤。</p><p>安装编译基础工具：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在配置或编译过程中缺少一些依赖，会有如下类似报错：</p><pre class="line-numbers language-none"><code class="language-none">error: Could not find all X11 headers (shape.h Xrender.h XTest.h Intrinsic.h). You might be able to fix this by running  &#39;sudo apt-get install libx11-dev libxext-dev libxrender-dev libxtst-dev libxt-dev&#39;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>根据提示信息安装依赖，本人至少安装以下依赖：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span><span class="token function">apt-get</span> <span class="token function">install</span> libx11-dev<span class="token function">apt-get</span> <span class="token function">install</span> libxext-dev<span class="token function">apt-get</span> <span class="token function">install</span> libxrender-dev<span class="token function">apt-get</span> <span class="token function">install</span> libxtst-dev<span class="token function">apt-get</span> <span class="token function">install</span> libxt-dev<span class="token function">apt-get</span> <span class="token function">install</span> libcups2-dev<span class="token function">apt-get</span> <span class="token function">install</span> libfontconfig1-dev<span class="token function">apt-get</span> <span class="token function">install</span> libasound2-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>在源码根目录下执行：</p><pre class="line-numbers language-none"><code class="language-none">bash configure --enable-debug --with-jvm-variants&#x3D;server     --enable-dtrace --disable-ccache --disable-warnings-as-errors<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一些参数说明：</p><pre class="line-numbers language-none"><code class="language-none">--enable-debug：启用debug模式--with-jvm-variants&#x3D;server：server模式--enable-dtrace：开启性能工具--disable-warnings-as-errors：跳过警告--with-boot-jdk：指定boot jdk路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功结果：</p><pre class="line-numbers language-none"><code class="language-none">Configuration summary:* Debug level:    release* HS debug level: product* JVM variants:   server* JVM features:   server: &#39;aot cds cmsgc compiler1 compiler2 epsilongc g1gc graal jfr jni-check jvmci jvmti management nmt parallelgc serialgc services vm-structs&#39;* OpenJDK target: OS: linux, CPU architecture: x86, address length: 64* Version string: 11-internal+0-adhoc.root.jdk11-1ddf9a99e4ad (11-internal)Tools summary:* Boot JDK:       openjdk version &quot;11.0.10&quot; 2021-01-19 OpenJDK Runtime Environment (build 11.0.10+9-Ubuntu-0ubuntu1.18.04) OpenJDK 64-Bit Server VM (build 11.0.10+9-Ubuntu-0ubuntu1.18.04, mixed mode, sharing)  (at &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64)* Toolchain:      gcc (GNU Compiler Collection)* C Compiler:     Version 7.5.0 (at &#x2F;usr&#x2F;bin&#x2F;gcc)* C++ Compiler:   Version 7.5.0 (at &#x2F;usr&#x2F;bin&#x2F;g++)Build performance summary:* Cores to use:   3* Memory limit:   3921 MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-编译"><a href="#4-编译" class="headerlink" title="4. 编译"></a>4. 编译</h2><p>配置后执行编译命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功结果：</p><pre class="line-numbers language-none"><code class="language-none">Creating jdk imageStopping sjavac serverFinished building target &#39;images&#39; in configuration &#39;linux-x86_64-normal-server-fastdebug&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="5-验证"><a href="#5-验证" class="headerlink" title="5. 验证"></a>5. 验证</h2><p>找到编译好的jdk目录并验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#编译日志路径</span>build/linux-x86_64-normal-server-fastdebug/configure.log<span class="token comment">#jdk路径</span><span class="token builtin class-name">cd</span> build/linux-x86_64-normal-server-fastdebug/jdk<span class="token comment">#验证命令</span>./build/linux-x86_64-normal-server-fastdebug/jdk/bin/java <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功结果：</p><pre class="line-numbers language-none"><code class="language-none">openjdk version &quot;11-internal&quot; 2018-09-25OpenJDK Runtime Environment (fastdebug build 11-internal+0-adhoc.root.jdk11-1ddf9a99e4ad)OpenJDK 64-Bit Server VM (fastdebug build 11-internal+0-adhoc.root.jdk11-1ddf9a99e4ad, mixed mode)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-问题"><a href="#6-问题" class="headerlink" title="6. 问题"></a>6. 问题</h2><ol><li>配置编译过程中，大部分都是缺少依赖问题，提示缺少什么依赖安装什么依赖即可</li><li><code>Boot JDK</code>未找到，如下错误<pre class="line-numbers language-none"><code class="language-none">Could not find a valid Boot JDK. You might be able to fix this by running &#39;sudo apt-get install openjdk-8-jdk&#39;.configure: This might be fixed by explicitly setting --with-boot-jdkconfigure: error: Cannot continueconfigure exiting with result code 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>安装<code>openjdk-8-jdk</code>依赖：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openjdk-8-jdk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>仍然报错：<pre class="line-numbers language-none"><code class="language-none">configure: Potential Boot JDK found at &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-1.8.0-openjdk-amd64 is incorrect JDK version (openjdk version &quot;1.8.0_282&quot;); ignoringconfigure: (Your Boot JDK version must be one of: 10 11)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>卸载<code>openjdk-8-jdk</code>并安装<code>openjdk-11-jdk</code>：<pre class="line-numbers language-none"><code class="language-none">apt-get remove openjdk-8-jdkapt-get install openjdk-11-jdkapt autoremove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>至此，在Ubuntu中编译了OpenJDK11。</p>]]></content>
      
      
      <categories>
          
          <category> JDK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL阻塞，修复损坏的innodb</title>
      <link href="/2021/03/09/mysql-data/"/>
      <url>/2021/03/09/mysql-data/</url>
      
        <content type="html"><![CDATA[<p>记录一次生产迁移数据造成生产事故及修复过程</p><span id="more"></span><h2 id="1-事件起由"><a href="#1-事件起由" class="headerlink" title="1.事件起由"></a>1.事件起由</h2><p>该系统是运行于中东国家的分布式多节点系统，维持近十万商户交易。由于服务器硬件没有及时到位，只运行于一个节点，短时间内，业务数据库达到了接近上亿级别的数据量，应用服务器也超过了负荷。在硬件到位后，扩容了4-5个节点，面临的问题需要把运行于第一个节点的商户平均分到4个节点上，减轻压力。应用服务器比较容易处理，而数据库按照一定的规则将商户数据迁移到新数据库则比较复杂。</p><h2 id="2-迁移方案"><a href="#2-迁移方案" class="headerlink" title="2.迁移方案"></a>2.迁移方案</h2><p>确认了俩套方案去做数据库数据的迁移：</p><ol><li>编写脚本，以时间，id等因素迁移数据。</li><li>一次性将节点一数据库全量备份恢复到其他节点，并且恢复交易，然后长期计划删除不属于该节点商户业务数据。</li></ol><p>通过评审确认了2方案为最后方案。原因为1方案涉及需要迁移的数据太多，太杂，稍有错误将会影响系统的运行，且系统每天只有4小时的可停机时间，1方案极可能迁移不完，需要二次迁移等，阻断交易风险巨大。而反向删除业务数据更加好做，且时间足够使用物理备份恢复数据库，删除数据可以分布去做，而不影响交易。</p><p>实际中使用<code>xtrabackup</code>工具迁移数据。完美的迁移了数据并且恢复了业务。而问题出现在了删除数据环节。</p><h2 id="3-造成阻塞"><a href="#3-造成阻塞" class="headerlink" title="3.造成阻塞"></a>3.造成阻塞</h2><p>数据恢复后，编写删除非该节点商户业务数据，准备删除脚本，并执行</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> node_sku <span class="token keyword">where</span> op_map_id <span class="token operator">not</span> <span class="token operator">in</span> <span class="token punctuation">(</span>xxxx<span class="token punctuation">,</span>xx<span class="token punctuation">,</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-Dtk_biz</span> <span class="token operator">&lt;</span> exportSql/delete_sku.sql   //输入密码<span class="token function">nohup</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-Dtk_biz</span> <span class="token operator">&lt;</span> exportSql/delete_sku.sql <span class="token operator">&amp;</span>   //会跳过输入密码，并报没有权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>经过停机时间，恢复后系统后，数据库响应变的非常慢，造成大面积商户不能使用问题。登录服务器发现数据库大量报错信息。</p><pre class="line-numbers language-none"><code class="language-none">Lock wait timeout exceeded; try restarting transaction<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> information_schema<span class="token punctuation">.</span>INNODB_TRX<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过以上脚本发现有一条涉及800万数据的回滚。准备杀掉事务，设置一些锁参数等恢复了数据库。</p><p>经过实践及大量资料的查阅，得知大量数据删除这样的操作的非常不可取的，一旦操作中断Rolling back将花费更多的时间，并造成数据库阻塞。可以通过将数据转移到临时表，使用truncate table tablename等方法，或者保证删除数据脚本的可用性，如数据量较小。</p><p>之后减小了脚本删除的数据量及关闭了mysql日志又执行了一次删除数据操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// /etc/my.cnfskip-log-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">autocommit&#x3D;1 默认自动提交autocommit&#x3D;0 手动提交<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果发生了第二次数据库阻塞，并且在业务方催的时候错误的执行了kill，reboot，断电操作，造成Mysql启动不起来。</p><h2 id="4-修复损坏的innodb"><a href="#4-修复损坏的innodb" class="headerlink" title="4.修复损坏的innodb"></a>4.修复损坏的innodb</h2><p>查看<code>/var/log/mysql.log</code>，发现大量表innodb损坏，修复数据库：</p><ol><li><p>配置<code>my.cnf</code>中<code>innodb_force_recovery</code></p><pre class="line-numbers language-none"><code class="language-none">innodb_force_recovery&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置为1，重启数据库，如果不成功则修改为2重启，1-6不同含义可参考<a href="https://dev.mysql.com/doc/refman/8.0/en/forcing-innodb-recovery.html">mysql官网Forcing InnoDB Recovery</a>直到启动成功。</p></li><li><p>mysql启动后，损坏的表是只读状态<code>Can&#39;t lock file (errno: 165 - Table is read only)</code>。</p></li><li><p>将损坏的表的数据导出</p><pre class="line-numbers language-none"><code class="language-none">mysqldump -u root -p tk_biz node_sku --no-create-info --where&#x3D;&quot;op_map_id in (&#39;xx&#39;,&#39;xxx&#39;,&#39;xxxx&#39;)&quot;&gt; &#x2F;home&#x2F;exportSql&#x2F;sku.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将损坏表drop</p></li><li><p>删除<code>innodb_force_recovery</code>配置</p></li><li><p>启动mysql</p></li><li><p>将导出数据重新恢复到数据库中</p></li><li><p>恢复是可能出现丢失数据问题</p><pre class="line-numbers language-none"><code class="language-none">mysqldump: Error 2013: Lost connection to MySQL server during query when dumping table &#96;node_payment&#96; at row: 6060246<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>恢复innodb后会有错误：</p><pre class="line-numbers language-none"><code class="language-none">log sequence number is in the future<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>原因是InnoDB日志文件(重做日志)与数据文件不同步</p></li></ol><p>致此数据恢复正常。分享记录了一些操作，有些其他细节也记不清了。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中使用微信(deepin-wine)</title>
      <link href="/2021/02/26/ubuntu-wechat/"/>
      <url>/2021/02/26/ubuntu-wechat/</url>
      
        <content type="html"><![CDATA[<p>本文分享了在Ubuntu环境中使用微信</p><span id="more"></span><p>最近给同学们更换了<code>Ubuntu</code>开发环境，问题是微信等官方并没有提供<code>Ubuntu</code>支持版本。同样还有QQ，输入法等，这里分享一些在<code>Ubuntu</code>中微信的使用。推荐使用第四种，第五种方式。</p><h2 id="1-封装web应用"><a href="#1-封装web应用" class="headerlink" title="1. 封装web应用"></a>1. 封装web应用</h2><p>可以利用<code>nativefier</code>，<code>nw.js</code>等打包工具或者设置快捷方式将微信网页版<code>web</code>打包成应用。目前这种办法不能使用了，<code>Ubuntu</code>下微信网页版不能正常打开。</p><h2 id="2-wewechat"><a href="#2-wewechat" class="headerlink" title="2. wewechat"></a>2. wewechat</h2><p>可以使用开源第三方，如<code>wewechat</code>,<code>electronic-wechat</code>等，大概率现在也不能正常使用。</p><h2 id="3-wine"><a href="#3-wine" class="headerlink" title="3. wine"></a>3. wine</h2><p>下载安装后发现有输入框不显示，缺少依赖等问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> wine<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载exe运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wine WeChatSetup.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-deepin-wine"><a href="#4-deepin-wine" class="headerlink" title="4. deepin-wine"></a>4. deepin-wine</h2><p>使用<code>deepin-wine</code>环境和<code>deepin</code>官方原版软件包</p><ol><li>下载安装<code>deepin-wine</code>环境</li><li>下载软件包</li><li>安装软件包<pre class="line-numbers language-none"><code class="language-none">dpkg -i xxx.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>微信不能发送图片：<pre class="line-numbers language-none"><code class="language-none">sudo apt-get install libjpeg62:i386<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>拷贝字体：<pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;share&#x2F;deepin-wine&#x2F;wine&#x2F;fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="5-deepin-wine"><a href="#5-deepin-wine" class="headerlink" title="5. deepin-wine"></a>5. deepin-wine</h2><p>同样也可以使用<a href="https://github.com/zq1997/deepin-wine">开源快速方法</a>，其中有很详细的介绍</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> -O- https://deepin-wine.i-m.dev/setup.sh <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>详细配置可详见<code>setup.sh</code>与文档介绍</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> com.qq.weixin.deepin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> deepin-wine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring CORS原理解析</title>
      <link href="/2021/01/25/spring-cors/"/>
      <url>/2021/01/25/spring-cors/</url>
      
        <content type="html"><![CDATA[<p>本文分享了跨域，CORS原理解析等内容。阐述了CORS在Spring MVC和Spring Security中实现原理。</p><span id="more"></span><h2 id="1-同源策略"><a href="#1-同源策略" class="headerlink" title="1. 同源策略"></a>1. 同源策略</h2><p>同源策略是一种约定，缺少同源策略浏览器容易受到XSS，CSFR等攻击，为了安全，浏览器会限制非同源的请求。同源为协议，域名，端口三者相同，任意一者不同则为非同源。</p><h2 id="2-跨域方案"><a href="#2-跨域方案" class="headerlink" title="2. 跨域方案"></a>2. 跨域方案</h2><ol><li>通过<code>nginx</code>代理转发。避开跨域请求，使浏览器访问同源，<code>nginx</code>转发到不同源。</li><li>JSONP，利用<code>Ajax</code>请求会受到同源策略限制，而<code>script</code>标签请求不会，绕过同源策略。但只支持<code>GET</code>，同时是不安全的。</li><li>CORS是跨域资源共享，对于简单请求只要服务器返回正确的响应头即可，非简单请求需要先进行预检请求，要求首先使用<code>Fetch</code>发起<code>OPTIONS</code>预检请求到服务器，通过<code>Access-Control-Allow-Origin</code>以获知服务器是否允许该请求。</li><li>websocket，document.domain等其他方案。</li></ol><h2 id="3-CORS简介"><a href="#3-CORS简介" class="headerlink" title="3. CORS简介"></a>3. CORS简介</h2><p>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。 跨域资源共享（ CORS ）机制允许 Web 应用服务器进行跨域访问控制，从而使跨域数据传输得以安全进行。现代浏览器支持在 API 容器中（例如 XMLHttpRequest 或 Fetch ）使用 CORS，以降低跨域 HTTP 请求所带来的风险。</p><p>通常配置<code>CorsConfigurationSource</code>即可实现CORS设置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">CorsConfigurationSource</span> <span class="token function">corsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">CorsConfiguration</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">applyPermitDefaultValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"Authentication-Info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">addExposedHeader</span><span class="token punctuation">(</span><span class="token string">"Authentication-Info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> source<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Spring-MVC"><a href="#4-Spring-MVC" class="headerlink" title="4. Spring MVC"></a>4. Spring MVC</h2><p>当<code>OPTIONS</code>预检请求发生时，<code>HandlerMapping.getHandler</code>会得到<code>PreFlightHandler</code>作为请求<code>handler</code>。更多详细内容可先理解<code>Spring MVC</code>如何处理一个请求。</p><p><code>Spring MVC</code>是如何获取的该<code>handler</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Bean name or resolved handler?</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>handler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">HandlerExecutionChain</span> executionChain <span class="token operator">=</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Mapped to "</span> <span class="token operator">+</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>request<span class="token punctuation">.</span><span class="token function">getDispatcherType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">DispatcherType</span><span class="token punctuation">.</span><span class="token constant">ASYNC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Mapped to "</span> <span class="token operator">+</span> executionChain<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果是预检请求则获取HandlerExecutionChain</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasCorsConfigurationSource</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//从配置的corsConfigurationSource中获取CorsConfiguration</span><span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>corsConfigurationSource <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>corsConfigurationSource<span class="token punctuation">.</span><span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从注解中获取CorsConfiguration</span><span class="token class-name">CorsConfiguration</span> handlerConfig <span class="token operator">=</span> <span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//CorsConfiguration选取，优先获取corsConfigurationSource中CorsConfiguration</span>config <span class="token operator">=</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> config<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>handlerConfig<span class="token punctuation">)</span> <span class="token operator">:</span> handlerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//配置获取CorsHandlerExecutionChain,详细查看下一块代码</span>executionChain <span class="token operator">=</span> <span class="token function">getCorsHandlerExecutionChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> executionChain<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> executionChain<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getCorsHandlerExecutionChain</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HandlerExecutionChain</span> chain<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">CorsConfiguration</span> config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//是否是预检请求</span><span class="token comment">//return (HttpMethod.OPTIONS.matches(request.getMethod()) &amp;&amp;</span><span class="token comment">//request.getHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD) != null);   </span><span class="token comment">//public static final String ACCESS_CONTROL_REQUEST_METHOD = "Access-Control-Request-Method";         </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//创建HandlerExecutionChain</span><span class="token class-name">HandlerInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PreFlightHandler</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//添加CorsInterceptor</span>chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorsInterceptor</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//PreFlightHandler和CorsInterceprtor都是调用corsProcessor.processRequest</span><span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CorsProcessor</code>是一个<code>interface</code>，他的默认实现是<code>DefaultCorsProcessor</code>，来看<code>DefaultCorsProcessor</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">CorsConfiguration</span> config<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>  <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//Origin</span>response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">VARY</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ORIGIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Access-Control-Request-Method</span>response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">VARY</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_REQUEST_METHOD</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//AAccess-Control-Request-Headers</span>response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">VARY</span><span class="token punctuation">,</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_REQUEST_HEADERS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//非Cors请求通过</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isCorsRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//已经包含了Access-Control-Allow-Origin通过</span><span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token constant">ACCESS_CONTROL_ALLOW_ORIGIN</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Skip: response already contains \"Access-Control-Allow-Origin\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">boolean</span> preFlightRequest <span class="token operator">=</span> <span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preFlightRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//没有配置CorsConfiguration的预请求返回403</span><span class="token comment">//response.setStatusCode(HttpStatus.FORBIDDEN);  FORBIDDEN(403, "Forbidden")</span><span class="token comment">//response.getBody().write("Invalid CORS request".getBytes(StandardCharsets.UTF_8));</span><span class="token comment">//response.flush();</span><span class="token function">rejectRequest</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletServerHttpResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//否则通过</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//执行具体处理，详细如下</span><span class="token keyword">return</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletServerHttpRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ServletServerHttpResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">,</span> preFlightRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">CorsConfiguration</span> config<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preFlightRequest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//该方法主要为检查请求是否允许，并作出了不同动作如：</span><span class="token comment">//rejectRequest 403 Reject:origin is not allowed</span><span class="token comment">//通过请求设置AccessControlAllowMethods等</span><span class="token comment">//在下方代码中详细描述checkOrigin，如何确认请求通过</span><span class="token class-name">String</span> requestOrigin <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> allowOrigin <span class="token operator">=</span> <span class="token function">checkOrigin</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> requestOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpHeaders</span> responseHeaders <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>allowOrigin <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Reject: '"</span> <span class="token operator">+</span> requestOrigin <span class="token operator">+</span> <span class="token string">"' origin is not allowed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rejectRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">HttpMethod</span> requestMethod <span class="token operator">=</span> <span class="token function">getMethodToUse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> preFlightRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMethod</span><span class="token punctuation">></span></span> allowMethods <span class="token operator">=</span> <span class="token function">checkMethods</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> requestMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>allowMethods <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Reject: HTTP '"</span> <span class="token operator">+</span> requestMethod <span class="token operator">+</span> <span class="token string">"' is not allowed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rejectRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> requestHeaders <span class="token operator">=</span> <span class="token function">getHeadersToUse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> preFlightRequest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> allowHeaders <span class="token operator">=</span> <span class="token function">checkHeaders</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preFlightRequest <span class="token operator">&amp;&amp;</span> allowHeaders <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Reject: headers '"</span> <span class="token operator">+</span> requestHeaders <span class="token operator">+</span> <span class="token string">"' are not allowed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rejectRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlAllowOrigin</span><span class="token punctuation">(</span>allowOrigin<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preFlightRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlAllowMethods</span><span class="token punctuation">(</span>allowMethods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preFlightRequest <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>allowHeaders<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlAllowHeaders</span><span class="token punctuation">(</span>allowHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getExposedHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlExposeHeaders</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getExposedHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAllowCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>preFlightRequest <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">getMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>responseHeaders<span class="token punctuation">.</span><span class="token function">setAccessControlMaxAge</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>response<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查请求Origin:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">checkOrigin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> requestOrigin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//检查请求Origin，不存在则不通过</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>requestOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//allowedOrigins为空不通过</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowedOrigins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//如果allowedOrigins包含*</span><span class="token comment">//发出请求时，如果前端携带了cookie, 而服务器配置为*, 浏览器则会拒绝请求</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowedOrigins<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token constant">ALL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Access-Control-Allow-Credentials</span><span class="token comment">//如果allowCredentials配置为true，表示可携带验证信息如：cookie则返回*</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCredentials <span class="token operator">!=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">ALL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回来源地址</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> requestOrigin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历允许地址，包含改地址则返回</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> allowedOrigin <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowedOrigins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>requestOrigin<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>allowedOrigin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> requestOrigin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//该地址不允许</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Spring-Security"><a href="#5-Spring-Security" class="headerlink" title="5. Spring Security"></a>5. Spring Security</h2><p>在<code>Spring Security</code>中通常配置<code>HttpSecurity</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只需调用<code>.cors()</code>就配置了允许跨域：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">CorsConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpSecurity</span><span class="token punctuation">></span></span> <span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CorsConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">SecurityConfigurerAdapter</span><span class="token punctuation">&lt;</span><span class="token class-name">DefaultSecurityFilterChain</span><span class="token punctuation">,</span> <span class="token class-name">HttpSecurity</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token class-name">C</span> <span class="token function">getOrApply</span><span class="token punctuation">(</span><span class="token class-name">C</span> configurer<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">C</span> existingConfig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">C</span><span class="token punctuation">)</span> <span class="token function">getConfigurer</span><span class="token punctuation">(</span>configurer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>existingConfig <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> existingConfig<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">apply</span><span class="token punctuation">(</span>configurer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>HttpSecurity</code>中获取了<code>CorsConfigurer</code>，<code>configure()</code>在<code>SecurityBuilder</code>build调用，详看<code>configure()</code>如何创建<code>CorsConfigurer</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">H</span> http<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">getSharedObject</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取CorsFilter</span><span class="token class-name">CorsFilter</span> corsFilter <span class="token operator">=</span> <span class="token function">getCorsFilter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>corsFilter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Please configure either a "</span> <span class="token operator">+</span> <span class="token constant">CORS_FILTER_BEAN_NAME</span> <span class="token operator">+</span> <span class="token string">" bean or a "</span><span class="token operator">+</span> <span class="token constant">CORS_CONFIGURATION_SOURCE_BEAN_NAME</span> <span class="token operator">+</span> <span class="token string">"bean."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加CorsFilter到filter调用链</span>http<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>corsFilter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取<code>CorsFilter</code>,<code>CorsFilter</code>是<code>Spring MVC</code>中实现跨域一种方式。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">CorsFilter</span> <span class="token function">getCorsFilter</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果配置了configurationSource，从configurationSource中获取corsFilter</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationSource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从容器查corsFilter获取corsFilter</span><span class="token keyword">boolean</span> containsCorsFilter <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">CORS_FILTER_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>containsCorsFilter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">CORS_FILTER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从容器中查corsConfigurationSource创建corsFilter</span><span class="token keyword">boolean</span> containsCorsSource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span><span class="token constant">CORS_CONFIGURATION_SOURCE_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>containsCorsSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">CorsConfigurationSource</span> configurationSource <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">CORS_CONFIGURATION_SOURCE_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">CorsConfigurationSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>configurationSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//从HandlerMappingIntrospector获取corsFilter</span><span class="token keyword">boolean</span> mvcPresent <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token constant">HANDLER_MAPPING_INTROSPECTOR</span><span class="token punctuation">,</span>context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mvcPresent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token class-name">MvcCorsFilter</span><span class="token punctuation">.</span><span class="token function">getMvcCorsFilter</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Spring Security</code>通过以上四种方式获取<code>corsFilter</code>,同样我们可以通过这四种方式进行跨域配置。<br><code>Spring MVC</code>中<code>CorsFilter</code>同样是调用<code>DefaultCorsProcessor</code>中<code>processRequest</code>，和<code>PreFlightHandler</code>中一样。详细流程参考上方内容。</p><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><span class="function"><span class="params">            FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;    CorsConfiguration corsConfiguration = <span class="keyword">this</span>.configSource.getCorsConfiguration(request);    <span class="keyword">boolean</span> isValid = <span class="keyword">this</span>.processor.processRequest(corsConfiguration, request, response);    <span class="keyword">if</span> (!isValid || CorsUtils.isPreFlightRequest(request)) &#123;        <span class="keyword">return</span>;    &#125;    filterChain.doFilter(request, response);&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> CORS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL8搭建，调优及数据迁移(xtrabackup)</title>
      <link href="/2020/10/26/mysql-init/"/>
      <url>/2020/10/26/mysql-init/</url>
      
        <content type="html"><![CDATA[<p>记一次国外项目MySQL生产环境搭建，并使用xtrabackup8对大数量数据进行迁移过程。</p><span id="more"></span><p>本文使用的操作系统为<code>CentOS7</code>。更多详细的内容请查看<a href="https://www.mysql.com">MySQL官网</a>，<a href="https://dev.mysql.com/downloads/mysql">MySQL下载</a>，<a href="https://www.percona.com/doc/percona-xtrabackup/8.0/index.html">xtrabackup官网</a>。</p><p>mysql升级到8可能出现一些连不上的问题，可升级连接驱动解决。如：<code>com.mysql.jdbc.Driver</code>版本升级。</p><p>生产环境数据库应隐藏到内网中，外网不可连接。</p><h2 id="1-MySQL8安装及使用"><a href="#1-MySQL8安装及使用" class="headerlink" title="1. MySQL8安装及使用"></a>1. MySQL8安装及使用</h2><h3 id="1-卸载"><a href="#1-卸载" class="headerlink" title="1. 卸载"></a>1. 卸载</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum list mysql*yum remove mysql*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://repo.mysql.com//mysql80-community-release-el7-6.noarch.rpmyum <span class="token function">install</span> mysql80-community-release-el7-6.noarch.rpmyum <span class="token function">install</span> mysql-community-server<span class="token comment"># 失败可添加参数 --nogpgcheck</span><span class="token comment"># 可能缺少glib等依赖 安装及可</span><span class="token comment"># 过期访问https://dev.mysql.com/downloads/repo/yum/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-配置，调优"><a href="#3-配置，调优" class="headerlink" title="3. 配置，调优"></a>3. 配置，调优</h3><p>配置文件在<code>/etc/my.cnf</code>目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">datadir</span><span class="token operator">=</span>/var/lib/mysql<span class="token assign-left variable">socket</span><span class="token operator">=</span>/var/lib/mysql/mysql.socklog-error<span class="token operator">=</span>/var/log/mysqld.logpid-file<span class="token operator">=</span>/var/run/mysqld/mysqld.pid<span class="token comment"># sql_mode 模式，sql语法，数据校验，可能出现有的项目中sql报错等</span><span class="token assign-left variable">sql_mode</span><span class="token operator">=</span>NO_ENGINE_SUBSTITUTION<span class="token comment"># updateTime自动更新必要参数</span><span class="token assign-left variable">explicit_defaults_for_timestamp</span><span class="token operator">=</span>false<span class="token comment"># mysql调优参数</span><span class="token comment"># 缓存数据内容大小</span><span class="token assign-left variable">innodb_buffer_pool_chunk_size</span><span class="token operator">=</span><span class="token number">1073741824</span><span class="token comment"># 缓存池大小，应为上方参数的倍数</span><span class="token assign-left variable">innodb_buffer_pool_size</span><span class="token operator">=</span><span class="token number">10737418240</span><span class="token comment"># 默认设置为1024，数据量大达到1024后会报错Too many open files</span><span class="token assign-left variable">open_files_limit</span><span class="token operator">=</span><span class="token number">10000</span><span class="token comment"># innoDB 存储引擎使用一个指定大小的Redo log空间,Redo log越大会导致在断电，数据崩溃下需要越长的时间恢复</span><span class="token comment"># 1G预估恢复速度为5分钟</span><span class="token comment"># 参数影响写入速度，测试产生文件大小调整此参数大小</span><span class="token assign-left variable">innodb_log_file_size</span><span class="token operator">=</span>1G<span class="token comment"># 缓存池数量</span><span class="token assign-left variable">innodb_buffer_pool_instances</span><span class="token operator">=</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动</span>systemctl start mysqld.service<span class="token comment"># 停止</span>systemctl stop mysqld.service<span class="token comment"># 查看运行状态</span>systemctl status mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-初次连接"><a href="#5-初次连接" class="headerlink" title="5. 初次连接"></a>5. 初次连接</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 尝试登陆，登陆不成功</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span class="token comment"># 获取初始密码</span><span class="token comment"># A temporary password is generated for root@localhost: ;y*(uKZQ,4rq</span><span class="token comment"># ;y*(uKZQ,4rq则为初始密码</span><span class="token function">grep</span> ‘temporary password’ /var/log/mysqld.log<span class="token comment"># 再次尝试用新密码登陆</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span class="token comment"># 强制修改初始密码，mysql8中密码都必须至少有三种字符，可大小写符号三种拼接</span>alter user user<span class="token punctuation">(</span><span class="token punctuation">)</span> identified by ‘dD_d’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-创建应用使用账号"><a href="#6-创建应用使用账号" class="headerlink" title="6. 创建应用使用账号"></a>6. 创建应用使用账号</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建修改用户，注意mysql8引进新的加密方式caching_sha2_password，这种加密方式客户端不支持，需要制定mysql_native_password加密方式</span><span class="token comment">-- 在生产环境中，每个应用服务器需单独设置可连数据库账号</span><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'tk_node'</span><span class="token variable">@'10.0.10.70'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'dD_d'</span><span class="token punctuation">;</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'tk_node'</span><span class="token variable">@'10.0.10.70'</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">'dD_d'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-赋予权限"><a href="#7-赋予权限" class="headerlink" title="7. 赋予权限"></a>7. 赋予权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 一般我们赋予应用服务器SELECT, INSERT,UPDATE,DELETE这些权限。可依据实际情况赋予权限</span><span class="token comment">-- *.*是为目标库</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span> <span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'tk_node'</span><span class="token variable">@'10.0.10.70'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-数据库操作"><a href="#8-数据库操作" class="headerlink" title="8. 数据库操作"></a>8. 数据库操作</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> tk_control <span class="token keyword">default</span> <span class="token keyword">charset</span> utf8 <span class="token keyword">COLLATE</span> utf8_general_ci<span class="token punctuation">;</span><span class="token keyword">USE</span> tk_control<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-使用xtrabackup8数据迁移"><a href="#2-使用xtrabackup8数据迁移" class="headerlink" title="2. 使用xtrabackup8数据迁移"></a>2. 使用xtrabackup8数据迁移</h2><h3 id="1-数据迁移方案"><a href="#1-数据迁移方案" class="headerlink" title="1. 数据迁移方案"></a>1. 数据迁移方案</h3><ol><li>使用<code>mysqldump</code>进行数据迁移，逻辑备份，<del>此方案在数据量小时比较实用</del>。实战效果在千万级别数据下，<code>mysqldump</code>有非常好的性能。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysqldump <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> xxx tk_xx tk_xx2 tk_xx3 <span class="token operator">></span> /home/tk_node.sql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用<code>datadir</code>进行数据迁移。需停机，有风险。</li><li>使用<code>navicat</code>等工具进行数据迁移。同样为逻辑备份恢复。</li><li>使用<code>xtrabackup</code>进行数据迁移，物理备份恢复，速度快，不需要停机，不锁表，不影响正常业务，热更新，可增量备份，适用于大数据量迁移备份。</li></ol><p>所以，<del>在生产环境少量数据时推荐使用<code>mysqldump</code></del>，<code>mysqldump</code>比较推荐，<del>大数据量时使用<code>xtrabackup</code></del>,优选<code>mysqldump</code>次选<code>xtrabackup</code>。</p><h3 id="2-xtrabackup安装"><a href="#2-xtrabackup安装" class="headerlink" title="2. xtrabackup安装"></a>2. xtrabackup安装</h3><p>注意<code>xtrabackup</code>的版本。<code>xtrabackup</code>不同版本对应不同<code>MySQL</code>版本。在官方文档查找合适的版本。下文的版本为<code>xtrabackup8</code>对应<code>MySQL8</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> https://repo.percona.com/yum/percona-release-latest.noarch.rpmpercona-release enable-only tools releaseyum <span class="token function">install</span> percona-xtrabackup-80<span class="token comment"># 压缩备份工具</span>yum <span class="token function">install</span> qpress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-xtrabackup所需要的权限"><a href="#3-xtrabackup所需要的权限" class="headerlink" title="3. xtrabackup所需要的权限"></a>3. xtrabackup所需要的权限</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">USER</span> <span class="token string">'bkpuser'</span><span class="token variable">@'localhost'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'xxx'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> BACKUP_ADMIN<span class="token punctuation">,</span> PROCESS<span class="token punctuation">,</span> RELOAD<span class="token punctuation">,</span> <span class="token keyword">LOCK</span> <span class="token keyword">TABLES</span><span class="token punctuation">,</span> <span class="token keyword">REPLICATION</span> CLIENT <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'bkpuser'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span><span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span> <span class="token keyword">ON</span> performance_schema<span class="token punctuation">.</span>log_status <span class="token keyword">TO</span> <span class="token string">'bkpuser'</span><span class="token variable">@'localhost'</span><span class="token punctuation">;</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-xtrabackup全量备份"><a href="#4-xtrabackup全量备份" class="headerlink" title="4. xtrabackup全量备份"></a>4. xtrabackup全量备份</h3><p>压缩备份：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># defaults-file:mysql配置文件， compress-threads：线程数</span>xtrabackup --defaults-file<span class="token operator">=</span>/etc/my.cnf <span class="token parameter variable">--host</span><span class="token operator">=</span>localhost <span class="token parameter variable">--user</span><span class="token operator">=</span>bkpuser <span class="token parameter variable">--password</span><span class="token operator">=</span>xxx <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">3306</span> <span class="token parameter variable">--backup</span> <span class="token parameter variable">--compress</span> --compress-threads<span class="token operator">=</span><span class="token number">10</span> --target-dir<span class="token operator">=</span>/home/compressed/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="5-可能出现的报错"><a href="#5-可能出现的报错" class="headerlink" title="5. 可能出现的报错"></a>5. 可能出现的报错</h3><pre class="line-numbers language-none"><code class="language-none">问题1：Please upgrade PXB, if a new version is available. To continue with risk, use the option --no-server-version-check.解决：添加参数 --no-server-version-checkxtrabackup --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --host&#x3D;localhost --user&#x3D;bkpuser --password&#x3D;xxx --port&#x3D;3306 --backup --compress --compress-threads&#x3D;10 --target-dir&#x3D;&#x2F;home&#x2F;compressed&#x2F; --no-server-version-check<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">问题2：Error: failed to execute query &#39;SELECT lower(STATUS_KEY), STATUS_VALUE FROM performance_schema.keyring_component_status&#39;: 1142 (42000) SELECT command denied to user &#39;bkpuserxz&#39;@&#39;localhost&#39; for table &#39;keyring_component_status&#39;解决：添加权限GRANT SELECT ON performance_schema.keyring_component_status TO bkpuserxz@&#39;localhost&#39;;FLUSH PRIVILEGES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-xtrabackup还原"><a href="#6-xtrabackup还原" class="headerlink" title="6. xtrabackup还原"></a>6. xtrabackup还原</h3><ol><li>把全量备份文件上传到目标服务器，进行备份恢复。</li><li>目标MySQL服务停止<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>解压备份文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtrabackup <span class="token parameter variable">--decompress</span> --target-dir<span class="token operator">=</span>/home/compressed/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>备份还原<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtrabackup --copy-back --target-dir<span class="token operator">=</span>/home/compressed/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>还原过程中出现错误<code>/var/lib/mysql is not empty!</code>，可删除<code>/var/lib/mysql</code>下所有文件。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token parameter variable">-rf</span> /var/lib/mysql/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>赋于权限<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /var/lib/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动MySQL服务<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动不成功<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">若启动不成功，查看 /var/log/mysql.log文件具体查看启动不成功原因。若文件损坏，innodb损坏等问题。需使用innodb_force_recovery<span class="token operator">=</span><span class="token number">1</span>进行详细纠错，可见本网MySQL阻塞，修复损坏的innodb一文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>检查恢复是否正常</li></ol><h3 id="7-xtrabackup增量备份"><a href="#7-xtrabackup增量备份" class="headerlink" title="7. xtrabackup增量备份"></a>7. xtrabackup增量备份</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">xtrabackup <span class="token parameter variable">--backup</span> --target-dir <span class="token operator">=</span> /data/backups/basextrabackup <span class="token parameter variable">--backup</span> --target-dir <span class="token operator">=</span> /data/backups/inc1 --incremental-basedir <span class="token operator">=</span> /data/backups/basextrabackup <span class="token parameter variable">--backup</span> --target-dir <span class="token operator">=</span> /data/backups/inc2 --incremental-basedir <span class="token operator">=</span> /data/backups/inc1xtrabackup <span class="token parameter variable">--prepare</span> --apply-log-only --target-dir<span class="token operator">=</span>/data/backups/basextrabackup <span class="token parameter variable">--prepare</span> --apply-log-only --target-dir<span class="token operator">=</span>/data/backups/base --incremental-dir<span class="token operator">=</span>/data/backups/inc1xtrabackup <span class="token parameter variable">--prepare</span> --target-dir<span class="token operator">=</span>/data/backups/base --incremental-dir<span class="token operator">=</span>/data/backups/inc2xtrabackup <span class="token parameter variable">--prepare</span> --apply-log-only --target-dir <span class="token operator">=</span> /data/backups/base -incremental-dir <span class="token operator">=</span> /data/backups/inc1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多xtrabackup功能详见<a href="https://www.percona.com/doc/percona-xtrabackup/8.0/index.html">xtrabackup官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
          <category> xtrabackup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> xtrabackup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 ssh免密登录及失效问题</title>
      <link href="/2020/09/30/linux-ssh/"/>
      <url>/2020/09/30/linux-ssh/</url>
      
        <content type="html"><![CDATA[<p>分享ssh免密登录及失效问题</p><span id="more"></span><h2 id="1-ssh免密登录"><a href="#1-ssh免密登录" class="headerlink" title="1. ssh免密登录"></a>1. ssh免密登录</h2><p>通过配置本机公钥到目标服务器认证文件方式实现免密登录，常用于免密登录服务器，免密git等。</p><p>如:A服务器登录到B服务器，A生成公私钥，将A的公钥配置到B认证文件中，实现了A免密登录到B服务器。</p><h3 id="1-配置ssh免密登录"><a href="#1-配置ssh免密登录" class="headerlink" title="1. 配置ssh免密登录"></a>1. 配置ssh免密登录</h3><ol><li><p>生成秘钥</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>免密设置<br>将在用户目录下<code>.ssh</code>中生成<code>id_rsa</code>,<code>id_rsa.pub</code>公私钥，将<code>id_rsa.pub</code>公钥设置在目标服务器用户目录<code>.ssh</code>中认证文件<code>authorized_keys</code>尾部（可设置多个）。这样就实现了服务器间免密登录。</p></li></ol><h2 id="2-免密失效"><a href="#2-免密失效" class="headerlink" title="2. 免密失效"></a>2. 免密失效</h2><h3 id="1-修改密码IP"><a href="#1-修改密码IP" class="headerlink" title="1. 修改密码IP"></a>1. 修改密码IP</h3><p>因修改密码或IP等导致免密失效可删除<code>known_hosts</code>中对应<code>IP</code>信息。</p><h3 id="2-权限问题"><a href="#2-权限问题" class="headerlink" title="2. 权限问题"></a>2. 权限问题</h3><p>用户目录，<code>.ssh</code>目录，<code>authorized_keys</code>文件等文件权限会引起认证失效，可重新设置权限为<code>700</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">700</span> authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-ssh配置文件"><a href="#3-ssh配置文件" class="headerlink" title="3. ssh配置文件"></a>3. ssh配置文件</h3><p>在<code>/etc/ssh/sshd_config</code>中检查<code>StrictModes</code>,<code>AuthorizedKeysFile</code>等配置是否正确。</p><h3 id="4-防火墙等问题"><a href="#4-防火墙等问题" class="headerlink" title="4. 防火墙等问题"></a>4. 防火墙等问题</h3><p>检查是否端口禁止访问等导致免密失效。</p><h3 id="5-ssh重启"><a href="#5-ssh重启" class="headerlink" title="5. ssh重启"></a>5. ssh重启</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> sshd restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab的安装使用及迁移</title>
      <link href="/2020/09/21/git-gitlab-init/"/>
      <url>/2020/09/21/git-gitlab-init/</url>
      
        <content type="html"><![CDATA[<p>记录一次GitLab的迁移过程。</p><span id="more"></span><p>由于原有的GitLab部署在内网环境中，对于出差的同事只能通过路由器映射端口才能使用GitLab，如此背景下进行GitLab从内网迁移到云。系统环境为Ubuntu迁移到CentOS下。在安装迁移过程中遇到很多问题，本文将以事件过程分享。</p><h3 id="1-安装文档"><a href="#1-安装文档" class="headerlink" title="1.安装文档"></a>1.安装文档</h3><p>查看<a href="https://about.gitlab.com/install/#centos-7">GitLab官方安装文档</a>，得到如下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> policycoreutils-python openssh-server<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> sshd<span class="token function">sudo</span> systemctl start sshd<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>http<span class="token function">sudo</span> firewall-cmd <span class="token parameter variable">--permanent</span> --add-service<span class="token operator">=</span>https<span class="token function">sudo</span> systemctl reload firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> postfix<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> postfix<span class="token function">sudo</span> systemctl start postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token assign-left variable">EXTERNAL_URL</span><span class="token operator">=</span><span class="token string">"https://gitlab.example.com"</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ee<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-社区版安装"><a href="#2-社区版安装" class="headerlink" title="2.社区版安装"></a>2.社区版安装</h3><p>尝试修改为社区版脚本安装，结果为可使用，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token assign-left variable">EXTERNAL_URL</span><span class="token operator">=</span><span class="token string">"https://gitlab.example.com"</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>目录:</p><pre class="line-numbers language-none"><code class="language-none">主目录：&#x2F;opt&#x2F;gitlab配置文件地址：&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb各个组件地址：&#x2F;var&#x2F;opt&#x2F;gitlab日志地址：&#x2F;var&#x2F;log&#x2F;gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>常用命令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动状态</span>gitlab-ctl status<span class="token comment">#重新加载配置</span><span class="token function">sudo</span> gitlab-ctl reconfigure<span class="token comment">#重新启动</span>gitlab-ctl restart<span class="token comment">#启动</span>gitlab-ctl start<span class="token comment">#停止</span>gitlab-ctl stop<span class="token comment">#停止某个组件</span>gitlab-ctl stop unicorn<span class="token comment">#各组件日志查看</span>gitlab-ctl <span class="token function">tail</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-备份被迁移的GitLab"><a href="#3-备份被迁移的GitLab" class="headerlink" title="3.备份被迁移的GitLab"></a>3.备份被迁移的GitLab</h3><p>备份原来的GitLab:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-rake gitlab:backup:create<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将备份文件(几十个G，有点大)上传到目标服务器上:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> 1599804179_2020_09_11_12.6.2_gitlab_backup.tar root@xxx:/var/opt/gitlab/backups/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-恢复备份"><a href="#4-恢复备份" class="headerlink" title="4.恢复备份"></a>4.恢复备份</h3><p>在目标服务恢复备份：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl stop unicorngitlab-ctl stop sidekiq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> 1599804179_2020_09_11_12.6.2_gitlab_backup.targitlab-rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1599804179_2020_09_11_12.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在恢复过程中报错，版本不兼容。</p><h3 id="5-版本兼容问题"><a href="#5-版本兼容问题" class="headerlink" title="5.版本兼容问题"></a>5.版本兼容问题</h3><p>查看原来GitLab版本为12.6.2，新安装版本为13.3.5，尝试升级原有GitLab:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gitlab-ce<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gitlab-ce<span class="token operator">=</span><span class="token number">13.3</span>.5-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现GitLab不能跨版本升级，升级到了12.9.2，考虑到升级需要时间，备份文件过大传输过慢，决定将新安装的13.3.5版本GitLab降版本到12.6.2</p><h3 id="6-卸载重装"><a href="#6-卸载重装" class="headerlink" title="6.卸载重装"></a>6.卸载重装</h3><p>卸载并删除GitLab:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ee<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">find &#x2F; -name gitlab | xargs rm -rf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试直接修改脚本安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce-12.6.2/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce.12.6.2/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>未能成功。查看连接是否正确。浏览器中打开显示<code>The page you were looking for doesn&#39;t exist</code>，<code>wget</code>显示<code>404</code>。官网中寻找到<a href="https://packages.gitlab.com/gitlab/gitlab-ce/">下载地址</a>（直接改地址，官网查找，找了好久没找到，最后在搜索引擎中找到了地址），搜索<code>12.6.2</code>查找包，根据系统版本选择版本，这里选择<code>el/7</code>:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-ce-12.6.2-ce.0.el7.x8，6_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装成功后，启动服务。浏览器中访问为502。查看各组件启动情况，并配置修改。</p><h3 id="7-配置"><a href="#7-配置" class="headerlink" title="7.配置"></a>7.配置</h3><p>挨个查询各个组件运行情况并解决（比较庞大，繁琐。只能遇到什么问题解决什么问题），修改配置后需要重新加载配置并启动</p><p>各组件进程不能通过kill杀掉，gitlab-ctl守护进程会启动子进程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure<span class="token function">sudo</span> gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以下为本次迁移遇到的问题以及解决方案：</p><ol><li><code>gitlab-ctl reconfigure</code>出现<code>No such file or directory</code>错误</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/gitlab/embedded/bin/gitlab-logrotate-wrapper: No such <span class="token function">file</span> or directory/opt/gitlab/embedded/service/gitlab-rails/bin/sidekiq-cluster: No such <span class="token function">file</span> or directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以从其他机器拷贝一份，也可以通过来回修改<code>unicorn</code>端口号自动生成文件</p><ol start="2"><li>nginx端口号冲突导致启动异常</li></ol><p>本台服务器通过<code>nginx</code>代理很多其他服务。决定禁用<code>GitLab</code>自带<code>nginx</code>使用原有<code>nginx</code>。修改<code>GitLab</code>配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">external_url <span class="token string">'xxx'</span>gitlab_workhorse<span class="token punctuation">[</span><span class="token string">'listen_network'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"tcp"</span>gitlab_workhorse<span class="token punctuation">[</span><span class="token string">'listen_addr'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1:18181"</span>nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改原有<code>nginx</code>代理到该服务。启动后出现异常，手动关闭<code>GitLab</code>中<code>nginx</code>服务恢复正常。猜测与<code>external_url</code>有关系。可尝试注释掉<code>external_url</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl stop nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时可能没有写日志权限，要赋予权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> o+x /var/opt/gitlab/gitlab-rails<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>unicorn端口号冲突导致启动异常</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">unicorn<span class="token punctuation">[</span><span class="token string">'port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18080</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>prometheus端口冲突导致启动异常</li></ol><p>直接修改了原来的prometheus端口</p><ol start="5"><li>unicorn写日志权限不足</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token parameter variable">-R</span> <span class="token number">777</span> /var/log/gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>其他类似问题</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"address"</span><span class="token builtin class-name">:</span><span class="token string">"/var/opt/gitlab/redis/redis.socket"</span>,<span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"info"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"redis: dialing"</span>,<span class="token string">"network"</span><span class="token builtin class-name">:</span><span class="token string">"unix"</span>,<span class="token string">"time"</span><span class="token builtin class-name">:</span><span class="token string">"2020-09-11T18:01:41+08:00"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"error"</span><span class="token builtin class-name">:</span><span class="token string">"keywatcher: dial unix /var/opt/gitlab/redis/redis.socket: connect: connection refused"</span>,<span class="token string">"level"</span><span class="token builtin class-name">:</span><span class="token string">"error"</span>,<span class="token string">"msg"</span><span class="token builtin class-name">:</span><span class="token string">"unknown error"</span>,<span class="token string">"time"</span><span class="token builtin class-name">:</span><span class="token string">"2020-09-11T18:01:41+08:00"</span><span class="token punctuation">&#125;</span>ind<span class="token punctuation">(</span><span class="token punctuation">)</span> to <span class="token number">0.0</span>.0.0:80 failed <span class="token punctuation">(</span><span class="token number">98</span>: Address already <span class="token keyword">in</span> use<span class="token punctuation">)</span>The data directory was initialized by PostgreSQL version <span class="token number">11</span>, <span class="token function">which</span> is not compatible with this version <span class="token number">10.9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过各种问题的解决终于服务正常，并在浏览器中可以访问到。</p><h3 id="8-再次恢复"><a href="#8-再次恢复" class="headerlink" title="8.再次恢复"></a>8.再次恢复</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> 1599804179_2020_09_11_12.6.2_gitlab_backup.targitlab-rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1599804179_2020_09_11_12.6.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>过程中有一个项目恢复失败</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sxf <span class="token punctuation">..</span>. <span class="token punctuation">[</span>DONE<span class="token punctuation">]</span>        * tangKu8/misapp <span class="token punctuation">..</span>. Error: <span class="token number">13</span>:CreateRepositoryFromBundle: cmd <span class="token function">wait</span> failed: <span class="token builtin class-name">exit</span> status <span class="token number">128</span>        <span class="token punctuation">[</span>Failed<span class="token punctuation">]</span> restoring tangKu8/misapp repositoryWarning: Your gitlab.rb and gitlab-secrets.json files contain sensitive dataand are not included <span class="token keyword">in</span> this backup. You will need to restore these files manually.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-邮件配置"><a href="#9-邮件配置" class="headerlink" title="9.邮件配置"></a>9.邮件配置</h3><h3 id="10-验证"><a href="#10-验证" class="headerlink" title="10.验证"></a>10.验证</h3><p>验证各个用户和项目迁移是否成功。</p>]]></content>
      
      
      <categories>
          
          <category> GitLab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShowDoc的导入与安装</title>
      <link href="/2020/09/09/doc-showdoc-init/"/>
      <url>/2020/09/09/doc-showdoc-init/</url>
      
        <content type="html"><![CDATA[<p>本文分享了ShowDoc安装，使用及导入。</p><span id="more"></span><p>分享一款好用的在线文档分享工具。一直在寻找一款好用的接口文档工具，曾经尝试过<code>Swagger</code>，<code>YApi</code>，<code>gitLab wiki</code>都差强人意。发现<code>ShowDoc</code>后十分惊喜，并且它可以私有化部署。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ShowDoc是一个非常适合IT团队的在线文档分享工具，可以访问<a href="https://github.com/star7th/showdoc">github</a>详细了解。同时可以参考<a href="https://www.showdoc.cc/help">帮助文档</a>进行私有化部署。下文主要为私有化部署过程，导入的分享。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>官方提供了自动脚本部署，Docker部署，PHP部署，二次开发等方法进行私有化部署，强烈推荐使用自动脚本部署，<a href="https://www.showdoc.com.cn/script/showdoc">详细脚本内容</a>下载查看</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#下载脚本并赋予权限</span> <span class="token function">wget</span> https://www.showdoc.com.cn/script/showdoc<span class="token punctuation">;</span> <span class="token function">chmod</span> +x showdoc<span class="token punctuation">;</span><span class="token comment">#默认安装中文版。如果想安装英文版，请加上en参数，如 ./showdoc en</span>./showdoc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="md导入"><a href="#md导入" class="headerlink" title="md导入"></a>md导入</h3><p>安装完成后登录到web可以看到简洁的文档操作界面。然而碰到一个问题，原有的文档在gitLab wiki中，查找到官方没有提供导入<code>.md</code>的功能，但是提供了<a href="https://www.showdoc.com.cn/page/102098">开放API接口</a>，可以利用此接口导入。</p><p>以下为通过python读取文件下的<code>.md</code>文件，并通过开放API接口导入到<code>ShowDoc</code>中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> json<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> fileinput<span class="token keyword">import</span> operator<span class="token comment"># 需要导入的文件夹地址</span>wiki_dir <span class="token operator">=</span> <span class="token string">'/Users/xx/work/doc'</span><span class="token comment"># showdoc开放API参数</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'api_key'</span> <span class="token punctuation">:</span> <span class="token string">'xx'</span><span class="token punctuation">,</span>     <span class="token string">'api_token'</span> <span class="token punctuation">:</span> <span class="token string">'xx'</span><span class="token punctuation">,</span>    <span class="token string">'cat_name'</span> <span class="token punctuation">:</span> <span class="token string">'API'</span><span class="token punctuation">,</span>    <span class="token string">'page_title'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>    <span class="token string">'page_content'</span> <span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span><span class="token comment"># showdoc开放API地址</span>url <span class="token operator">=</span> <span class="token string">'http://xxx.com/server/index.php?s=/api/item/updateByApi'</span><span class="token keyword">def</span> <span class="token function">get_filelist</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取文件夹中所有文件，去除mac下.DS_Store文件。并排序文件</span>    <span class="token keyword">for</span> home<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> <span class="token builtin">dir</span> <span class="token keyword">in</span> dirs<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dir</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'.DS_Store'</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>            files<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'.DS_Store'</span><span class="token punctuation">)</span>        files<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> filename <span class="token keyword">in</span> files<span class="token punctuation">:</span>            fullname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>home<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>            get_file<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>fullname<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span>fullname<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 读取文件，拼接showdoc参数</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>fullname<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file_obj<span class="token punctuation">:</span>            lines <span class="token operator">=</span> file_obj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'page_title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> filename<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.md'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'page_content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> lines        do_post<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> UnicodeDecodeError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>fullname<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">do_post</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 请求showdoc开放API</span>    data <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    opener <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span>    json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>opener<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    get_filelist<span class="token punctuation">(</span>wiki_dir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据库字典导入"><a href="#数据库字典导入" class="headerlink" title="数据库字典导入"></a>数据库字典导入</h3><p>官方提供了数据库字典的导入方法。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://www.showdoc.cc/script/showdoc_db.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> showdoc_db.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要修改脚本内容后执行<code>showdoc_db.sh</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">"xxx"</span><span class="token comment">#数据库所在地址。默认是localhost</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3306</span><span class="token comment">#数据库所在端口。默认是3306</span><span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">"xxx"</span>    <span class="token comment">#数据库的用户名</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token comment">#密码</span><span class="token assign-left variable">db</span><span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token comment">#要同步的数据库名。要同步多个db可以将本脚本复制多份</span><span class="token assign-left variable">api_key</span><span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token comment">#api_key</span><span class="token assign-left variable">api_token</span><span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token comment">#api_token</span><span class="token assign-left variable">cat_name</span><span class="token operator">=</span><span class="token string">"xxx"</span> <span class="token comment">#可选。如果想把生成的文档都放在项目的子目录下，则这里填写子目录名。</span><span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"http://xxx.com/server/index.php?s=/api/open/updateDbItem"</span> <span class="token comment">#可选。同步到的url。如果是使用www.showdoc.com.cn ，则不需要再改此项。如果是部署私有版版showdoc，请改此项为http://xx.com/server/index.php?s=/api/open/updateDbItem 。其中xx.com为你的部署域名</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MYSQL_PWD</span><span class="token operator">=</span><span class="token variable">$&#123;password&#125;</span><span class="token assign-left variable">COMMAND</span><span class="token operator">=</span><span class="token string">"set names utf8;select TABLE_NAME ,TABLE_COMMENT from tables where TABLE_SCHEMA ='<span class="token variable">$&#123;db&#125;</span>'  "</span><span class="token builtin class-name">declare</span> <span class="token assign-left variable">table_info</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mysql -h$<span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span> -P$<span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span> -u$<span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span>  --show-warnings<span class="token operator">=</span>false <span class="token parameter variable">-D</span> information_schema <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;COMMAND&#125;</span>"</span> <span class="token variable">`</span></span><span class="token comment">#echo $table_info</span><span class="token assign-left variable">COMMAND</span><span class="token operator">=</span><span class="token string">"set names utf8;select TABLE_NAME ,COLUMN_NAME, COLUMN_DEFAULT ,IS_NULLABLE ,COLUMN_TYPE ,COLUMN_COMMENT from COLUMNS where TABLE_SCHEMA ='<span class="token variable">$&#123;db&#125;</span>'  "</span><span class="token builtin class-name">declare</span> <span class="token assign-left variable">table_detail</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>mysql -h$<span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span> -P$<span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span> -u$<span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span>  --show-warnings<span class="token operator">=</span>false <span class="token parameter variable">-D</span> information_schema <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">$&#123;COMMAND&#125;</span>"</span> <span class="token variable">`</span></span><span class="token comment">#echo $table_detail</span><span class="token assign-left variable">table_info2</span><span class="token operator">=</span><span class="token variable">$&#123;table_info<span class="token operator">/</span><span class="token operator">/</span>&amp;<span class="token operator">/</span>_this_and_change_&#125;</span><span class="token assign-left variable">table_detail2</span><span class="token operator">=</span><span class="token variable">$&#123;table_detail<span class="token operator">/</span><span class="token operator">/</span>&amp;<span class="token operator">/</span>_this_and_change_&#125;</span><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/x-www-form-urlencoded; charset=UTF-8'</span>  <span class="token string">"<span class="token variable">$&#123;url&#125;</span>"</span> --data-binary @- <span class="token operator">&lt;&lt;</span><span class="token string">CURL_DATAfrom=shell&amp;table_info=<span class="token variable">$&#123;table_info2&#125;</span>&amp;table_detail=<span class="token variable">$&#123;table_detail2&#125;</span>&amp;api_key=<span class="token variable">$&#123;api_key&#125;</span>&amp;api_token=<span class="token variable">$&#123;api_token&#125;</span>&amp;cat_name=<span class="token variable">$&#123;cat_name&#125;</span>CURL_DATA</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MYSQL_PWD</span><span class="token operator">=</span><span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ShowDoc </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShowDoc </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Spring Boot Actuator制作炫酷可视化系统监控</title>
      <link href="/2020/08/31/spring-boot-actuator/"/>
      <url>/2020/08/31/spring-boot-actuator/</url>
      
        <content type="html"><![CDATA[<p>分享基于<code>Spring Boot Actuator</code>制作炫酷可视化系统监控，其中使用到了<code>Prometheus</code>，<code>Grafana</code>。</p><span id="more"></span><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><ol><li><p><code>Spring Boot Actuator</code>是一个采集应用内部信息并暴露给外部的模块,它可以帮助我们监控和管理<code>Spring Boot</code>应用。</p></li><li><p><code>Prometheus</code>是由<code>SoundCloud</code>开发的开源监控报警系统和时序列数据库，我们还可以选用其他工具如：<code>AppOptics</code>,<code>Atlas</code>,<code>JMX</code>等，更多支持可查阅<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready">Spring Boot Actuator文档</a>。</p></li><li><p><code>Grafana</code>是一个跨平台的开源的度量分析和可视化工具,可以通过将采集的数据查询然后可视化的展示,并及时通知。</p></li></ol><p>在下文中，我们将利用这三个工具制作炫酷可视化系统监控，查阅文档分别为：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready">Spring Boot Actuator文档</a>，<a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/actuator-api/html/">Spring Boot Actuator数据文档</a>，<a href="https://micrometer.io/docs/registry/prometheus">Prometheus引入文档</a>，<a href="https://prometheus.io/docs/prometheus/latest/getting_started/?__cf_chl_captcha_tk__=b792618af602f67bdd94ccaf08839dd5cfac2068-1603764581-0-AdDJqe86JGdz12O1xVpzo_FLocxdk0a9FkNcW53_n0CKyLnbAOsF8bsTNgbS0bdqrKEc4ie8JowlO6Ds4GvnXmAkuKcMyPSPD51Wg2rZ0oALUFUA5WeNStAd-VOmA3TeIJf7rKVaWaYCKB0TbiOIIxCfo7W2evTCePxIRk4ZqcJaZIr-C9LcDH62LncGb0KMdlcUwnU20a1wVq9qwB3Yc05l_viKqv72qj90eGXdz_5TbR6mo86tREGL9F05Hg15JWp86y8xGURSA-ackFt8Y9nDZjFEDrMQ6qZw-dowGPSypLl5EHT9azR6qFP23VKJrpEAQXh3SXd8UoJTfSSAq-HFXMsINhKUO-g_a5-l1e9neQLGA9URT4pqYaSJSP7fWiLcdmSDwg-imyDp6DpYYQef4N5-u1tIA6jjbAL6wO1Ds61nqX_1zFXzvZ4rejZFS_tZ2EG26-rkvX_ul0KWXXdr4hPczboSJLUTPQfS7y9BknxMTQhFH9HW6Es8sKYwyovscHUYXDqRDM4-ZtaEhWqxS4nNvNKv3T2PEu0g5RVC">Prometheus安装文档</a>，<a href="https://grafana.com/docs/grafana/latest/installation/rpm/">Grafana安装文档</a></p><h2 id="2-Spring-Boot-Actuator"><a href="#2-Spring-Boot-Actuator" class="headerlink" title="2. Spring Boot Actuator"></a>2. Spring Boot Actuator</h2><h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- for maven --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//for gradle</span>dependencies <span class="token punctuation">&#123;</span>    implementation 'org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">:</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>actuator'<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//启用禁止</span>management<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>shutdown<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">true</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>enabled<span class="token operator">-</span>by<span class="token operator">-</span><span class="token keyword">default</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token comment">//暴露接口</span>management<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>info<span class="token punctuation">.</span>enabled<span class="token operator">=</span><span class="token boolean">true</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>jmx<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>include<span class="token operator">=</span>health<span class="token punctuation">,</span>infomanagement<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>include<span class="token operator">=</span><span class="token operator">*</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>exclude<span class="token operator">=</span>env<span class="token punctuation">,</span>beans<span class="token comment">//缓存时间</span>management<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>time<span class="token operator">-</span><span class="token keyword">to</span><span class="token operator">-</span>live<span class="token operator">=</span><span class="token number">10</span>s<span class="token comment">//CORS支持</span>management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>allowed<span class="token operator">-</span>origins<span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>example<span class="token punctuation">.</span>commanagement<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>cors<span class="token punctuation">.</span>allowed<span class="token operator">-</span>methods<span class="token operator">=</span><span class="token constant">GET</span><span class="token punctuation">,</span><span class="token constant">POST</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置数据接口权限</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ActuatorSecurity</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      http<span class="token punctuation">.</span><span class="token function">requestMatcher</span><span class="token punctuation">(</span><span class="token class-name">EndpointRequest</span><span class="token punctuation">.</span><span class="token function">toAnyEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">(</span>requests<span class="token punctuation">)</span> <span class="token operator">-></span>          requests<span class="token punctuation">.</span><span class="token function">anyRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义数据接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ReadOperation</span><span class="token keyword">public</span> <span class="token class-name">CustomData</span> <span class="token function">getCustomData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomData</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-通过HTTP获取数据"><a href="#3-通过HTTP获取数据" class="headerlink" title="3. 通过HTTP获取数据"></a>3. 通过<code>HTTP</code>获取数据</h3><p><code>Spring Boot Actuator</code>会自动配置所有启用的接口并通过<code>HTTP</code>公开。默认使用id前缀为的端点的<code>/Actuator</code>作为URL路径。例如，<code>health</code>暴露为<code>/Actuator/health</code>。他会使用<code>Spring MVC</code>,<code>Jackson</code>。</p><h3 id="4-指标数据内容"><a href="#4-指标数据内容" class="headerlink" title="4. 指标数据内容"></a>4. 指标数据内容</h3><p>从<code>HTTP</code>接口获取到为<code>json</code>格式的数据。具体详细含义可查阅<a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/actuator-api/html/">Spring Boot Actuator数据文档</a>。<br>例如获取<code>health</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">'http://localhost:8080/Actuator/health'</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> GET <span class="token parameter variable">-H</span> <span class="token string">'Accept: application/json'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>  <span class="token property">"components"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"broker"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>      <span class="token property">"components"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"us1"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>          <span class="token property">"details"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token string">"1.0.2"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token property">"us2"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>          <span class="token property">"details"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"version"</span> <span class="token operator">:</span> <span class="token string">"1.0.4"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"db"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>      <span class="token property">"details"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"database"</span> <span class="token operator">:</span> <span class="token string">"H2"</span><span class="token punctuation">,</span>        <span class="token property">"validationQuery"</span> <span class="token operator">:</span> <span class="token string">"isValid()"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token property">"diskSpace"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token property">"status"</span> <span class="token operator">:</span> <span class="token string">"UP"</span><span class="token punctuation">,</span>      <span class="token property">"details"</span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">194687758336</span><span class="token punctuation">,</span>        <span class="token property">"free"</span> <span class="token operator">:</span> <span class="token number">92457164800</span><span class="token punctuation">,</span>        <span class="token property">"threshold"</span> <span class="token operator">:</span> <span class="token number">10485760</span><span class="token punctuation">,</span>        <span class="token property">"exists"</span> <span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Prometheus"><a href="#3-Prometheus" class="headerlink" title="3. Prometheus"></a>3. Prometheus</h2><h3 id="1-引入-1"><a href="#1-引入-1" class="headerlink" title="1. 引入"></a>1. 引入</h3><ol><li><p><code>maven</code>引入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--for maven--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;micrometer.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>暴露数据接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">management<span class="token punctuation">.</span>endpoints<span class="token punctuation">.</span>web<span class="token punctuation">.</span>exposure<span class="token punctuation">.</span>include<span class="token operator">=</span><span class="token operator">*</span>management<span class="token punctuation">.</span>metrics<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>application<span class="token operator">=</span>$<span class="token punctuation">&#123;</span>spring<span class="token punctuation">.</span>application<span class="token punctuation">.</span>name<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="2-配置-1"><a href="#2-配置-1" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>在Spring Boot环境中下自动配置Prometheus接口。否则，可以使用任何基于JVM的HTTP服务器实现来将数据公开给Prometheus。</p><p>在Spring Boot中使用<code>MeterRegistryCustomizer</code>自动注册配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token class-name">MeterRegistryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MeterRegistry</span><span class="token punctuation">></span></span> <span class="token function">metricsCommonTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> registry <span class="token operator">-></span> registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token string">"application"</span><span class="token punctuation">,</span> <span class="token string">"MYAPPNAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他环境可参考下面示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//com.sun.net.httpserver.HttpServer</span><span class="token class-name">PrometheusMeterRegistry</span> prometheusRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrometheusMeterRegistry</span><span class="token punctuation">(</span><span class="token class-name">PrometheusConfig</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServer</span> server <span class="token operator">=</span> <span class="token class-name">HttpServer</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    server<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token string">"/prometheus"</span><span class="token punctuation">,</span> httpExchange <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> response <span class="token operator">=</span> prometheusRegistry<span class="token punctuation">.</span><span class="token function">scrape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        httpExchange<span class="token punctuation">.</span><span class="token function">sendResponseHeaders</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> httpExchange<span class="token punctuation">.</span><span class="token function">getResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            os<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>server<span class="token operator">::</span><span class="token function">start</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更加详细的内容查阅<a href="https://micrometer.io/docs/registry/prometheus">Prometheus引入文档</a></p><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><ol><li><p>下载最新的安装包。并安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/prometheus/prometheus/releases/download/v2.22.0/prometheus-2.22.0.linux-amd64.tar.gz<span class="token function">tar</span> xvfz prometheus-2.22.tar.gz<span class="token builtin class-name">cd</span> prometheus-2.22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件<code>prometheus.yml</code>。<br>注意<code>GitLab</code>或者其他软件也使用到了<code>Prometheus</code>，修改端口号解决问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">global:  scrape_interval:     15s <span class="token comment"># By default, scrape targets every 15 seconds.</span>  <span class="token comment"># Attach these labels to any time series or alerts when communicating with</span>  <span class="token comment"># external systems (federation, remote storage, Alertmanager).</span>  external_labels:    monitor: <span class="token string">'codelab-monitor'</span><span class="token comment"># A scrape configuration containing exactly one endpoint to scrape:</span><span class="token comment"># Here it's Prometheus itself.</span>scrape_configs:  <span class="token comment"># The job name is added as a label `job=&lt;job_name>` to any timeseries scraped from this config.</span>  - job_name: <span class="token string">'prometheus'</span>    <span class="token comment"># Override the global default and scrape targets from this job every 5 seconds.</span>    scrape_interval: 5s    static_configs:      - targets: <span class="token punctuation">[</span><span class="token string">'localhost:9090'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-job_name: <span class="token string">'Prometheus'</span> <span class="token comment">#应用部署机器上的应用名</span>-targets: <span class="token punctuation">[</span><span class="token string">'127.0.0.1:9090'</span><span class="token punctuation">]</span> <span class="token comment">#应用运行机器上的本机端口号本机ip</span>-job_name: <span class="token string">'SpringBoot_Prometheus'</span> <span class="token comment">#SpringBoot的应用名</span>metrics_path: <span class="token string">'/actuator/prometheus'</span> <span class="token comment">#能获取节点信息的路径</span>-targets: <span class="token punctuation">[</span><span class="token string">'192.168.159.1:8080'</span><span class="token punctuation">]</span> <span class="token comment">#SpringBoot应用运行的机器的ip端口号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Start Prometheus.</span><span class="token comment"># By default, Prometheus stores its database in ./data (flag --storage.tsdb.path).</span>./prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>prometheus.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>更加详细的内容查阅<a href="https://prometheus.io/docs/prometheus/latest/getting_started/?__cf_chl_captcha_tk__=b792618af602f67bdd94ccaf08839dd5cfac2068-1603764581-0-AdDJqe86JGdz12O1xVpzo_FLocxdk0a9FkNcW53_n0CKyLnbAOsF8bsTNgbS0bdqrKEc4ie8JowlO6Ds4GvnXmAkuKcMyPSPD51Wg2rZ0oALUFUA5WeNStAd-VOmA3TeIJf7rKVaWaYCKB0TbiOIIxCfo7W2evTCePxIRk4ZqcJaZIr-C9LcDH62LncGb0KMdlcUwnU20a1wVq9qwB3Yc05l_viKqv72qj90eGXdz_5TbR6mo86tREGL9F05Hg15JWp86y8xGURSA-ackFt8Y9nDZjFEDrMQ6qZw-dowGPSypLl5EHT9azR6qFP23VKJrpEAQXh3SXd8UoJTfSSAq-HFXMsINhKUO-g_a5-l1e9neQLGA9URT4pqYaSJSP7fWiLcdmSDwg-imyDp6DpYYQef4N5-u1tIA6jjbAL6wO1Ds61nqX_1zFXzvZ4rejZFS_tZ2EG26-rkvX_ul0KWXXdr4hPczboSJLUTPQfS7y9BknxMTQhFH9HW6Es8sKYwyovscHUYXDqRDM4-ZtaEhWqxS4nNvNKv3T2PEu0g5RVC">Prometheus安装文档</a></p><h2 id="4-Grafana"><a href="#4-Grafana" class="headerlink" title="4. Grafana"></a>4. Grafana</h2><h3 id="1-添加源-etc-yum-repos-d-grafana-repo"><a href="#1-添加源-etc-yum-repos-d-grafana-repo" class="headerlink" title="1. 添加源/etc/yum.repos.d/grafana.repo"></a>1. 添加源<code>/etc/yum.repos.d/grafana.repo</code></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>grafana<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>grafana<span class="token assign-left variable">baseurl</span><span class="token operator">=</span>https://packages.grafana.com/oss/rpm<span class="token assign-left variable">repo_gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>https://packages.grafana.com/gpg.key<span class="token assign-left variable">sslverify</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sslcacert</span><span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> grafana<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多版本和安装方法查阅<a href="https://grafana.com/docs/grafana/latest/installation/rpm/">Grafana安装文档</a></p><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3. 启动"></a>3. 启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl start grafana-server<span class="token function">sudo</span> systemctl status grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-自启动"><a href="#4-自启动" class="headerlink" title="4. 自启动"></a>4. 自启动</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> grafana-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-登录"><a href="#5-登录" class="headerlink" title="5. 登录"></a>5. 登录</h3><p>访问<code>http//xxx:3000/</code>，输入用户名<code>admin</code>和密码登录，第一次成功会提示更改密码。<code>3000</code>为<code>Grafana</code>的默认监听端口。</p><h3 id="6-绘制监控图"><a href="#6-绘制监控图" class="headerlink" title="6. 绘制监控图"></a>6. 绘制监控图</h3><p>可以在<code>Grafana</code>上设置数据源，自定义模板，导入模板等。这样就可以制作炫酷可视化系统监控了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Grafana </tag>
            
            <tag> Actuator </tag>
            
            <tag> Prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>忽略eslint检查</title>
      <link href="/2020/06/02/js-reactjs-eslint/"/>
      <url>/2020/06/02/js-reactjs-eslint/</url>
      
        <content type="html"><![CDATA[<p>本文分享了忽略eslint检查提交代码。</p><span id="more"></span><p>前端同学反映代码提交不上去，查看后是<code>eslint</code>阻止了提交，而整个项目规范化需要大量人力只能跳过<code>eslint</code>检查。如下几种方法：</p><ol><li>设置<code>eslint</code>忽略文件提交</li><li><code>git commit --no-verify -m commigmessage</code></li><li>删除预提交文件。<code>.git/pre-commit</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> ReactJS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere-JDBC进行数据分片</title>
      <link href="/2020/05/28/mysql-sharding/"/>
      <url>/2020/05/28/mysql-sharding/</url>
      
        <content type="html"><![CDATA[<p>分享在实战中分表分库的策略。</p><span id="more"></span><h2 id="1-数据量评估与策略"><a href="#1-数据量评估与策略" class="headerlink" title="1. 数据量评估与策略"></a>1. 数据量评估与策略</h2><p>数据量评估和并发评估是项目的至关重要的环节，数据量的多少决定项目的架构，技术的选取。</p><p>很多同学往往会进入误区，认为某个技术就是比另一个技术好，微服务就是比单系统好。而事实上技术最终都可归结为资源问题，技术大多数是业务演变而形成。</p><p>选取合适的技术非常重要，盲目的追求技术将会加大人力，财力等资源消耗。</p><p>应对不同的数据量并发性简单分享下关于数据库几种应对策略：</p><ol><li>读写分离</li><li>垂直分库，垂直分表</li><li>水平分库，水平分表</li><li>其他方式：跑批数据转移等策略</li></ol><h2 id="2-ShardingSphere-JDBC"><a href="#2-ShardingSphere-JDBC" class="headerlink" title="2. ShardingSphere-JDBC"></a>2. ShardingSphere-JDBC</h2><p>简单分享使用<code>ShardingSphere-JDBC</code>做数据分片，<code>ShardingSphere-JDBC</code>是<code>Apache ShardingSphere</code>中的一个模块，更加详细的内容请参阅(Apache ShardingSphere文档)[<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/en/overview/],以下为在`Spring">https://shardingsphere.apache.org/document/legacy/4.x/document/en/overview/],以下为在`Spring</a> Boot`中使用：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>&#123;last.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>database<span class="token operator">=</span>mysqlspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>xxxspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>username<span class="token operator">=</span>usernamespring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>password<span class="token operator">=</span>passwordspring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>driver<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>name<span class="token operator">=</span>masterspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>master<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>zaxxer<span class="token punctuation">.</span>hikari<span class="token punctuation">.</span></span>HikariDataSource</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>master<span class="token punctuation">.</span>drive<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">-</span>name<span class="token operator">=</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>master<span class="token punctuation">.</span>jdbc<span class="token operator">-</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>xxx<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>xxxspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>master<span class="token punctuation">.</span>username<span class="token operator">=</span>usernamespring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>master<span class="token punctuation">.</span>password<span class="token operator">=</span>passwordspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token operator">-</span>data<span class="token operator">-</span>source<span class="token operator">-</span>name<span class="token operator">=</span>masterspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_user<span class="token punctuation">.</span>actual<span class="token operator">-</span>data<span class="token operator">-</span>nodes<span class="token operator">=</span>master<span class="token punctuation">.</span>vip_user$<span class="token punctuation">&#123;</span><span class="token number">0.</span><span class="token number">.19</span><span class="token punctuation">&#125;</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_user<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>sharding<span class="token operator">-</span>column<span class="token operator">=</span>idspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_user<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>algorithm<span class="token operator">-</span>expression<span class="token operator">=</span>vip_user$<span class="token punctuation">&#123;</span>id <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_user<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>column<span class="token operator">=</span>idspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_user<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token constant">SNOWFLAKE</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_addr<span class="token punctuation">.</span>actual<span class="token operator">-</span>data<span class="token operator">-</span>nodes<span class="token operator">=</span>master<span class="token punctuation">.</span>vip_addr$<span class="token punctuation">&#123;</span><span class="token number">0.</span><span class="token number">.19</span><span class="token punctuation">&#125;</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_addr<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>algorithm<span class="token operator">-</span>expression<span class="token operator">=</span>vip_addr$<span class="token punctuation">&#123;</span>id <span class="token operator">%</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_addr<span class="token punctuation">.</span>table<span class="token operator">-</span>strategy<span class="token punctuation">.</span>inline<span class="token punctuation">.</span>sharding<span class="token operator">-</span>column<span class="token operator">=</span>idspring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_addr<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token constant">SNOWFLAKE</span>spring<span class="token punctuation">.</span>shardingsphere<span class="token punctuation">.</span>sharding<span class="token punctuation">.</span>tables<span class="token punctuation">.</span>vip_addr<span class="token punctuation">.</span>key<span class="token operator">-</span>generator<span class="token punctuation">.</span>column<span class="token operator">=</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span><span class="token string">"vip_addr"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Entity</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Addr</span>  <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span>  <span class="token number">2200950815215875003L</span><span class="token punctuation">;</span>    <span class="token comment">/**     * id     */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Id</span>    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>shape <span class="token operator">=</span> <span class="token class-name">JsonFormat<span class="token punctuation">.</span>Shape</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     *      */</span>    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_map_id"</span><span class="token punctuation">,</span> updatable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userMapId<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据库中创建<code>vip_user0</code>,<code>vip_user1</code>…<code>vip_user19</code>20个表。这样就将数据水平分割到20个表中。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> MySQL </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat9安装使用</title>
      <link href="/2020/05/22/tomcat-init/"/>
      <url>/2020/05/22/tomcat-init/</url>
      
        <content type="html"><![CDATA[<p>记录分享Tomcat9安装使用过程</p><span id="more"></span><h3 id="1-java环境安装"><a href="#1-java环境安装" class="headerlink" title="1. java环境安装"></a>1. java环境安装</h3><p>使用<code>openjdk</code>,注意<code>openjdk</code>与<code>jdk</code>是有区别的。如使用到<code>sun.misc.BASE64Decoder</code>等<code>jdk</code>中有而<code>openjdk</code>中没有的则不能使用<code>openjdk</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search <span class="token function">java</span>yum <span class="token function">install</span> java-1.8.0-openjdk.x86_64<span class="token function">java</span> <span class="token parameter variable">-version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-tomcat使用"><a href="#2-tomcat使用" class="headerlink" title="2. tomcat使用"></a>2. tomcat使用</h3><h4 id="1-下载解压"><a href="#1-下载解压" class="headerlink" title="1. 下载解压"></a>1. 下载解压</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://mirror.bit.edu.cn/apache/tomcat/tomcat-9/v9.0.38/bin/apache-tomcat-9.0.38.tar.gz<span class="token function">tar</span> zxvf apache-tomcat-9.0.38.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h4><p>配置文件在conf下，列举俩个常用的配置，其他配置如<code>web.xml</code>,<code>logging.properties</code>,<code>catalina.properties</code>详见配置文件中内容。</p><ol><li>修改端口，修改server.xml</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"80"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span>               <span class="token assign-left variable">connectionTimeout</span><span class="token operator">=</span><span class="token string">"20000"</span>               <span class="token assign-left variable">redirectPort</span><span class="token operator">=</span><span class="token string">"8443"</span> /<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>https配置，修改server.xml</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Connector <span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token string">"443"</span> <span class="token assign-left variable">protocol</span><span class="token operator">=</span><span class="token string">"HTTP/1.1"</span><span class="token assign-left variable">maxThreads</span><span class="token operator">=</span><span class="token string">"150"</span> <span class="token assign-left variable">SSLEnabled</span><span class="token operator">=</span><span class="token string">"true"</span> <span class="token assign-left variable">scheme</span><span class="token operator">=</span><span class="token string">"https"</span> <span class="token assign-left variable">secure</span><span class="token operator">=</span><span class="token string">"true"</span><span class="token assign-left variable">keystoreFile</span><span class="token operator">=</span><span class="token string">"/home/webapp/xxxx.pfx"</span><span class="token assign-left variable">keystoreType</span><span class="token operator">=</span><span class="token string">"PKCS12"</span><span class="token assign-left variable">keystorePass</span><span class="token operator">=</span><span class="token string">"xxxxxxx"</span><span class="token assign-left variable">clientAuth</span><span class="token operator">=</span><span class="token string">"false"</span> <span class="token assign-left variable">sslProtocol</span><span class="token operator">=</span><span class="token string">"TLS"</span> /<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-设置tomcat不产生大量日志"><a href="#3-设置tomcat不产生大量日志" class="headerlink" title="3. 设置tomcat不产生大量日志"></a>3. 设置tomcat不产生大量日志</h4><p>生产环境中因会有大量业务日志生成，tomcat也会产生大量日志，通常我们会有日志系统或者应用日志，不需要tomcat产生日志，可以设置tomcat不产生大量日志。修改<code>bin/catalina.sh</code>中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$CATALINA_OUT</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token assign-left variable">CATALINA_OUT</span><span class="token operator">=</span>/dev/null<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-启动与停止"><a href="#4-启动与停止" class="headerlink" title="4. 启动与停止"></a>4. 启动与停止</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./startup.sh./shutdown.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7开机自启动</title>
      <link href="/2020/04/29/linux-sh/"/>
      <url>/2020/04/29/linux-sh/</url>
      
        <content type="html"><![CDATA[<p>记录分享一些关于Linux操作。</p><span id="more"></span><h2 id="CentOS7开机自启动"><a href="#CentOS7开机自启动" class="headerlink" title="CentOS7开机自启动"></a>CentOS7开机自启动</h2><p>设置开机自启动程序有很多种方法。这里记录一种比较实用的方法。逻辑为：创建一个脚本，并在脚本中添加执行的命令，如redis,nginx,tomcat等启动命令，把该脚本设置为开机执行。</p><ol><li>创建脚本<code>server-start.sh</code></li></ol><p>如下等一些服务启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/home/redis/src/redis-server /home/redis/redis.conf<span class="token function">service</span> nginx start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>赋予执行权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /home/server-start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><code>/etc/rc.d/rc.local</code>赋予执行权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x /etc/rc.d/rc.local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>在<code>/etc/rc.d/rc.local</code>添加<code>server-start.sh</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/home/server-start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jackson时区问题</title>
      <link href="/2020/03/28/spring-jackson/"/>
      <url>/2020/03/28/spring-jackson/</url>
      
        <content type="html"><![CDATA[<p>本文分享jackson时区问题</p><span id="more"></span><h2 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h2><p><code>Spring Boot</code>项目中发现时间差8小时问题，猜测<code>Jackson</code>序列化时间出现问题。</p><h2 id="2-解决"><a href="#2-解决" class="headerlink" title="2.解决"></a>2.解决</h2><p>设置<code>Jackson</code>时区：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>locale<span class="token operator">=</span>zh_CNspring<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>time<span class="token operator">-</span>zone<span class="token operator">=</span><span class="token constant">GMT</span><span class="token operator">+</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">jacksonObjectMapperCustomization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> jacksonObjectMapperBuilder <span class="token operator">-></span>        jacksonObjectMapperBuilder<span class="token punctuation">.</span><span class="token function">timeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>timezone<span class="token operator">=</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC默认异常处理器及异常处理过程解析</title>
      <link href="/2019/07/12/spring-defaultexception/"/>
      <url>/2019/07/12/spring-defaultexception/</url>
      
        <content type="html"><![CDATA[<p>本文分享了Spring MVC默认异常处理器<code>DefaultHandlerExceptionResolver</code>,<code>ExceptionHandlerExceptionResolver</code>,<code>ResponseStatusExceptionResolver</code>的处理异常过程。</p><span id="more"></span><h2 id="1-DefaultHandlerExceptionResolver"><a href="#1-DefaultHandlerExceptionResolver" class="headerlink" title="1. DefaultHandlerExceptionResolver"></a>1. DefaultHandlerExceptionResolver</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">doResolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//405</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleHttpRequestMethodNotSupported</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">HttpRequestMethodNotSupportedException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//415</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleHttpMediaTypeNotSupported</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">HttpMediaTypeNotSupportedException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//406</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleHttpMediaTypeNotAcceptable</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">HttpMediaTypeNotAcceptableException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//500</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MissingPathVariableException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleMissingPathVariable</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">MissingPathVariableException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MissingServletRequestParameterException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleMissingServletRequestParameter</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">MissingServletRequestParameterException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestBindingException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleServletRequestBindingException</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">ServletRequestBindingException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//new ModelAndView()</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ConversionNotSupportedException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleConversionNotSupported</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">ConversionNotSupportedException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">TypeMismatchException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleTypeMismatch</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleHttpMessageNotReadable</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">HttpMessageNotReadableException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//new ModelAndView()</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleHttpMessageNotWritable</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">HttpMessageNotWritableException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">MissingServletRequestPartException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleMissingServletRequestPartException</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">MissingServletRequestPartException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//400</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BindException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleBindException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BindException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//404</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">NoHandlerFoundException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleNoHandlerFoundException</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">NoHandlerFoundException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//503</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">AsyncRequestTimeoutException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">handleAsyncRequestTimeoutException</span><span class="token punctuation">(</span>          <span class="token punctuation">(</span><span class="token class-name">AsyncRequestTimeoutException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> handlerEx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failure while trying to resolve exception ["</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> handlerEx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-ExceptionHandlerExceptionResolver"><a href="#6-ExceptionHandlerExceptionResolver" class="headerlink" title="6. ExceptionHandlerExceptionResolver"></a>6. ExceptionHandlerExceptionResolver</h2><p>该类默认优先级较高,负责解析含有@ControllerAdvice和@ExceptionHandler注解的Controller抛出的异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">doResolveHandlerMethodException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">,</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ServletInvocableHandlerMethod</span> exceptionHandlerMethod <span class="token operator">=</span> <span class="token function">getExceptionHandlerMethod</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exceptionHandlerMethod <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exceptionHandlerMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodArgumentResolvers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>argumentResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    exceptionHandlerMethod<span class="token punctuation">.</span><span class="token function">setHandlerMethodReturnValueHandlers</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>returnValueHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token class-name">ServletWebRequest</span> webRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">ModelAndViewContainer</span> mavContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndViewContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using @ExceptionHandler "</span> <span class="token operator">+</span> exceptionHandlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 通过ServletInvocableHandlerMethod处理异常</span>    <span class="token class-name">Throwable</span> cause <span class="token operator">=</span> exception<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Expose cause as provided argument as well</span>      exceptionHandlerMethod<span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> cause<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Otherwise, just the given exception as-is</span>      exceptionHandlerMethod<span class="token punctuation">.</span><span class="token function">invokeAndHandle</span><span class="token punctuation">(</span>webRequest<span class="token punctuation">,</span> mavContainer<span class="token punctuation">,</span> exception<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> invocationEx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Any other than the original exception (or its cause) is unintended here,</span>    <span class="token comment">// probably an accident (e.g. failed assertion or the like).</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>invocationEx <span class="token operator">!=</span> exception <span class="token operator">&amp;&amp;</span> invocationEx <span class="token operator">!=</span> exception<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failure in @ExceptionHandler "</span> <span class="token operator">+</span> exceptionHandlerMethod<span class="token punctuation">,</span> invocationEx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Continue with default processing of the original exception...</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mavContainer<span class="token punctuation">.</span><span class="token function">isRequestHandled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ModelMap</span> model <span class="token operator">=</span> mavContainer<span class="token punctuation">.</span><span class="token function">getModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">HttpStatus</span> status <span class="token operator">=</span> mavContainer<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span>mavContainer<span class="token punctuation">.</span><span class="token function">getViewName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> model<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span>mavContainer<span class="token punctuation">.</span><span class="token function">getViewName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mavContainer<span class="token punctuation">.</span><span class="token function">isViewReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      mav<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">View</span><span class="token punctuation">)</span> mavContainer<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>model <span class="token keyword">instanceof</span> <span class="token class-name">RedirectAttributes</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">></span></span> flashAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">RedirectAttributes</span><span class="token punctuation">)</span> model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFlashAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">RequestContextUtils</span><span class="token punctuation">.</span><span class="token function">getOutputFlashMap</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>flashAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> mav<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-ResponseStatusExceptionResolver"><a href="#3-ResponseStatusExceptionResolver" class="headerlink" title="3. ResponseStatusExceptionResolver"></a>3. ResponseStatusExceptionResolver</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">doResolveException</span><span class="token punctuation">(</span>    <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">ResponseStatusException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">resolveResponseStatusException</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResponseStatusException</span><span class="token punctuation">)</span> ex<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 解析@ResponseStatus</span>    <span class="token class-name">ResponseStatus</span> status <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ResponseStatus</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">resolveResponseStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 解析其他异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">doResolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">)</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> resolveEx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failure while trying to resolve exception ["</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> resolveEx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC自定义异常解析器及异常处理过程</title>
      <link href="/2019/07/07/spring-exception/"/>
      <url>/2019/07/07/spring-exception/</url>
      
        <content type="html"><![CDATA[<p>本文分享了Spring MVC自定义异常解析及在源码中的处理过程</p><span id="more"></span><h2 id="1-HandlerExceptionResolver"><a href="#1-HandlerExceptionResolver" class="headerlink" title="1. HandlerExceptionResolver"></a>1. HandlerExceptionResolver</h2><p><code>Spring MVC</code>定义了<code>HandlerExceptionResolver</code>接口，实现该接口的类负责解析异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token class-name">ModelAndView</span> <span class="token function">resolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                         <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-自定义异常解析"><a href="#2-自定义异常解析" class="headerlink" title="2. 自定义异常解析"></a>2. 自定义异常解析</h2><p>实现<code>HandlerExceptionResolver</code>接口并启用即可自定义异常解析器。<br><code>Spring MVC</code>中的<code>AbstractHandlerExceptionResolver</code>实现了该接口，所以继承此类即可自定义异常处理逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalHandlerExceptionResolver</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHandlerExceptionResolver</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HandlerExceptionResolver</span> defaultExceptionResolver<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">GlobalHandlerExceptionResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          defaultExceptionResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultHandlerExceptionResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">doResolveException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>      <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Exception</span> throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>    <span class="token class-name">ModelAndView</span> modelAndView <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>throwable <span class="token keyword">instanceof</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//发生NullPointerException时，response写入操作失败等自定义逻辑</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//其他的异常交还给spring的异常解析器解析</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        modelAndView<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultExceptionResolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-初始化过程"><a href="#3-初始化过程" class="headerlink" title="3. 初始化过程"></a>3. 初始化过程</h2><p>查看<code>AbstractHandlerExceptionResolver</code>的子类和<code>DispatcherServlet.properties</code>，<code>Spring MVC</code>默认配置异常解析器有：<code>ExceptionHandlerExceptionResolver</code>,<code>DefaultHandlerExceptionResolver</code>,<code>ResponseStatusExceptionResolver</code>。</p><p>在<code>DispatcherServlet</code>中初始化了异常解析器（<code>initHandlerExceptionResolvers</code>），如下：<br>DispatcherServlet：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> detectAllHandlerExceptionResolvers <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//默认</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectAllHandlerExceptionResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 寻找HandlerExceptionResolvers，包括父容器</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">></span></span> matchingBeans <span class="token operator">=</span> <span class="token class-name">BeanFactoryUtils</span>        <span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// sorted order排序</span>      <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//寻找名字叫handlerExceptionResolver的类</span>      <span class="token class-name">HandlerExceptionResolver</span> her <span class="token operator">=</span>          context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">HANDLER_EXCEPTION_RESOLVER_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>her<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Ignore, no HandlerExceptionResolver is fine too.</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 如果没有则创建默认解析器，至少找到一个HandlerExceptionResolvers被注册</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">=</span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerExceptionResolver</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No HandlerExceptionResolvers declared in servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>          <span class="token string">"': using default strategies from DispatcherServlet.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认创建过程：getDefaultStrategies(context, HandlerExceptionResolver.class)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategyInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> key <span class="token operator">=</span> strategyInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//从DispatcherServlet.properties读取默认配置</span>  <span class="token comment">//DispatcherServlet.properties中的配置为ExceptionHandlerExceptionResolver，ResponseStatusExceptionResolver，DefaultHandlerExceptionResolver</span>  <span class="token class-name">String</span> value <span class="token operator">=</span> defaultStrategies<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classNames <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>classNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> classNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> strategy <span class="token operator">=</span> <span class="token function">createDefaultStrategy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span>            <span class="token string">"Could not find DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span>            <span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LinkageError</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span>            <span class="token string">"Unresolvable class definition for DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span>            className <span class="token operator">+</span> <span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> strategies<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-处理异常"><a href="#4-处理异常" class="headerlink" title="4. 处理异常"></a>4. 处理异常</h2><p><code>DispatcherServlet</code>通过<code>doDispatch</code>处理一个请求。在<code>doDispatch</code>最后调用<code>processDispatchResult</code>进行页面渲染，返回正确结果或者异常结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//如果有异常，如果为ModelAndViewDefiningException异常直接返回，其他异常通过processHandlerException构建view</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>      mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>      errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No view rendering, null ModelAndView returned."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>processHandlerException:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//设置content types</span>  <span class="token comment">// Success and error responses may use different content types</span>  request<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token constant">PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//找异常解析器</span>  <span class="token comment">//Check registered HandlerExceptionResolvers...</span>  <span class="token comment">//调用解析器resolveException方法</span>  <span class="token class-name">ModelAndView</span> exMv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerExceptionResolver</span> resolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerExceptionResolvers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//异常解析器中的resolveException</span>      exMv <span class="token operator">=</span> resolver<span class="token punctuation">.</span><span class="token function">resolveException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exMv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exMv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exMv<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">EXCEPTION_ATTRIBUTE</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// We might still need view name translation for a plain error model...</span>    <span class="token comment">// 有view返回，没有则设置默认view</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exMv<span class="token punctuation">.</span><span class="token function">hasView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> defaultViewName <span class="token operator">=</span> <span class="token function">getDefaultViewName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultViewName <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        exMv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span>defaultViewName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Using resolved error view: "</span> <span class="token operator">+</span> exMv<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Using resolved error view: "</span> <span class="token operator">+</span> exMv<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//设置request</span>    <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">exposeErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> exMv<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">throw</span> ex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下篇文章将分享默认异常解析器的处理过程<code>resolveException</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python自动发送邮件</title>
      <link href="/2019/06/02/python-email/"/>
      <url>/2019/06/02/python-email/</url>
      
        <content type="html"><![CDATA[<p>分享使用python自动发送类似日报邮件</p><span id="more"></span><p>这里是我的自动发送邮件，示例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> timefrom email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>application <span class="token keyword">import</span> MIMEApplicationfrom email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipartfrom email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMETextimport smtplibfrom email <span class="token keyword">import</span> utils<span class="token keyword">class</span> <span class="token class-name">EMailer</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>contacts<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>address <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment"># 发送的邮箱地址        </span>    auth_info <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            auth_info<span class="token punctuation">[</span><span class="token string">'server'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 邮箱服务器        </span>    auth_info<span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>address            auth_info<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment"># 邮箱密码        </span>    self<span class="token punctuation">.</span>user_info <span class="token operator">=</span> auth_info            self<span class="token punctuation">.</span>contacts <span class="token operator">=</span> contacts <span class="token comment"># 接受邮件的邮箱        </span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>contacts<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_mail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>            str_to <span class="token operator">=</span> <span class="token string">'; '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>contacts<span class="token punctuation">)</span>            server <span class="token operator">=</span> self<span class="token punctuation">.</span>user_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">)</span>           smtp_port <span class="token operator">=</span> <span class="token number">25</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>user_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>            passwd <span class="token operator">=</span> self<span class="token punctuation">.</span>user_info<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>server <span class="token keyword">and</span> user <span class="token keyword">and</span> passwd<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">'incomplete login info, exit now'</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span>            msg_root <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'related'</span><span class="token punctuation">)</span>            msg_root<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject            msg_root<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>address            msg_root<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str_to        msg_alternative <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token string">'alternative'</span><span class="token punctuation">)</span>            msg_root<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>msg_alternative<span class="token punctuation">)</span>    main_msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>            textApart<span class="token operator">=</span>MIMEText<span class="token punctuation">(</span>subject<span class="token punctuation">)</span>        zipFile <span class="token operator">=</span> subject<span class="token operator">+</span><span class="token string">".docx"</span>            zipApart <span class="token operator">=</span> MIMEApplication<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>zipFile<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            zipApart<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment'</span><span class="token punctuation">,</span> filename<span class="token operator">=</span>zipFile<span class="token punctuation">)</span>    main_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>textApart<span class="token punctuation">)</span>            main_msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>zipApart<span class="token punctuation">)</span>    main_msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>address           main_msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str_to            main_msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject            main_msg<span class="token punctuation">[</span><span class="token string">'Date'</span><span class="token punctuation">]</span> <span class="token operator">=</span> utils<span class="token punctuation">.</span>formatdate<span class="token punctuation">(</span><span class="token punctuation">)</span>            full_text <span class="token operator">=</span> main_msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>        smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span>server<span class="token punctuation">,</span> smtp_port<span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>starttls<span class="token punctuation">(</span><span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>self<span class="token punctuation">.</span>address<span class="token punctuation">,</span> self<span class="token punctuation">.</span>contacts<span class="token punctuation">,</span> full_text<span class="token punctuation">)</span>                    smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"success!"</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"fail:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>        firstContacts <span class="token operator">=</span> <span class="token string">""</span>        EMailer<span class="token punctuation">(</span>firstContacts<span class="token punctuation">)</span><span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span><span class="token string">"xxx_"</span><span class="token operator">+</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y年_%m月_%d日"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_工作日报"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要去邮箱设置开启smtp。可以去学习下邮件传输协议。</p><p>执行python3 emailer.py测试发送</p><p>准备一台服务器，定时执行就可以自动发邮件了。当然这是发送固定文件。具体如何创建word并写入内容有时间了再做研究。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用IntelliJ IDEA生成代码</title>
      <link href="/2019/05/26/java-idea-pojo/"/>
      <url>/2019/05/26/java-idea-pojo/</url>
      
        <content type="html"><![CDATA[<p>IntelliJ IDEA可以根据数据库生成“POJO”代码，在此基础上，可以通过修改Generate POJOs.groovy文件来生成自定义的代码如：Controller, Service。</p><span id="more"></span><h2 id="1-编写Generate-POJOs-groovy"><a href="#1-编写Generate-POJOs-groovy" class="headerlink" title="1. 编写Generate POJOs.groovy"></a>1. 编写Generate POJOs.groovy</h2><pre class="line-numbers language-Groovy" data-language="Groovy"><code class="language-Groovy">import com.intellij.database.model.DasTableimport com.intellij.database.model.DasColumnimport com.intellij.database.model.ObjectKindimport com.intellij.database.util.Caseimport com.intellij.database.util.DasUtilbasePackageName &#x3D; &quot;basePackageName&quot;packageName &#x3D; basePackageName + &quot;.repository.entity&quot;repositoryPackageName &#x3D; basePackageName + &quot;.repository&quot;servicePackageName &#x3D; basePackageName + &quot;.service&quot;serviceImplPackageName &#x3D; basePackageName + &quot;.service.impl&quot;ControllerPackageName &#x3D; basePackageName + &quot;.controller&quot;allTables&#x3D;new HashMap&lt;&gt;()schemeName &#x3D; &quot;tk_ct&quot;typeMapping &#x3D; [        (~&#x2F;(?i)int&#x2F;)                      : &quot;Integer&quot;,        (~&#x2F;(?i)long|bigint&#x2F;)              : &quot;Long&quot;,        (~&#x2F;(?i)number&#x2F;)                   : &quot;String&quot;,        (~&#x2F;(?i)float|double|decimal|real&#x2F;): &quot;Double&quot;,        (~&#x2F;(?i)datetime|timestamp&#x2F;)       : &quot;java.sql.Timestamp&quot;,        (~&#x2F;(?i)date&#x2F;)                     : &quot;java.sql.Date&quot;,        (~&#x2F;(?i)time&#x2F;)                     : &quot;java.sql.Time&quot;,        (~&#x2F;(?i)&#x2F;)                         : &quot;String&quot;]FILES.chooseDirectoryAndSave(&quot;Choose entity directory&quot;, &quot;Choose where to store generated files&quot;) &#123; dir -&gt;    SELECTION.filter &#123; it instanceof DasTable &amp;&amp; it.getKind() &#x3D;&#x3D; ObjectKind.TABLE &#125;.each &#123;        generate(it, dir)    &#125;&#125;FILES.chooseDirectoryAndSave(&quot;Choose repository directory&quot;, &quot;Choose where to store generated files&quot;) &#123; dir -&gt;    allTables.each &#123; className, table -&gt;        new File(dir, className + &quot;Repository.java&quot;).withPrintWriter &#123; out -&gt;            generateRepository(out, className, table, getId(table))        &#125;    &#125;&#125;FILES.chooseDirectoryAndSave(&quot;Choose service directory&quot;, &quot;Choose where to store generated files&quot;) &#123; dir -&gt;    allTables.each &#123; className, table -&gt;        new File(dir, className + &quot;Service.java&quot;).withPrintWriter &#123; out -&gt;            generateService(out, className, table,  getId(table))        &#125;    &#125;&#125;FILES.chooseDirectoryAndSave(&quot;Choose service impl directory&quot;, &quot;Choose where to store generated files&quot;) &#123; dir -&gt;    allTables.each &#123; className, table -&gt;        new File(dir, className + &quot;ServiceImpl.java&quot;).withPrintWriter &#123; out -&gt;            generateServiceImpl(out, className, table,  getId(table))        &#125;    &#125;&#125;FILES.chooseDirectoryAndSave(&quot;Choose  controller directory&quot;, &quot;Choose where to store generated files&quot;) &#123; dir -&gt;    allTables.each &#123; className, table -&gt;        new File(dir, className + &quot;Controller.java&quot;).withPrintWriter &#123; out -&gt;            generateController(out, className, table)        &#125;    &#125;&#125;def generate(table, dir) &#123;    def className &#x3D; javaName(table.getName(), true)    allTables.put(className, table)    def fields &#x3D; calcFields(table, className)    new File(dir, className + &quot;.java&quot;).withPrintWriter &#123; out -&gt;        generate(out, className, fields,table)    &#125;&#125;def generate(out, className, fields, table) &#123;    out.println &quot;package $packageName ;&quot;    out.println &quot;&quot;    out.println &#39;&#39;&#39;import java.io.Serializable;import javax.persistence.Column;import javax.persistence.Entity;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import lombok.ToString;import javax.validation.constraints.NotNull;import net.cofcool.chaos.server.common.util.ValidationGroups.Insert;&#39;&#39;&#39;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    generateComment(out, table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;))    out.println &quot;&quot;    out.println &quot;@Table(name &#x3D;\&quot;&quot; + table.getName() + &quot;\&quot;, schema &#x3D; \&quot;&quot;  + schemeName +  &quot;\&quot;)&quot;    out.println &quot;@Entity&quot;    out.println &quot;@Getter&quot;    out.println &quot;@Setter&quot;    out.println &quot;@NoArgsConstructor&quot;    out.println &quot;@ToString&quot;    out.println &quot;public class $className  implements Serializable &#123;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println genSerialID()    out.println &quot;&quot;    fields.each() &#123;        out.println &quot;    &#x2F;**&quot;        out.println &quot;     * &quot; + it.comment        out.println &quot;     *&#x2F;&quot;        if (it.annos.size() &gt;0)        &#123;            it.annos.each() &#123;                out.println &quot;    $&#123;it&#125;&quot;            &#125;        &#125;        out.println &quot;    private $&#123;it.type&#125; $&#123;it.name&#125;;&quot;        out.println &quot;&quot;    &#125;    out.println &quot;&quot;    out.println &quot;&#125;&quot;&#125;def generateRepository(out, className, table, idType) &#123;    out.println &quot;package $repositoryPackageName ;&quot;    out.println &quot;&quot;    out.println &quot;import $packageName.$className;&quot;    out.println &quot;import org.springframework.data.jpa.repository.JpaRepository;&quot;    out.println &quot;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    generateComment(out, table.getComment())    out.println &quot;public interface &quot; + className + &quot;Repository extends JpaRepository&lt;$className, $idType&gt;, JpaSpecificationExecutor&lt;$className&gt; &#123;&quot;    out.println &quot;&quot;    out.println &quot;&#125;&quot;&#125;private void generateComment(out, comment &#x3D; null) &#123;    out.println &quot;&#x2F;**&quot;    out.println &quot; * &quot; + comment    out.println &quot; *&quot;    out.println &quot; * &lt;p&gt;Date: &quot; + new java.util.Date().toString() + &quot;&lt;&#x2F;p&gt;&quot;    out.println &quot; *&#x2F;&quot;&#125;def generateController(out, className, table) &#123;    def lit &#x3D; toLowerCaseFirstOne(className)    out.println &quot;package $ControllerPackageName;&quot;    out.println &quot;&quot;    out.println &#39;&#39;&#39;import javax.annotation.Resource;import net.cofcool.chaos.server.common.core.Message;import com.xingdata.server.ct.api.MyPage;import net.cofcool.chaos.server.common.core.Result.ResultState;import net.cofcool.chaos.server.common.util.ValidationGroups.Delete;import net.cofcool.chaos.server.common.util.ValidationGroups.Insert;import net.cofcool.chaos.server.common.util.ValidationGroups.Select;import net.cofcool.chaos.server.common.util.ValidationGroups.Update;import net.cofcool.chaos.server.core.annotation.Api;import java.util.List;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RestController;&#x2F;&#x2F; 这里的注释用于yapi自动上传文档&#39;&#39;&#39;    out.println &quot;import $packageName.$className;&quot;    out.println &quot;import $servicePackageName&quot; + &quot;.&quot; + className + &quot;Service;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&#x2F;**&quot;    out.println &quot; * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot; * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot; *&quot;    out.println &quot; * &lt;p&gt;Date: &quot; + new java.util.Date().toString() + &quot;&lt;&#x2F;p&gt;&quot;    out.println &quot; *&#x2F;&quot;    out.println &quot;@Api&quot;    out.println &quot;@RestController&quot;    out.println &quot;@RequestMapping(value &#x3D; \&quot;&#x2F;$lit\&quot;, method &#x3D; RequestMethod.POST)&quot;    out.println &quot;public class &quot; + className + &quot;Controller &#123;&quot;    out.println &quot;&quot;    out.println &quot;    @Resource&quot;    out.println &quot;    private &quot; + className + &quot;Service &quot; + lit + &quot;Service;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;分页查询&quot;    out.println &quot;     * @param: [Page&lt;&quot; + className + &quot;&gt;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&quot;    out.println &quot;     * @data: &quot;+ new java.util.Date().toString()    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;query\&quot;)&quot;    out.println &quot;    public Message query(@RequestBody MyPage&lt;$className&gt; page) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.query(page, page.getCondition()).result();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;添加&quot;    out.println &quot;     * @param: [&quot; + className + &quot;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&lt;$className&gt;&quot;    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;add\&quot;)&quot;    out.println &quot;    public Message&lt;$className&gt; add(@RequestBody @Validated(Insert.class) $className entity) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.add(entity).result();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;修改&quot;    out.println &quot;     * @param: [&quot; + className + &quot;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&lt;$className&gt;&quot;    out.println &quot;     * @data: &quot;+ new java.util.Date().toString()    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;update\&quot;)&quot;    out.println &quot;    public Message&lt;$className&gt; update(@RequestBody @Validated(Update.class) $className entity) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.update(entity).result();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;详情&quot;    out.println &quot;     * @param: [&quot; + className + &quot;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&lt;$className&gt;&quot;    out.println &quot;     * @data: &quot;+ new java.util.Date().toString()    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;detail\&quot;)&quot;    out.println &quot;    public Message&lt;$className&gt; detail(@RequestBody @Validated(Select.class) $className entity) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.queryById(entity).result();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;全部查询&quot;    out.println &quot;     * @param: [&quot; + className + &quot;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&lt;List&lt;$className&gt;&gt;&quot;    out.println &quot;     * @data: &quot;+ new java.util.Date().toString()    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;queryAll\&quot;)&quot;    out.println &quot;    public Message&lt;List&lt;$className&gt;&gt; queryAll(@RequestBody $className entity) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.queryAll(entity).result();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    &#x2F;**&quot;    out.println &quot;     * @description: &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;) + &quot;删除&quot;    out.println &quot;     * @param: [&quot; + className + &quot;]&quot;    out.println &quot;     * @menu &quot; + table.getComment().replaceAll(&quot;表&quot;,&quot;&quot;)    out.println &quot;     * @return: Message&lt;$className&gt;&quot;    out.println &quot;     * @data: &quot;+ new java.util.Date().toString()    out.println &quot;     *&#x2F;&quot;    out.println &quot;    @PostMapping(\&quot;&#x2F;delete\&quot;)&quot;    out.println &quot;    public ResultState delete(@RequestBody @Validated(Delete.class) $className entity) &#123;&quot;    out.println &quot;        return &quot; + lit + &quot;Service.delete(entity);&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&#125;&quot;&#125;def toLowerCaseFirstOne(s)&#123;    if(Character.isLowerCase(s.charAt(0)))        return s;    else        return (new StringBuilder()).append(Character.toLowerCase(s.charAt(0))).append(s.substring(1)).toString();&#125;def generateService(out, className, table, idType) &#123;    out.println &quot;package $servicePackageName;&quot;    out.println &quot;&quot;    out.println &quot;import $packageName.$className;&quot;    out.println &quot;import com.xingdata.server.ct.api.BaseService;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    generateComment(out, table.getComment())    out.println &quot;public interface &quot; + className + &quot;Service extends BaseService&lt;$className&gt; &#123;&quot;    out.println &quot;&quot;    out.println &quot;&#125;&quot;&#125;def generateServiceImpl(out, className, table, idType) &#123;    out.println &quot;package $serviceImplPackageName;&quot;    out.println &quot;&quot;    out.println &#39;&#39;&#39;import net.cofcool.chaos.server.common.core.Page;import net.cofcool.chaos.server.data.jpa.support.Paging;import org.springframework.data.jpa.domain.Specification;import org.springframework.stereotype.Service;import com.xingdata.server.ct.api.BaseServiceImpl;&#39;&#39;&#39;    out.println &quot;import $packageName&quot; + &quot;.&quot; + className + &quot;;&quot;    out.println &quot;import $repositoryPackageName&quot; + &quot;.&quot; + className + &quot;Repository;&quot;    out.println &quot;import $servicePackageName&quot; + &quot;.&quot; + className + &quot;Service;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    out.println &quot;&quot;    generateComment(out, table.getComment())    out.println &quot;@Service&quot;    out.println &quot;public class &quot; + className + &quot;ServiceImpl extends BaseServiceImpl&lt;$className, $idType, $className&quot; + &quot;Repository&gt;  implements &quot; + className + &quot;Service &#123;&quot;    out.println &quot;    @Override&quot;    out.println &quot;    protected Object queryWithSp(Specification&lt;$className&gt; sp, Page&lt;$className&gt; condition, $className entity) &#123;&quot;    out.println &quot;        return getJpaRepository().findAll(sp, Paging.getPageable(condition));&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;    @Override&quot;    out.println &quot;    protected $idType getEntityId($className entity) &#123;&quot;    out.println &quot;        return entity.getId();&quot;    out.println &quot;    &#125;&quot;    out.println &quot;&quot;    out.println &quot;&#125;&quot;&#125;def calcFields(table, javaName) &#123;    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;        def spec &#x3D; Case.LOWER.apply(col.getDataType().getSpecification())        def typeStr &#x3D; typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value        def colName &#x3D; columnName(col.getName());        def comm &#x3D; [                name : colName,                type : typeStr,                annos: [],                comment: col.getComment()        ]        def isTime &#x3D; colName &#x3D;&#x3D; &quot;timeUpdate&quot; || colName &#x3D;&#x3D; &quot;timeCreate&quot;        def isData &#x3D; colName&#x3D;&#x3D;&quot;dataReserve&quot;        if (isTime) &#123;            comm.annos +&#x3D; [&quot;@Column(name &#x3D; \&quot;&quot; + col.getName() + &quot;\&quot;, insertable &#x3D; false, updatable &#x3D; false)&quot;]        &#125; else &#123;            comm.annos +&#x3D; [&quot;@Column(name &#x3D; \&quot;&quot; + col.getName() + &quot;\&quot;)&quot;]        &#125;        if (table.getColumnAttrs(col).contains(DasColumn.Attribute.PRIMARY_KEY)) &#123;            comm.annos +&#x3D; [&quot;@Id&quot;]            comm.annos +&#x3D; [&quot;@GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)&quot;]        &#125; else if (!isTime)&#123;            if(!isData)&#123;                comm.annos +&#x3D; [&quot;@NotNull(groups &#x3D; &#123;Insert.class&#125;)&quot;]            &#125;        &#125;        fields +&#x3D; [comm]    &#125;&#125;def getId(table) &#123;    def type &#x3D; &quot;&quot;;    DasUtil.getColumns(table).reduce([]) &#123; fields, col -&gt;        def spec &#x3D; Case.LOWER.apply(col.getDataType().getSpecification())        def typeStr &#x3D; typeMapping.find &#123; p, t -&gt; p.matcher(spec).find() &#125;.value        if (table.getColumnAttrs(col).contains(DasColumn.Attribute.PRIMARY_KEY)) &#123;            type &#x3D; typeStr        &#125;    &#125;    return type&#125;def javaName(str, capitalize) &#123;    def s &#x3D; com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;            .subList(1, 2)            .join(&quot;&quot;)            .replaceAll(&#x2F;[^\p&#123;javaJavaIdentifierPart&#125;[_]]&#x2F;, &quot;_&quot;)    capitalize || s.length() &#x3D;&#x3D; 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]&#125;def columnName(str) &#123;    def s &#x3D; com.intellij.psi.codeStyle.NameUtil.splitNameIntoWords(str)            .collect &#123; Case.LOWER.apply(it).capitalize() &#125;            .join(&quot;&quot;)            .replaceAll(&#x2F;[^\p&#123;javaJavaIdentifierPart&#125;[_]]&#x2F;, &quot;_&quot;)    s.length() &#x3D;&#x3D; 1? s : Case.LOWER.apply(s[0]) + s[1..-1]&#125;static String genSerialID()&#123;    return &quot;    private static final long serialVersionUID &#x3D;  &quot; + Math.abs(new Random().nextLong())+&quot;L;&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-生成代码"><a href="#2-生成代码" class="headerlink" title="2. 生成代码"></a>2. 生成代码</h2><ol><li>在idea Database上添加Datasource</li><li>在需要生成的表右键</li><li>点击Scripted Extensions -&gt; Generate POJOs.groovy</li><li>生成代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> POJO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mybatis-plus-generator,freemarker模板生成代码</title>
      <link href="/2019/04/07/mybatis-plus-generator/"/>
      <url>/2019/04/07/mybatis-plus-generator/</url>
      
        <content type="html"><![CDATA[<p>在使用mybatis-plus时也可以快速生成代码，并且可以自定义模板，这里使用freemarker模板</p><span id="more"></span><ol><li>maven引入</li><li>创建模板文件</li><li>配置</li><li>生成代码</li></ol><h2 id="1-maven引入"><a href="#1-maven引入" class="headerlink" title="1. maven引入"></a>1. maven引入</h2><p>需要引入如下依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>freemarker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.28<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建模板文件"><a href="#2-创建模板文件" class="headerlink" title="2. 创建模板文件"></a>2. 创建模板文件</h2><p>常规需要创建controller.java.ftl，entity.java.ftl，mapper.java.ftl，service.java.ftl， serviceImpl.java.ftl这些模板。可根据差异变化模板内容。这里提供参考模板：<br>controller.java.ftl</p><pre class="line-numbers language-FreeMarker" data-language="FreeMarker"><code class="language-FreeMarker">package $&#123;package.Controller&#125;;import javax.annotation.Resource;import org.springframework.stereotype.Controller;import org.springframework.validation.BindingResult;import org.springframework.validation.annotation.Validated;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import $&#123;package.Service&#125;.$&#123;table.serviceName&#125;;import $&#123;package.Entity&#125;.$&#123;table.entityName&#125;;&#x2F;** * &lt;p&gt; * $&#123;table.comment!&#125;接口 * &lt;&#x2F;p&gt; * * @author $&#123;author&#125; * @since $&#123;date&#125; *&#x2F;@Controller@RequestMapping(value &#x3D; &quot;$&#123;table.entityName?lower_case&#125;&quot;, method &#x3D; &#123;RequestMethod.POST&#125;)public class $&#123;table.controllerName&#125;&#123;    @Resource    private $&#123;table.serviceName&#125;&lt;$&#123;table.entityName&#125;&gt; $&#123;table.entityName?lower_case&#125;Service;    &#x2F;**     * $&#123;table.comment!&#125;列表查询     * @param page 查询条件     * @return QueryResult&lt;$&#123;table.entityName&#125;&gt;     *&#x2F;    @RequestMapping(&quot;&#x2F;query&quot;)    public @ResponseBody    QueryResult&lt;$&#123;table.entityName&#125;&gt; query(@RequestBody Page&lt;$&#123;table.entityName&#125;&gt; page) &#123;        return $&#123;table.entityName?lower_case&#125;Service.selectByCondition(page, page.getCondition($&#123;table.entityName&#125;.class));    &#125;    &#x2F;**     * $&#123;table.comment!&#125;添加     * @param $&#123;table.entityName?lower_case&#125; $&#123;table.comment!&#125;实体类     * @param bindingResult　验参信息     * @return SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt;     *&#x2F;    @RequestMapping(&quot;&#x2F;add&quot;)    public @ResponseBody    SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt; add(@RequestBody @Validated(&#123;Insert.class&#125;) $&#123;table.entityName&#125; $&#123;table.entityName?lower_case&#125;, BindingResult bindingResult) &#123;       return $&#123;table.entityName?lower_case&#125;Service.add($&#123;table.entityName?lower_case&#125;);    &#125;    &#x2F;**     * $&#123;table.comment!&#125;删除     * @param baseParam baseParam     * @return SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt;     *&#x2F;    @RequestMapping(value &#x3D; &quot;&#x2F;delete&quot;)    public @ResponseBody    Integer delete(@RequestBody @Validated BaseParam baseParam, BindingResult bindingResult) &#123;       $&#123;table.entityName&#125; $&#123;table.entityName?lower_case&#125; &#x3D; new $&#123;table.entityName&#125;();       $&#123;table.entityName?lower_case&#125;.setId(Long.valueOf(baseParam.getId()));       return $&#123;table.entityName?lower_case&#125;Service.delete($&#123;table.entityName?lower_case&#125;);    &#125;                &#x2F;**     * $&#123;table.comment!&#125;修改     * @param $&#123;table.entityName?lower_case&#125;　$&#123;table.comment!&#125;实体类     * @param bindingResult　验参信息     * @return SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt;     *&#x2F;    @RequestMapping(&quot;&#x2F;update&quot;)    public @ResponseBody    SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt; update(@RequestBody @Validated(&#123;Update.class&#125;) $&#123;table.entityName&#125; $&#123;table.entityName?lower_case&#125;, BindingResult bindingResult) &#123;        return $&#123;table.entityName?lower_case&#125;Service.update($&#123;table.entityName?lower_case&#125;);    &#125;    &#x2F;**     * $&#123;table.comment!&#125;详情     * @param baseParam baseParam     * @return SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt;     *&#x2F;    @RequestMapping(&quot;&#x2F;detail&quot;)    public @ResponseBody    SqlExecuteResult&lt;$&#123;table.entityName&#125;&gt; detail(@RequestBody @Validated BaseParam baseParam, BindingResult bindingResult) &#123;        $&#123;table.entityName&#125; $&#123;table.entityName?lower_case&#125; &#x3D; new $&#123;table.entityName&#125;();        $&#123;table.entityName?lower_case&#125;.setId(new Long(baseParam.getId()));        return $&#123;table.entityName?lower_case&#125;Service.selectById($&#123;table.entityName?lower_case&#125;);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mapper.java.ftl</p><pre class="line-numbers language-freemarker" data-language="freemarker"><code class="language-freemarker">package $&#123;package.Mapper&#125;;import $&#123;package.Entity&#125;.$&#123;entity&#125;;import $&#123;superMapperClassPackage&#125;;import org.springframework.stereotype.Component;&#x2F;** * &lt;p&gt; * $&#123;table.comment!&#125; Mapper * &lt;&#x2F;p&gt; * * @author $&#123;author&#125; * @since $&#123;date&#125; *&#x2F;&lt;#if kotlin&gt;interface $&#123;table.mapperName&#125; : $&#123;superMapperClass&#125;&lt;$&#123;entity&#125;&gt;&lt;#else&gt;@Componentpublic interface $&#123;table.mapperName&#125; extends $&#123;superMapperClass&#125;&lt;$&#123;entity&#125;&gt; &#123;&#125;&lt;&#x2F;#if&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>创建CodeGenerator.java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>generator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">AutoGenerator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span></span><span class="token class-name">InjectionConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>rules<span class="token punctuation">.</span></span><span class="token class-name">NamingStrategy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>engine<span class="token punctuation">.</span></span><span class="token class-name">FreemarkerTemplateEngine</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CodeGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 可以看mybatis-plus官方文档，详细了解     * 项目位置及author     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> projectPath <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> outputDir <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> author <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 数据库配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> dataUrl <span class="token operator">=</span> <span class="token string">"j"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> dataUserName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> dataPassword <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> dataDriver <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 输出文件位置     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> moduleName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> parent <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> dao <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> service <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> domian <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> controller <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> serviceImpl <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> xml <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 要生成的数据库表名，以逗号分割 示例:cfg_skutype,node_rchg     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> tableName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 执行该主方法生成     * @param args null     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AutoGenerator</span> mpg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">GlobalConfig</span> gc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobalConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOutputDir</span><span class="token punctuation">(</span>projectPath <span class="token operator">+</span> outputDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        gc<span class="token punctuation">.</span><span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setGlobalConfig</span><span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 数据源配置</span>        <span class="token class-name">DataSourceConfig</span> dsc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>dataUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setDriverName</span><span class="token punctuation">(</span>dataDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>dataUserName<span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>dataPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 包配置</span>        <span class="token class-name">PackageConfig</span> pc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PackageConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setModuleName</span><span class="token punctuation">(</span>moduleName<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span>domian<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span>serviceImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span>dao<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc<span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span>xml<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setPackageInfo</span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自定义配置</span>        <span class="token class-name">InjectionConfig</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setCfg</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 配置模板，也就是2中的模板</span>        <span class="token class-name">TemplateConfig</span> templateConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplateConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setController</span><span class="token punctuation">(</span><span class="token string">"controller.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setEntity</span><span class="token punctuation">(</span><span class="token string">"entity.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setMapper</span><span class="token punctuation">(</span><span class="token string">"mapper.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setService</span><span class="token punctuation">(</span><span class="token string">"service.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setServiceImpl</span><span class="token punctuation">(</span><span class="token string">"serviceImpl.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig<span class="token punctuation">.</span><span class="token function">setXml</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplate</span><span class="token punctuation">(</span>templateConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 策略配置</span>        <span class="token class-name">StrategyConfig</span> strategy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StrategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setColumnNaming</span><span class="token punctuation">(</span><span class="token class-name">NamingStrategy</span><span class="token punctuation">.</span>underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setSuperEntityClass</span><span class="token punctuation">(</span><span class="token string">"com.baomidou.ant.common.BaseEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setEntityLombokModel</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setRestControllerStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setSuperEntityColumns</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setInclude</span><span class="token punctuation">(</span>tableName<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setControllerMappingHyphenStyle</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span>pc<span class="token punctuation">.</span><span class="token function">getModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">setTemplateEngine</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FreemarkerTemplateEngine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-生成代码"><a href="#4-生成代码" class="headerlink" title="4. 生成代码"></a>4. 生成代码</h2><p>执行CodeGenerator中main方法生成代码。</p><p>这样，就快速生成了代码。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis-plus </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析Spring MVC:HandlerAdapter</title>
      <link href="/2018/12/01/spring-mvc-handlerAdapter/"/>
      <url>/2018/12/01/spring-mvc-handlerAdapter/</url>
      
        <content type="html"><![CDATA[<p>剖析Spring MVC,介绍Spring MVC中的HandlerAdapter。</p><span id="more"></span><p>在前面文章中，<code>DispatcherServlet</code>接收到请求后通过<code>HandlerMapping</code>,<code>HandlerAdapter</code>来处理请求，这一章先来看<code>HandlerAdapter</code>是如何工作的。</p><pre class="line-numbers language-none"><code class="language-none">graph BTAbstractHandlerMethodAdapter -.-&gt; HandlerAdapterHttpRequestHandlerAdapter -.-&gt; HandlerAdapterSimpleControllerHandlerAdapter -.-&gt; HandlerAdapterSimpleServletHandlerAdapter -.-&gt; HandlerAdapterRequestMappingHandlerAdapter --&gt;AbstractHandlerMethodAdapter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">&#123;</span><span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Nullable</span><span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HandlerAdapter</code>包含三个方法分别为：是否支持handler，使用handler处理请求，获取资源的LastModified值。</p><p>在处理一个请求时。<code>DispatcherServlet</code>中的<code>doDispatch</code>会获取<code>handler</code>,然后通过<code>handler</code>获取<code>HandlerAdapter</code>,获取到<code>HandlerAdapter</code>后调用<code>handle</code>方法，获取<code>ModelAndView</code>，返回请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取HandlerAdapter</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> ha <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Testing handler adapter ["</span> <span class="token operator">+</span> ha <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//使用supports方法寻找合适的适配器子类</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ha<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> ha<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"No adapter for handler ["</span> <span class="token operator">+</span> handler <span class="token operator">+</span>      <span class="token string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//获取lastModified</span><span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取ModelAndView</span>mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上基本解释了HandlerAdapter的这三个方法。再来看他的实现。</p><h2 id="1-HttpRequestHandlerAdapter"><a href="#1-HttpRequestHandlerAdapter" class="headerlink" title="1. HttpRequestHandlerAdapter"></a>1. HttpRequestHandlerAdapter</h2><p> 适配HTTP请求处理器适配器，适配HttpRequest类型handler。</p><ol><li>supports：<code>handler instanceof HttpRequestHandler</code>，适配HttpRequestHandler。</li><li>handle：调用<code>HttpRequestHandler</code>的handleRequest方法。</li></ol><h2 id="2-SimpleControllerHandlerAdapter"><a href="#2-SimpleControllerHandlerAdapter" class="headerlink" title="2. SimpleControllerHandlerAdapter"></a>2. SimpleControllerHandlerAdapter</h2><p>适配Controller类型的handler(实现Controller)。</p><ol><li>supports：<code>handler instanceof Controller</code>，适配Controller。</li><li>handle：调用<code>Controller</code>的handleRequest方法。 </li></ol><h2 id="3-SimpleServletHandlerAdapter"><a href="#3-SimpleServletHandlerAdapter" class="headerlink" title="3. SimpleServletHandlerAdapter"></a>3. SimpleServletHandlerAdapter</h2><p>适配servlet类型的handler。</p><ol><li>supports：<code>handler instanceof Servlet</code>，适配Servlet。</li><li>handle：调用<code>Servlet</code>的service方法。 </li></ol><h2 id="4-RequestMappingHandlerAdapter"><a href="#4-RequestMappingHandlerAdapter" class="headerlink" title="4. RequestMappingHandlerAdapter"></a>4. RequestMappingHandlerAdapter</h2><p><code>AbstractHandlerMethodAdapter</code>,<code>RequestMappingHandlerAdapter</code>：注解方式，适配HandlerMethod。</p><p><code>RequestMappingHandlerAdapter</code>继承<code>AbstractHandlerMethodAdapter</code>，AbstractHandlerMethodAdapter为一个抽象模板模板。</p><ol><li>supports：<code>handler instanceof HandlerMethod &amp;&amp; supportsInternal((HandlerMethod) handler)</code>,适配HandlerMethod，supportsInternal为抽象模板方法，在子类中直接返回了true。</li><li>handle：调用本类中<code>handleInternal</code>抽象方法。在子类中<code>RequestMappingHandlerAdapter</code>实现。</li></ol><p>下面详细看RequestMappingHandlerAdapter，</p><ol><li><p>RequestMappingHandlerAdapter的创建：<br><code>RequestMappingHandlerAdapter</code>实现<code>InitializingBean</code>,</p></li><li><p>RequestMappingHandlerAdapter的使用：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>    <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">HandlerMethod</span> handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">ModelAndView</span> mav<span class="token punctuation">;</span>  <span class="token function">checkRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Execute invokeHandlerMethod in synchronized block if required.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>synchronizeOnSession<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// No HttpSession available -> no mutex necessary</span>      mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// No synchronization on session demanded at all...</span>    mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">containsHeader</span><span class="token punctuation">(</span><span class="token constant">HEADER_CACHE_CONTROL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSessionAttributesHandler</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">applyCacheSeconds</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSecondsForSessionAttributeHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token function">prepareResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析Spring MVC:HandlerMapping</title>
      <link href="/2018/11/28/spring-mvc-handler/"/>
      <url>/2018/11/28/spring-mvc-handler/</url>
      
        <content type="html"><![CDATA[<p>剖析Spring MVC,介绍Spring MVC中的HandlerMapping。</p><span id="more"></span><p>在前面文章中，<code>DispatcherServlet</code>接收到请求后通过<code>HandlerMapping</code>,<code>HandlerAdapter</code>来处理请求，这一章先来看<code>HandlerMapping</code>是如何工作的。</p><pre class="line-numbers language-none"><code class="language-none">graph BTAbstractHandlerMapping -.-&gt; HandlerMappingAbstractHandlerMethodMapping --&gt; AbstractHandlerMappingRequestMappingInfoHandlerMapping --&gt; AbstractHandlerMethodMappingRequestMappingHandlerMapping --&gt; RequestMappingInfoHandlerMappingAbstractUrlHandlerMapping --&gt; AbstractHandlerMappingAbstractDetectingUrlHandlerMapping --&gt;  AbstractUrlHandlerMappingBeanNameUrlHandlerMapping --&gt; AbstractDetectingUrlHandlerMappingSimpleUrlHandlerMapping --&gt; AbstractUrlHandlerMapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-HandlerMapping"><a href="#1-HandlerMapping" class="headerlink" title="1. HandlerMapping"></a>1. HandlerMapping</h2><p>首先看<code>HandlerMappings</code>的初始化，在<code>DispatcherServlet</code>中<code>initStrategies</code>方法初始化了<code>HandlerMappings</code>。来看初始化的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//默认为true</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectAllHandlerMappings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span><span class="token comment">// 从容器获取所有的HandlerMappings</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">></span></span> matchingBeans <span class="token operator">=</span><span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beansOfTypeIncludingAncestors</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>matchingBeans<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// We keep HandlerMappings in sorted order.</span><span class="token comment">// 排序</span><span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//指定mapping</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">HandlerMapping</span> hm <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token constant">HANDLER_MAPPING_BEAN_NAME</span><span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>hm<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Ignore, we'll add a default HandlerMapping later.</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Ensure we have at least one HandlerMapping, by registering</span><span class="token comment">// a default HandlerMapping if no other mappings are found.</span><span class="token comment">// 没有获取到则穿件默认到handlerMappings</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">=</span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No HandlerMappings found in servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': using default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-AbstractHandlerMapping"><a href="#2-AbstractHandlerMapping" class="headerlink" title="2. AbstractHandlerMapping"></a>2. AbstractHandlerMapping</h2><p>再来看<code>HandlerMapping</code>是如何创建的，<code>AbstractHandlerMapping</code>实现了<code>HandlerMapping</code>,并继承了<code>WebApplicationObjectSupport</code>。在应用初始化时会调用<code>WebApplicationObjectSupport</code>抽象方法<code>initApplicationContext</code>,来看在<code>AbstractHandlerMapping</code>中的<code>initApplicationContext</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Initializes the interceptors.* @see #extendInterceptors(java.util.List)* @see #initInterceptors()*/</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span><span class="token comment">// 并没有实现</span><span class="token function">extendInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把所有MappedInterceptor类型的bean添加到mappedInterceptors也就是adaptedInterceptors中</span><span class="token function">detectMappedInterceptors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>adaptedInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里有版本变化</span><span class="token comment">// 初始化interceptors,将interceptor转换成HandlerInterceptor或者WebRequestHandlerInterceptorAdapter到adaptedInterceptors中</span><span class="token comment">//this.adaptedInterceptors.add(adaptInterceptor(interceptor))</span><span class="token comment">//</span><span class="token comment">//if (interceptor instanceof HandlerInterceptor) &#123;</span><span class="token comment">//return (HandlerInterceptor) interceptor;</span><span class="token comment">//&#125;</span><span class="token comment">//else if (interceptor instanceof WebRequestInterceptor) &#123;</span><span class="token comment">//return new WebRequestHandlerInterceptorAdapter((WebRequestInterceptor) interceptor);</span><span class="token comment">//&#125;</span><span class="token function">initInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>HandlerMapping</code>是通过<code>getHandler</code>方法来获取<code>Handler</code>和<code>Interceptor</code>的，来看<code>AbstractHandlerMapping</code>中具体实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// final不可重写</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// 通过getHandlerInternal方法获取getHandlerInternal，getHandlerInternal是一个抽象模板方法</span><span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取默认的handler，获取的handler为本类的一个属性，通过set方法设置的</span>handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//都没有获取到handler则返回空，在DispacthServlet中会返回404</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Bean name or resolved handler?</span><span class="token comment">// 如果handler类型为String则通过名字获取bean</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span><span class="token comment">//protected final ApplicationContext obtainApplicationContext() &#123;</span><span class="token comment">//ApplicationContext applicationContext = getApplicationContext();</span><span class="token comment">//Assert.state(applicationContext != null, "No ApplicationContext");</span><span class="token comment">//  return applicationContext;</span><span class="token comment">//&#125;</span>handler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 通过handler，request创建HandlerExecutionChain对象</span><span class="token comment">//protected HandlerExecutionChain getHandlerExecutionChain(Object handler, HttpServletRequest request) &#123;</span><span class="token comment">//  //通过handler创建HandlerExecutionChain</span><span class="token comment">//HandlerExecutionChain chain = (handler instanceof HandlerExecutionChain ?</span><span class="token comment">//(HandlerExecutionChain) handler : new HandlerExecutionChain(handler));</span><span class="token comment">//</span><span class="token comment">//String lookupPath = this.urlPathHelper.getLookupPathForRequest(request);</span><span class="token comment">//for (HandlerInterceptor interceptor : this.adaptedInterceptors) &#123;</span><span class="token comment">//if (interceptor instanceof MappedInterceptor) &#123;</span><span class="token comment">//MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><span class="token comment">//if (mappedInterceptor.matches(lookupPath, this.pathMatcher)) &#123;</span><span class="token comment">//              //通过url设置MappedInterceptor</span><span class="token comment">//chain.addInterceptor(mappedInterceptor.getInterceptor());</span><span class="token comment">//&#125;</span><span class="token comment">//&#125;</span><span class="token comment">//else &#123;</span><span class="token comment">//          //添加非MappedInterceptor的HandlerInterceptor</span><span class="token comment">//chain.addInterceptor(interceptor);</span><span class="token comment">//&#125;</span><span class="token comment">//&#125;</span><span class="token comment">//return chain;</span><span class="token comment">//&#125;</span><span class="token class-name">HandlerExecutionChain</span> executionChain <span class="token operator">=</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查看request里是否有跨域信息</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isCorsRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 获取配置信息</span><span class="token class-name">CorsConfiguration</span> globalConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>globalCorsConfigSource<span class="token punctuation">.</span><span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CorsConfiguration</span> handlerConfig <span class="token operator">=</span> <span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token punctuation">(</span>globalConfig <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> globalConfig<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>handlerConfig<span class="token punctuation">)</span> <span class="token operator">:</span> handlerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//protected HandlerExecutionChain getCorsHandlerExecutionChain(HttpServletRequest request,</span><span class="token comment">//HandlerExecutionChain chain, @Nullable CorsConfiguration config) &#123;</span><span class="token comment">//  //如果请求为options</span><span class="token comment">//if (CorsUtils.isPreFlightRequest(request)) &#123;</span><span class="token comment">//HandlerInterceptor[] interceptors = chain.getInterceptors();</span><span class="token comment">//      //使用PreFlightHandler</span><span class="token comment">//chain = new HandlerExecutionChain(new PreFlightHandler(config), interceptors);</span><span class="token comment">//&#125;</span><span class="token comment">//else &#123;</span><span class="token comment">//      //非ptions添加CorsInterceptor</span><span class="token comment">//chain.addInterceptor(new CorsInterceptor(config));</span><span class="token comment">//&#125;</span><span class="token comment">//return chain;</span><span class="token comment">//&#125;</span>executionChain <span class="token operator">=</span> <span class="token function">getCorsHandlerExecutionChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> executionChain<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> executionChain<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的分析中看到获取<code>handler</code>的方法是<code>getHandlerInternal</code>,这是一个抽象模板方法，来看他的实现，在<code>AbstractUrlHandlerMapping</code>和<code>AbstractHandlerMethodMapping</code>中实现了<code>getHandlerInternal</code>。</p><h2 id="3-AbstractUrlHandlerMapping"><a href="#3-AbstractUrlHandlerMapping" class="headerlink" title="3. AbstractUrlHandlerMapping"></a>3. AbstractUrlHandlerMapping</h2><p>先看<code>AbstractUrlHandlerMapping</code>中的<code>getHandlerInternal</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** Look up a handler for the URL path of the given request.* @param request current HTTP request* @return the handler instance, or &#123;@code null&#125; if none found*/</span><span class="token annotation punctuation">@Override</span><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// 通过request获取查找路径</span><span class="token class-name">String</span> lookupPath <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过路径和request获取handler</span><span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token function">lookupHandler</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果未获取到handler</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// We need to care for the default handler directly, since we need to</span><span class="token comment">// expose the PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE for it as well.</span><span class="token class-name">Object</span> rawHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">// rootHandler</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rawHandler <span class="token operator">=</span> <span class="token function">getRootHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 默认handler</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>rawHandler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 如果String类型获取bean</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Bean name or resolved handler?</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rawHandler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> rawHandler<span class="token punctuation">;</span>rawHandler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 抽象方法，校验</span><span class="token function">validateHandler</span><span class="token punctuation">(</span>rawHandler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置PathExposingHandlerInterceptor，UriTemplateVariablesHandlerInterceptor</span>handler <span class="token operator">=</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>rawHandler<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Mapping ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"] to "</span> <span class="token operator">+</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No handler mapping found for ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> handler<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要调用了三个方法：<code>lookupHandler</code>,<code>validateHandler</code>,<code>buildPathExposingHandler</code>,来看他们的代码</p><ol><li><code>lookupHandler</code>:通过<code>url</code>和<code>request</code>获取<code>handler</code><pre class="line-numbers language-java" data-language="java"><code class="language-java">rotected <span class="token class-name">Object</span> <span class="token function">lookupHandler</span><span class="token punctuation">(</span><span class="token class-name">String</span> urlPath<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// Direct match?</span><span class="token comment">// 从handlerMap获取handler，从上文中我们没有发现handlerMap是从哪里赋值</span><span class="token comment">// 通过搜索发现handlerMap的put方法在registerHandler中调用</span><span class="token comment">// registerHandler被SimpleUrlHandlerMapping中initApplicationContext调用</span><span class="token comment">// registerHandler被AbstractDetectingUrlHandlerMapping中detectHandlers调用,detectHandlers又被initApplicationContext调用</span><span class="token comment">// detectHandlers调用模板方法determineUrlsForHandler，该方法在子类BeanNameUrlHandlerMapping中实现</span><span class="token comment">// 这些方法重写WebApplicationObjectSupport</span><span class="token comment">// 也就是说this.handlerMap在应用初始化的时候就会赋值</span><span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Bean name or resolved handler?</span><span class="token comment">// 如果String从容器中获取handler</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>handler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//校验，设置Interceptor</span><span class="token function">validateHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> urlPath<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Pattern match? Pattern匹配</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> matchingPatterns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> registeredPattern <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>registeredPattern<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>matchingPatterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registeredPattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useTrailingSlashMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registeredPattern<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>registeredPattern <span class="token operator">+</span> <span class="token string">"/"</span><span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>matchingPatterns<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registeredPattern <span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> bestMatch <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> patternComparator <span class="token operator">=</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPatternComparator</span><span class="token punctuation">(</span>urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matchingPatterns<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>matchingPatterns<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>patternComparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Matching patterns for request ["</span> <span class="token operator">+</span> urlPath <span class="token operator">+</span> <span class="token string">"] are "</span> <span class="token operator">+</span> matchingPatterns<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bestMatch <span class="token operator">=</span> matchingPatterns<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bestMatch <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bestMatch<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> bestMatch<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Could not find handler for best pattern match ["</span> <span class="token operator">+</span> bestMatch <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Bean name or resolved handler?</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> handlerName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>handler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">validateHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> pathWithinMapping <span class="token operator">=</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractPathWithinPattern</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// There might be multiple 'best patterns', let's make sure we have the correct URI template variables</span><span class="token comment">// for all of them</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> uriTemplateVariables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> matchingPattern <span class="token operator">:</span> matchingPatterns<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>patternComparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">,</span> matchingPattern<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> vars <span class="token operator">=</span> <span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">extractUriTemplateVariables</span><span class="token punctuation">(</span>matchingPattern<span class="token punctuation">,</span> urlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> decodedVars <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decodePathVariables</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> vars<span class="token punctuation">)</span><span class="token punctuation">;</span>uriTemplateVariables<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>decodedVars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"URI Template variables for request ["</span> <span class="token operator">+</span> urlPath <span class="token operator">+</span> <span class="token string">"] are "</span> <span class="token operator">+</span> uriTemplateVariables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">buildPathExposingHandler</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> bestMatch<span class="token punctuation">,</span> pathWithinMapping<span class="token punctuation">,</span> uriTemplateVariables<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// No handler found...</span><span class="token comment">// 没有找到handler返回空</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>validateHandler</code>：空的方法</li><li><code>buildPathExposingHandler</code>：添加<code>PathExposingHandlerInterceptor</code>,<code>UriTemplateVariablesHandlerInterceptor</code>拦截器，主要作用是<code>request</code>添加一些属性，例如<code>request.setAttribute(URI_TEMPLATE_VARIABLES_ATTRIBUTE, uriTemplateVariables)</code>。</li></ol><p>子类<code>SimpleUrlHandlerMapping</code>,<code>AbstractDetectingUrlHandlerMapping</code>,<code>BeanNameUrlHandlerMapping</code>在上面代码注释中介绍。</p><h2 id="4-AbstractHandlerMethodMapping"><a href="#4-AbstractHandlerMethodMapping" class="headerlink" title="4. AbstractHandlerMethodMapping"></a>4. AbstractHandlerMethodMapping</h2><p>首先看到<code>AbstractHandlerMethodMapping</code>实现了<code>InitializingBean</code>并重写了<code>afterPropertiesSet</code>（初始化bean的时候会执行该方法）,可以看到调用<code>initHandlerMethods</code>,来看这个方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Looking for request mappings in application context: "</span> <span class="token operator">+</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>detectHandlerMethodsInAncestorContexts <span class="token operator">?</span><span class="token class-name">BeanFactoryUtils</span><span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span><span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">SCOPED_TARGET_NAME_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> beanType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>beanType <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// An unresolvable bean type, probably from a lazy bean - let's ignore it.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not resolve target class for bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 检查是否含有Controller或者RequestMapping注释</span><span class="token comment">// (AnnotatedElementUtils.hasAnnotation(beanType, Controller.class) ||</span><span class="token comment">// AnnotatedElementUtils.hasAnnotation(beanType, RequestMapping.class))</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isHandler</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">detectHandlerMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//handlerMethodsInitialized是空的</span><span class="token function">handlerMethodsInitialized</span><span class="token punctuation">(</span><span class="token function">getHandlerMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到关键调用了<code>detectHandlerMethods</code>方法，来看<code>detectHandlerMethods</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Look for handler methods in a handler.</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">detectHandlerMethods</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取handler类型</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> handlerType <span class="token operator">=</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span> <span class="token operator">?</span><span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span> <span class="token operator">:</span> handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handlerType <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取真实类型</span><span class="token comment">//if (clazz.getName().contains(CGLIB_CLASS_SEPARATOR)) &#123;</span><span class="token comment">//Class&lt;?> superclass = clazz.getSuperclass();</span><span class="token comment">//if (superclass != null &amp;&amp; Object.class != superclass) &#123;</span><span class="token comment">//return superclass;</span><span class="token comment">//    &#125;</span><span class="token comment">//    &#125;</span><span class="token comment">//return clazz;</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> userType <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> methods <span class="token operator">=</span> <span class="token class-name">MethodIntrospector</span><span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>userType<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token class-name">MethodIntrospector<span class="token punctuation">.</span>MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> method <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">getMappingForMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> userType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Invalid mapping on handler class ["</span> <span class="token operator">+</span>userType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> method<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>methods<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" request handler methods found on "</span> <span class="token operator">+</span> userType <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> methods<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历注册HandlerMethod</span>methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> mapping<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">Method</span> invocableMethod <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">selectInvocableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> userType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">registerHandlerMethod</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> invocableMethod<span class="token punctuation">,</span> mapping<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看上面的方法<code>selectMethods</code>,<code>getMappingForMethod</code>,<code>registerHandlerMethod</code>，具体看这三个方法</p><ol><li><code>selectMethods</code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectMethods</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">MetadataLookup</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> metadataLookup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Method</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> methodMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> handlerTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> specificHandlerType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//把自身添加到handlerTypes</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>specificHandlerType <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>handlerTypes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>specificHandlerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>handlerTypes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>targetType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> currentHandlerType <span class="token operator">:</span> handlerTypes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>specificHandlerType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> specificHandlerType <span class="token operator">:</span> currentHandlerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">doWithMethods</span><span class="token punctuation">(</span>currentHandlerType<span class="token punctuation">,</span> method <span class="token operator">-></span> <span class="token punctuation">&#123;</span><span class="token class-name">Method</span> specificMethod <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//回调inspect（）方法给个函数生成RequestMappingInfo</span><span class="token class-name">T</span> result <span class="token operator">=</span> metadataLookup<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Method</span> bridgedMethod <span class="token operator">=</span> <span class="token class-name">BridgeMethodResolver</span><span class="token punctuation">.</span><span class="token function">findBridgedMethod</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>bridgedMethod <span class="token operator">==</span> specificMethod <span class="token operator">||</span> metadataLookup<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>bridgedMethod<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//将生成的RequestMappingInfo保存到methodMap中</span>methodMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token constant">USER_DECLARED_METHODS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//返回保存函数映射信息后的methodMap</span><span class="token keyword">return</span> methodMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>可以看到回调了<code>getMappingForMethod</code>,来看<code>getMappingForMethod</code>是如何生成<code>RequestMappingInfo</code>。<br><code>getMappingForMethod</code>是一个模板方法在子类<code>RequestMappingHandlerMapping</code>实现。</li><li><code>getMappingForMethod</code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">RequestMappingInfo</span> <span class="token function">getMappingForMethod</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> handlerType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//构建RequestMappingInfo</span><span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>info <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMappingInfo</span> typeInfo <span class="token operator">=</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span>handlerType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>typeInfo <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>info <span class="token operator">=</span> typeInfo<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> info<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token class-name">RequestMappingInfo</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span><span class="token class-name">AnnotatedElement</span> element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">RequestMapping</span> requestMapping <span class="token operator">=</span> <span class="token class-name">AnnotatedElementUtils</span><span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token class-name">RequestMapping</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RequestCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> condition <span class="token operator">=</span> <span class="token punctuation">(</span>element <span class="token keyword">instanceof</span> <span class="token class-name">Class</span> <span class="token operator">?</span><span class="token function">getCustomTypeCondition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> element<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getCustomMethodCondition</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Method</span><span class="token punctuation">)</span> element<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>requestMapping <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">,</span> condition<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">protected</span> <span class="token class-name">RequestMappingInfo</span> <span class="token function">createRequestMappingInfo</span><span class="token punctuation">(</span><span class="token class-name">RequestMapping</span> requestMapping<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> customCondition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//构建了RequestMappingInfo返回</span><span class="token class-name">RequestMappingInfo<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token class-name">RequestMappingInfo</span><span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token function">resolveEmbeddedValuesInPatterns</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">methods</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">consumes</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">consumes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">produces</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">produces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mappingName</span><span class="token punctuation">(</span>requestMapping<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>customCondition <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>builder<span class="token punctuation">.</span><span class="token function">customCondition</span><span class="token punctuation">(</span>customCondition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>registerHandlerMethod</code>:把HandlerMethod放到map中</li></ol><p>再来看如何获取</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerMethod</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取url</span><span class="token class-name">String</span> lookupPath <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Looking up handler method for path "</span> <span class="token operator">+</span> lookupPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//锁</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">acquireReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取构建HandlerMethod</span><span class="token class-name">HandlerMethod</span> handlerMethod <span class="token operator">=</span> <span class="token function">lookupHandlerMethod</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning handler method ["</span> <span class="token operator">+</span> handlerMethod <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Did not find handler method for ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用createWithResolvedBean返回</span><span class="token keyword">return</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> handlerMethod<span class="token punctuation">.</span><span class="token function">createWithResolvedBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">releaseReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看<code>lookupHandlerMethod</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">HandlerMethod</span> <span class="token function">lookupHandlerMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> lookupPath<span class="token punctuation">,</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Match</span><span class="token punctuation">></span></span> matches <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> directPathMatches <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">getMappingsByUrl</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>directPathMatches <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">addMatchingMappings</span><span class="token punctuation">(</span>directPathMatches<span class="token punctuation">,</span> matches<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// No choice but to go through all mappings...</span><span class="token function">addMatchingMappings</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">getMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> matches<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>matches<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Match</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MatchComparator</span><span class="token punctuation">(</span><span class="token function">getMappingComparator</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>matches<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Found "</span> <span class="token operator">+</span> matches<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" matching mapping(s) for ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"] : "</span> <span class="token operator">+</span> matches<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Match</span> bestMatch <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>matches<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CorsUtils</span><span class="token punctuation">.</span><span class="token function">isPreFlightRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token constant">PREFLIGHT_AMBIGUOUS_MATCH</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Match</span> secondBestMatch <span class="token operator">=</span> matches<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>comparator<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">,</span> secondBestMatch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Method</span> m1 <span class="token operator">=</span> bestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> m2 <span class="token operator">=</span> secondBestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Ambiguous handler methods mapped for HTTP path '"</span> <span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"': &#123;"</span> <span class="token operator">+</span> m1 <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> m2 <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">handleMatch</span><span class="token punctuation">(</span>bestMatch<span class="token punctuation">.</span>mapping<span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> bestMatch<span class="token punctuation">.</span>handlerMethod<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">handleNoMatch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">getMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：<br>在<code>DispatcherServlet</code>的<code>doDispatch</code>获取到了<code>HandlerExecutionChain</code>。</p><p><code>HandlerExecutionChain</code>包含<code>Handler</code>,<code>HandlerInterceptor</code>:</p><ol><li><code>HandlerInterceptor</code>：在<code>AbstractHandlerMapping</code>中获取。</li><li><code>Handler</code>：由<code>AbstractHandlerMapping</code>的子类实现<code>getHandlerInternal</code>获取。</li></ol><p><code>AbstractHandlerMapping</code>有俩条分支：</p><ol><li><code>AbstractUrlHandlerMapping</code>：简单的说Handler就是Controller类，片面理解为一个Controller只能对应一个请求，可以实现<code>AbstractController</code>及子类。在实际中也就是BeanNameUrlHandlerMapping，SimpleUrlHandlerMapping的使用。</li><li><code>AbstractHandlerMethodMapping</code>：使用最多的HandlerMethod，也就是映射到方法。HandlerMethod类型的Handler。RequestMappingHandlerMapping的使用。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析Spring MVC:处理一个请求</title>
      <link href="/2018/11/27/spring-mvc-do/"/>
      <url>/2018/11/27/spring-mvc-do/</url>
      
        <content type="html"><![CDATA[<p>剖析Spring MVC,介绍Spring MVC是如何处理请求的。</p><span id="more"></span><p>上一篇文章中，介绍了Spirng MVC的结构与创建过程，然后我们来看Spring MVC是如何处理请求的。</p><p>从<code>Servlet</code>中知道，处理请求是<code>HttpServlet</code>中<code>service</code>，<code>HttpServlet</code>中<code>doPost</code>,<code>doGet</code>等方法，从<code>service</code>路由到各个方法。详见<code>HttpServlet</code>代码。</p><p>在<code>HttpServletBean</code>中并没有重写这些方法。</p><h2 id="1-service"><a href="#1-service" class="headerlink" title="1. service"></a>1. service</h2><p>在<code>FrameworkServlet</code>中重写了<code>HttpServlet</code>中<code>service</code>，<code>HttpServlet</code>中<code>doPost</code>,<code>doGet</code>等方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">HttpMethod</span> <span class="token punctuation">&#123;</span>  <span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token constant">HEAD</span><span class="token punctuation">,</span> <span class="token constant">POST</span><span class="token punctuation">,</span> <span class="token constant">PUT</span><span class="token punctuation">,</span> <span class="token constant">PATCH</span><span class="token punctuation">,</span> <span class="token constant">DELETE</span><span class="token punctuation">,</span> <span class="token constant">OPTIONS</span><span class="token punctuation">,</span> <span class="token constant">TRACE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li><code>service</code>：添加<code>PATCH</code>，然后调用<code>processRequest</code>方法,其余则由父类<code>service</code>方法做处理。</li><li><code>doGet</code>,<code>doPost</code>,<code>doPut</code>,<code>doDelete</code>：直接调用<code>processRequest</code>。</li><li><code>doOptions</code>,<code>doTrace</code>：可有参数配置调用<code>processRequest</code>还是交给父类处理。</li><li>没有重写<code>doHead</code>方法。</li></ol><h2 id="2-processRequest"><a href="#2-processRequest" class="headerlink" title="2. processRequest"></a>2. processRequest</h2><p>来看<code>processRequest</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Throwable</span> failureCause <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//获取原来保存的LocaleContext</span>    <span class="token comment">//private static final ThreadLocal&lt;LocaleContext> localeContextHolder =</span>    <span class="token comment">//new NamedThreadLocal&lt;>("LocaleContext");</span>    <span class="token comment">//</span>    <span class="token comment">//private static final ThreadLocal&lt;LocaleContext> inheritableLocaleContextHolder =</span>    <span class="token comment">//new NamedInheritableThreadLocal&lt;>("LocaleContext");</span>    <span class="token class-name">LocaleContext</span> previousLocaleContext <span class="token operator">=</span> <span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getLocaleContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据request中locale创建当前LocaleContext</span>    <span class="token comment">//new SimpleLocaleContext(request.getLocale())</span>    <span class="token class-name">LocaleContext</span> localeContext <span class="token operator">=</span> <span class="token function">buildLocaleContext</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//获取原来保存的的RequestAttributes</span>    <span class="token class-name">RequestAttributes</span> previousAttributes <span class="token operator">=</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//根据request, response创建当前的ServletRequestAttributes</span>    <span class="token comment">//new ServletRequestAttributes(request, response);</span>    <span class="token class-name">ServletRequestAttributes</span> requestAttributes <span class="token operator">=</span> <span class="token function">buildRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//异步请求</span>    <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//设置Interceptor</span>    asyncManager<span class="token punctuation">.</span><span class="token function">registerCallableInterceptor</span><span class="token punctuation">(</span><span class="token class-name">FrameworkServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RequestBindingInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化ContextHolders,设置当前的LocaleContext，ServletRequestAttributes到Holder中</span>    <span class="token comment">//if (localeContext != null) &#123;</span>    <span class="token comment">//LocaleContextHolder.setLocaleContext(localeContext, this.threadContextInheritable);</span>    <span class="token comment">//&#125;</span>    <span class="token comment">//if (requestAttributes != null) &#123;</span>    <span class="token comment">//RequestContextHolder.setRequestAttributes(requestAttributes, this.threadContextInheritable);</span>    <span class="token comment">//&#125;</span>    <span class="token function">initContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> localeContext<span class="token punctuation">,</span> requestAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调用doService</span>        <span class="token function">doService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        failureCause <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Request processing failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//request还原原始的LocaleContext，RequestAttributes</span>        <span class="token function">resetContextHolders</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> previousLocaleContext<span class="token punctuation">,</span> previousAttributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestAttributes <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            requestAttributes<span class="token punctuation">.</span><span class="token function">requestCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//日志</span>        <span class="token function">logResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> failureCause<span class="token punctuation">,</span> asyncManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//发布时间消息</span>        <span class="token function">publishRequestHandledEvent</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> failureCause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>可以通过<code>LocaleContextHolder</code>,<code>RequestContextHolder</code>获取到<code>LocaleContext</code>,<code>RequestAttributes</code>。</li><li><code>publishRequestHandledEvent</code>,可以实现<code>ApplicationListener</code>来使用这个监听：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestHandlerListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletRequestHandledEvent</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestHandledEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestHandledEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"request event: &#123;&#125;"</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-doService"><a href="#3-doService" class="headerlink" title="3. doService"></a>3. doService</h2><p>可以看到交由<code>doService</code>请求：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是一个抽象方法，来看子类<code>DispatcherServlet</code>中实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//日志</span>    <span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Keep a snapshot of the request attributes in case of an include,</span>    <span class="token comment">// to be able to restore the original attributes after the include.</span>    <span class="token comment">//当include请求时，将Attribute保存到备份attributesSnapshot中</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_STRATEGIES_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Make framework objects available to handlers and view objects.</span>    <span class="token comment">//设置WebApplicationContext，localeResolver属性</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">LOCALE_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_SOURCE_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//对Redirect参数传递</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">INPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FLASH_MAP_MANAGER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//交给doDispatch处理</span>        <span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//还原，将attributesSnapshot设置回去</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Restore the original attribute snapshot, in case of an include.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-doDispatch"><a href="#4-doDispatch" class="headerlink" title="4. doDispatch"></a>4. doDispatch</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>    <span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//异步请求</span>    <span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//检查是否为上传请求，如果是则返回MultipartHttpServletRequest，不是则原样返回</span>            processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//true:上传请求 false:飞上传请求</span>            multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Determine handler for the current request.</span>            <span class="token comment">//从HandlerMapping中获取Handler</span>            <span class="token comment">//if (this.handlerMappings != null) &#123;</span>            <span class="token comment">//for (HandlerMapping mapping : this.handlerMappings) &#123;</span>            <span class="token comment">//HandlerExecutionChain handler = mapping.getHandler(request);</span>            <span class="token comment">//if (handler != null) &#123;</span>            <span class="token comment">//return handler;</span>            <span class="token comment">//&#125;</span>            <span class="token comment">//&#125;</span>            <span class="token comment">//&#125;</span>            mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//未获取到抛出异常，SC_NOT_FOUND=404</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Determine handler adapter for the current request.</span>            <span class="token comment">//获取handler adapter</span>            <span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Process last-modified header, if supported by the handler.</span>            <span class="token comment">// 处理GET、HEAD请求的Last-Modified</span>            <span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//PRECONDITION_FAILED=412</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//执行相应的Interceptor的preHandle</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Actually invoke the handler.</span>            <span class="token comment">//调用handler处理请求</span>            mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//异步直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//if (mv != null &amp;&amp; !mv.hasView()) &#123;</span>            <span class="token comment">//    String defaultViewName = getDefaultViewName(request);</span>            <span class="token comment">//    if (defaultViewName != null) &#123;</span>            <span class="token comment">//        mv.setViewName(defaultViewName);</span>            <span class="token comment">//    &#125;</span>            <span class="token comment">//&#125;</span>            <span class="token comment">//如果view为空，根据processedRequest设置默认view</span>            <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//执行相应Interceptor的postHandle</span>            mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>            <span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>            dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//处理结果</span>        <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//异步</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Instead of postHandle and afterCompletion</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// Clean up any resources used by a multipart request.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//删除资源</span>                <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-processDispatchResult"><a href="#5-processDispatchResult" class="headerlink" title="5. processDispatchResult"></a>5. processDispatchResult</h2><p><code>Handler</code>,<code>HandlerMapping</code>,<code>HandlerAdapter</code>在后面的文章中将详细描述，先看<code>processDispatchResult</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">//如果有异常,设置到view</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Did the handler return a view to render?</span>    <span class="token comment">////设置local,构建view,渲染</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No view rendering, null ModelAndView returned."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Concurrent handling started during a forward</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//请求处理完，触发Interceptor的afterCompletion,释放。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，也就是Spring MVC处理请求流程简介。具体<code>HandlerMapping</code>，<code>HandlerAdapter</code>如何工作在后文中详细描述。</p>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用jenkins实现自动部署</title>
      <link href="/2018/10/11/java-jenkins/"/>
      <url>/2018/10/11/java-jenkins/</url>
      
        <content type="html"><![CDATA[<p>Jenkins是一款开源 CI&amp;CD 软件，用于自动化各种任务，包括构建、测试和部署软件。<br>Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。</p><span id="more"></span><p>在实际开发中，特别是在开发测试环境中，频繁的修改部署是一件特别烦的事情。同样生产环境中数量过多的服务器部署，手动操作非常容易出现错误，所以可以使用<code>jenkins</code>实现自动部署。当然使用<code>jenkins</code>可以实现更多的功能。</p><p>可以查看<a href="https://jenkins.io/doc/">jenkins官方文档</a></p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>可以使用<code>Docker</code>,<code>WAR</code>等各种方式安装<code>jenkins</code>，这里使用最简单的<code>WAR</code>方式：</p><ol><li>安装Java</li><li><a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war">下载Jenkins.war</a></li><li>使用<code>java -jar</code>或者web容器启动</li><li>客户端浏览器输入地址访问</li><li>初次访问需要解锁<code>jenkins</code>,需要从日志中找到生成的秘钥输入到浏览器中并激活<code>jenkins</code></li><li>创建用户正式使用<code>jenkins</code></li></ol><h2 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h2><ol><li>创建一个新的<code>item</code>,选择<code>Freestyle project</code>(还有别的选项,该选项自由)</li><li>设置名称描述等信息</li><li>设置代码库。填写<code>Repository URL</code>,<code>Credentials</code>,<code>Branch Specifier</code>等信息</li><li>设置构建触发器。设置<code>Poll SCM</code>的<code>Schedule</code>为<code>* * * * *</code>(设置一分钟检查一次代码是否更新并开始构建,开发环境中检测到更新就会开始构建)</li><li>设置环境，可以不设置</li><li>设置构建方式。使用<code>Execute shell</code>,加入<code>shell</code>命令,下面为示例，可以自由变化。<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#进入工作目录下</span><span class="token builtin class-name">cd</span> /root/.jenkins/jobs/demo/workspace<span class="token comment">#maven打包（服务器需要安装maven），也可以使用npm等</span>mvn clean <span class="token function">install</span> <span class="token parameter variable">-Pdev</span><span class="token comment">#执行远程命令（需要设置服务器间免密登录）</span><span class="token function">ssh</span> root@ip <span class="token string">" sh /bin/shutdown.sh"</span><span class="token comment">#上传文件等</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> /root/.jenkins/jobs/demo/workspace/demo/target/demo.war root@ip:/home/webapp/demo/webapps/demo.war<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>添加构建后流程。这里添加<code>Delete workspace when build is done</code>（删除构建后的文件）</li><li>保存后可看到新的<code>item</code>,可以看到构建过程，次数，日志，状态，可手动执行等，详见web。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis中的#和$</title>
      <link href="/2018/10/10/mybatis-sign/"/>
      <url>/2018/10/10/mybatis-sign/</url>
      
        <content type="html"><![CDATA[<p>分享了MyBatis中的<code>#</code>和<code>$</code></p><span id="more"></span><p><code>Mybatis</code>的<code>xml</code>中语句向SQL传参有两种方式：<code>#&#123;&#125;</code>和<code>$&#123;&#125;</code></p><h2 id="1"><a href="#1" class="headerlink" title="1. #{}"></a>1. #{}</h2><p><code>#&#123;&#125;</code>这种方式SQL语句是经过预编译的，预编译后，会动态解析成一个参数标记符<code>?</code>，建议使用，防止注入。</p><h2 id="2"><a href="#2" class="headerlink" title="2. ${}"></a>2. ${}</h2><p><code>$&#123;&#125;</code>在动态解析时候，会传入参数字符串。表名作参数和<code>order by</code>时必须使用。</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剖析Spring MVC:结构与创建过程</title>
      <link href="/2018/09/19/spring-mvc-init/"/>
      <url>/2018/09/19/spring-mvc-init/</url>
      
        <content type="html"><![CDATA[<p>剖析Spring MVC,介绍Spring MVC的结构与创建过程。</p><span id="more"></span><p>首先看<code>Spring MVC</code>的结构。我们知道Spring MVC从创建<code>DispatcherServlet</code>开始:</p><pre class="line-numbers language-none"><code class="language-none">graph BTDispatcherServlet --&gt; FrameworkServletDispatcherServlet -.- SuppressWarningsFrameworkServlet --&gt; HttpServletBeanFrameworkServlet -.-&gt; ApplicationContextAwareHttpServletBean --&gt; HttpServletHttpServletBean -.-&gt; EnvironmentAwareHttpServletBean -.-&gt; EnvironmentCapableHttpServlet --&gt; GenericServletEnvironmentAware --&gt; AwareApplicationContextAware --&gt; AwareGenericServlet -.-&gt;ServletConfigGenericServlet -.-&gt;ServletGenericServlet -.-&gt;Serializable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>DispatcherServlet</code>继承<code>FrameworkServlet</code>,<code>FrameworkServlet</code>继承<code>HttpServletBean</code>,<code>HttpServletBean</code>继承<code>Servlet</code>中的<code>HttpServlet</code>。</p><h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1. 接口"></a>1. 接口</h2><p>这三个类实现了<code>EnvironmentCapable</code>,<code>EnvironmentAware</code>.<code>ApplicationContextAware</code>接口。可以实现这些接口获取<code>Environment</code>,<code>ApplicationContext</code>。</p><p><code>Environment</code>：应用运行的环境，包括应用环境的：<code>Profiles</code>和<code>Properties</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Environment</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyResolver</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取激活的Profiles</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getActiveProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//没有找到激活的则找默认的Profiles</span>  <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDefaultProfiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Deprecated</span>  <span class="token keyword">boolean</span> <span class="token function">acceptsProfiles</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> profiles<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> <span class="token function">acceptsProfiles</span><span class="token punctuation">(</span><span class="token class-name">Profiles</span> profiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PropertyResolver</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">boolean</span> <span class="token function">containsProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token annotation punctuation">@Nullable</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">,</span> <span class="token class-name">T</span> defaultValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> <span class="token function">getRequiredProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span>  <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getRequiredProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> targetType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> <span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> <span class="token function">resolveRequiredPlaceholders</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-Profiles"><a href="#1-Profiles" class="headerlink" title="1. Profiles"></a>1. Profiles</h3><p><code>profile</code>配置是一个被命名的、bean定义的逻辑组,当<code>profile</code>激活时对应的<code>bean</code>会被注册到容器中，这样就能实现不同环境不同配置的切换，如开发中dev,sit,pro环境。可以使用<code>xml</code>,<code>@Profile</code>,环境变量，JVM参数，<code>Maven</code>等设置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//注解</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Profile</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DevDatasourceConfig</span><span class="token comment">//xml</span><span class="token operator">&lt;</span>beans profile<span class="token operator">=</span><span class="token string">"dev"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"devDatasourceConfig"</span>      <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"DevDatasourceConfig"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span><span class="token comment">//WebApplicationInitializer</span>servletContext<span class="token punctuation">.</span><span class="token function">setInitParameter</span><span class="token punctuation">(</span><span class="token string">"spring.profiles.active"</span><span class="token punctuation">,</span> <span class="token string">"dev"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//JVM参数</span>java <span class="token operator">-</span>jar xxx<span class="token punctuation">.</span>jar <span class="token operator">-</span><span class="token class-name">Dspring</span><span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">=</span>dev<span class="token comment">//环境变量</span>export spring_profiles_active<span class="token operator">=</span>dev<span class="token comment">//maven</span><span class="token generics"><span class="token punctuation">&lt;</span>profiles<span class="token punctuation">></span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>profile<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span>dev<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>activation<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>activeByDefault<span class="token punctuation">></span></span><span class="token boolean">true</span><span class="token operator">&lt;</span><span class="token operator">/</span>activeByDefault<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>activation<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token punctuation">></span></span>dev<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>profile<span class="token operator">></span>    <span class="token generics"><span class="token punctuation">&lt;</span>profile<span class="token punctuation">></span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>id<span class="token punctuation">></span></span>pro<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>        <span class="token generics"><span class="token punctuation">&lt;</span>properties<span class="token punctuation">></span></span>            <span class="token generics"><span class="token punctuation">&lt;</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token punctuation">></span></span>pro<span class="token operator">&lt;</span><span class="token operator">/</span>spring<span class="token punctuation">.</span>profiles<span class="token punctuation">.</span>active<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>properties<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>profile<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>profiles<span class="token operator">></span>mvn install <span class="token operator">-</span><span class="token class-name">Pdev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Properties"><a href="#2-Properties" class="headerlink" title="2. Properties"></a>2. Properties</h3><p><code>properties</code>配置属性，常见的<code>.properties</code>文件，<code>JVM properties</code>,<code>system环境</code></p><h2 id="2-HttpServletBean"><a href="#2-HttpServletBean" class="headerlink" title="2. HttpServletBean"></a>2. HttpServletBean</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//设置参数</span>  <span class="token class-name">PropertyValues</span> pvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletConfigPropertyValues</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>requiredProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">BeanWrapper</span> bw <span class="token operator">=</span> <span class="token class-name">PropertyAccessorFactory</span><span class="token punctuation">.</span><span class="token function">forBeanPropertyAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ResourceLoader</span> resourceLoader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletContextResourceLoader</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEditor</span><span class="token punctuation">(</span>resourceLoader<span class="token punctuation">,</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//抽象方法。</span>      <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>      bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isErrorEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to set bean properties on servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 抽象方法。初始化工作，调用子类（FrameworkServlet）initServletBean()方法</span>  <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-FrameworkServlet"><a href="#3-FrameworkServlet" class="headerlink" title="3. FrameworkServlet"></a>3. FrameworkServlet</h2><p>从<code>HttpServletBean</code>可以看到调用<code>initServletBean()</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Overridden method of &#123;@link HttpServletBean&#125;, invoked after any bean properties * have been set. Creates this servlet's WebApplicationContext. */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">initServletBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>  <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring "</span> <span class="token operator">+</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Initializing Servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化webApplicationContext</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">=</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//抽象方法，子类并没有实现</span>    <span class="token function">initFrameworkServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> <span class="token operator">|</span> <span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">?</span>      <span class="token string">"shown which may lead to unsafe logging of potentially sensitive data"</span> <span class="token operator">:</span>      <span class="token string">"masked to prevent unsafe logging of potentially sensitive data"</span><span class="token punctuation">;</span>  logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"enableLoggingRequestDetails='"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>enableLoggingRequestDetails <span class="token operator">+</span>      <span class="token string">"': request parameters and headers will be "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Completed initialization in "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看<code>initWebApplicationContext()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">WebApplicationContext</span> <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//获取rootContext</span>  <span class="token comment">//String ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE = WebApplicationContext.class.getName() + ".ROOT";</span>  <span class="token comment">//Object attr = sc.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span>  <span class="token comment">//从ServletContext中获取名为WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE的Object</span>  <span class="token class-name">WebApplicationContext</span> rootContext <span class="token operator">=</span>          <span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">WebApplicationContext</span> wac <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//如果已经设置了webApplicationContext</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// A context instance was injected at construction time -> use it</span>      wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">ConfigurableWebApplicationContext</span> cwac <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> wac<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// The context has not yet been refreshed -> provide services such as</span>              <span class="token comment">// setting the parent context, setting the application context id, etc</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  <span class="token comment">// The context instance was injected without an explicit parent -> set</span>                  <span class="token comment">// the root application context (if any; may be null) as the parent</span>                  cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>              <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果WebApplicationContext未设置，从ServletContext中获取</span>      <span class="token comment">//WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(getServletContext(), attrName);</span>      wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果还未获取到，创建一个</span>      <span class="token comment">//设置一些东西，特别是设置了一个ContextRefreshListener监听</span>      <span class="token comment">//public void onApplicationEvent(ContextRefreshedEvent event) &#123;</span>      <span class="token comment">//  this.refreshEventReceived = true; //表示已经onRefresh</span>      <span class="token comment">//  synchronized (this.onRefreshMonitor) &#123;</span>      <span class="token comment">//  onRefresh(event.getApplicationContext());//onRefresh</span>      <span class="token comment">//  &#125;</span>      <span class="token comment">//&#125;</span>      <span class="token comment">//onApplicationEvent()-></span>      wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//如果没有onRefresh过则onRefreshÒÒÒÒÒÒ</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">//抽象方法。子类重写</span>          <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//把WebApplicationContext设置到ServletContext中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Publish the context as a servlet context attribute.</span>      <span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> wac<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-DispatcherServlet"><a href="#4-DispatcherServlet" class="headerlink" title="4. DispatcherServlet"></a>4. DispatcherServlet</h2><p>从<code>FrameworkServlet</code>看出，调用<code>DispatcherServlet</code>中<code>onRefresh</code>方法。<code>onRefresh()-&gt;initStrategies()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * This implementation calls &#123;@link #initStrategies&#125;. */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 初始化组件 * Initialize the strategy objects that this servlet uses. * &lt;p>May be overridden in subclasses in order to initialize further strategy objects. */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化组件会从<code>context</code>中获取，如果获取不到会调用<code>getDefaultStrategies()</code>。通过默认文件<code>DispatcherServlet.properties</code>初始化组件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> defaultStrategies<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_STRATEGIES_PATH</span> <span class="token operator">=</span> <span class="token string">"DispatcherServlet.properties"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">// Load default strategy implementations from properties file.</span><span class="token comment">// This is currently strictly internal and not meant to be customized</span><span class="token comment">// by application developers.</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassPathResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_STRATEGIES_PATH</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>defaultStrategies <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Could not load '"</span> <span class="token operator">+</span> <span class="token constant">DEFAULT_STRATEGIES_PATH</span> <span class="token operator">+</span> <span class="token string">"': "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Create a List of default strategy objects for the given strategy interface. * &lt;p>The default implementation uses the "DispatcherServlet.properties" file (in the same * package as the DispatcherServlet class) to determine the class names. It instantiates * the strategy objects through the context's BeanFactory. * @param context the current WebApplicationContext * @param strategyInterface the strategy interface * @return the List of corresponding strategy objects */</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategyInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">String</span> key <span class="token operator">=</span> strategyInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">String</span> value <span class="token operator">=</span> defaultStrategies<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classNames <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>classNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> classNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Object</span> strategy <span class="token operator">=</span> <span class="token function">createDefaultStrategy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>              strategies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span>                      <span class="token string">"Could not find DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span>                              <span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LinkageError</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span>                      <span class="token string">"Unresolvable class definition for DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span>                              className <span class="token operator">+</span> <span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> strategies<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring MVC:响应式Web应用</title>
      <link href="/2018/07/05/spring-mvc5/"/>
      <url>/2018/07/05/spring-mvc5/</url>
      
        <content type="html"><![CDATA[<p>使用Spring Web MVC，开发者可以直接访问官方文档<a href="https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC文档Version 5.2.1.RELEASE</a>，本文及Spring MVC系列文章都参考于此文档及源码。</p><p>Spring 5支持响应式Web应用。</p><span id="more"></span><p>Spring Web MVC includes <code>WebMvc.fn</code>, a lightweight functional programming model in which functions are used to route and handle requests and contracts are designed for immutability. It is an alternative to the annotation-based programming model but otherwise runs on the same DispatcherServlet.</p><p>主要包括<code>RouterFunction</code>，<code>HandlerFunction</code>和<code>HandlerFilterFunction</code>，分别对应<code>@RequestMapping</code>，<code>@Controller</code>和<code>HandlerInterceptor</code>。</p><p>简单示例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token static">APPLICATION_JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token static">route</span></span><span class="token punctuation">;</span><span class="token class-name">PersonRepository</span> repository <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">PersonHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonHandler</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/person/&#123;id&#125;"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">listPeople</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-HandlerFunction"><a href="#1-HandlerFunction" class="headerlink" title="1. HandlerFunction"></a>1. HandlerFunction</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token static">APPLICATION_JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>reactive<span class="token punctuation">.</span>function<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token static">ok</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">PersonRepository</span> repository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PersonHandler</span><span class="token punctuation">(</span><span class="token class-name">PersonRepository</span> repository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>repository <span class="token operator">=</span> repository<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">listPeople</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> people <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">allPeople</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//转换成JSON对象返回</span>        <span class="token keyword">return</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>people<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获取request body内容</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        repository<span class="token punctuation">.</span><span class="token function">savePerson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//获取参数request中id</span>        <span class="token keyword">int</span> personId <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">pathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过id查询Person</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">getPerson</span><span class="token punctuation">(</span>personId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//查询到结果后转换成json返回</span>            <span class="token keyword">return</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token comment">//未查询到结构返回notFound404</span>            <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">notFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据校验示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonHandler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Validator</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// ...</span>    <span class="token keyword">public</span> <span class="token class-name">ServerResponse</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token class-name">ServerRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//获取参数正文</span>        <span class="token class-name">Person</span> person <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//校验参数</span>        <span class="token function">validate</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//保存person</span>        repository<span class="token punctuation">.</span><span class="token function">savePerson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//返回成功</span>        <span class="token keyword">return</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Errors</span> errors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyBindingResult</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerWebInputException</span><span class="token punctuation">(</span>errors<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RouterFunction"><a href="#2-RouterFunction" class="headerlink" title="2. RouterFunction"></a>2. RouterFunction</h2><p><code>RouterFunction</code>将请求路由到<code>HandlerFunction</code>,通过<code>RouterFunctions.route()</code>，<code>RouterFunctions.route(RequestPredicate, HandlerFunction)</code>创建路由.</p><p>简单示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/hello-world"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_PLAIN</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        request <span class="token operator">-></span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更加强大的示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token static">APPLICATION_JSON</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token class-name">PersonRepository</span> repository <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">PersonHandler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PersonHandler</span><span class="token punctuation">(</span>repository<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> otherRoute <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/person/&#123;id&#125;"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span> <span class="token comment">//匹配accept JSON的PersonHandler.getPerson</span>    <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span> <span class="token comment">//匹配accept JSON的PersonHandler.listPeople</span>    <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span> <span class="token comment">//PersonHandler.createPerson</span>    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>otherRoute<span class="token punctuation">)</span>     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>嵌套示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> b1 <span class="token operator">-></span> b1        <span class="token punctuation">.</span><span class="token function">nest</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b2 <span class="token operator">-></span> b2            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-run"><a href="#3-run" class="headerlink" title="3. run"></a>3. run</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">routerFunctionA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">routerFunctionB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// configure message conversion...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// configure CORS...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureViewResolvers</span><span class="token punctuation">(</span><span class="token class-name">ViewResolverRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// configure view resolution for HTML rendering...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-HandlerFilterFunction"><a href="#4-HandlerFilterFunction" class="headerlink" title="4. HandlerFilterFunction"></a>4. HandlerFilterFunction</h2><p>可以使用<code>HandlerFilterFunction</code>的<code>before</code>，<code>after</code>或<code>filter</code></p><p><code>before</code>，<code>after</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> b1 <span class="token operator">-></span> b1        <span class="token punctuation">.</span><span class="token function">nest</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b2 <span class="token operator">-></span> b2            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>request <span class="token operator">-></span> <span class="token class-name">ServerRequest</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token comment">//前，build</span>                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"X-RequestHeader"</span><span class="token punctuation">,</span> <span class="token string">"Value"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">logResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//后，logResponse</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>filter</code>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SecurityManager</span> securityManager <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">></span></span> route <span class="token operator">=</span> <span class="token function">route</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> b1 <span class="token operator">-></span> b1        <span class="token punctuation">.</span><span class="token function">nest</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b2 <span class="token operator">-></span> b2            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">getPerson</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">listPeople</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/person"</span><span class="token punctuation">,</span> handler<span class="token operator">::</span><span class="token function">createPerson</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span> <span class="token comment">//添加安全拦截</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>securityManager<span class="token punctuation">.</span><span class="token function">allowAccessTo</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token constant">UNAUTHORIZED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring MVC:CORS URI Asyn 缓存</title>
      <link href="/2018/07/02/spring-mvc4/"/>
      <url>/2018/07/02/spring-mvc4/</url>
      
        <content type="html"><![CDATA[<p>使用Spring Web MVC，开发者可以直接访问官方文档<a href="https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC文档Version 5.2.1.RELEASE</a>，本文及Spring MVC系列文章都参考于此文档及源码。</p><p>这一节来看Spring MVC更多使用方法。</p><span id="more"></span><h2 id="1-CORS"><a href="#1-CORS" class="headerlink" title="1. CORS"></a>1. CORS</h2><p>可以看到文档是怎么介绍的：</p><p>For security reasons, browsers prohibit AJAX calls to resources outside the current origin. For example, you could have your bank account in one tab and evil.com in another. Scripts from evil.com should not be able to make AJAX requests to your bank API with your credentials — for example withdrawing money from your account!</p><p>Cross-Origin Resource Sharing (CORS) is a <code>W3C</code> specification implemented by most browsers that lets you specify what kind of cross-domain requests are authorized, rather than using less secure and less powerful workarounds based on <code>IFRAME</code> or <code>JSONP</code>.</p><p>浏览器禁止跨域，可以使用W3C规范的CORS，而不是使用安全性低，功能弱的变通方法IFRAME或者JSONP。</p><ol><li>@CrossOrigin<br>可以使用<code>@CrossOrigin</code>允许跨域访问，例如：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>maxAge <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/account"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span><span class="token string">"https://domain2.com"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>全局配置<br>可以使用WebMvcConfigurer全局配置如：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/api/**"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">"https://domain2.com"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"PUT"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"header1"</span><span class="token punctuation">,</span> <span class="token string">"header2"</span><span class="token punctuation">,</span> <span class="token string">"header3"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exposedHeaders</span><span class="token punctuation">(</span><span class="token string">"header1"</span><span class="token punctuation">,</span> <span class="token string">"header2"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Add more mappings...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>还可以xml进行全局配置<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>cors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/api/**<span class="token punctuation">"</span></span>        <span class="token attr-name">allowed-origins</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://domain1.com, https://domain2.com<span class="token punctuation">"</span></span>        <span class="token attr-name">allowed-methods</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GET, PUT<span class="token punctuation">"</span></span>        <span class="token attr-name">allowed-headers</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header1, header2, header3<span class="token punctuation">"</span></span>        <span class="token attr-name">exposed-headers</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header1, header2<span class="token punctuation">"</span></span> <span class="token attr-name">allow-credentials</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name">max-age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/resources/**<span class="token punctuation">"</span></span>        <span class="token attr-name">allowed-origins</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://domain1.com<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>cors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>拦截器实现<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CorsConfiguration</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Possibly...</span><span class="token comment">// config.applyPermitDefaultValues()</span>config<span class="token punctuation">.</span><span class="token function">setAllowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">addAllowedOrigin</span><span class="token punctuation">(</span><span class="token string">"https://domain1.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">addAllowedHeader</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>config<span class="token punctuation">.</span><span class="token function">addAllowedMethod</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UrlBasedCorsConfigurationSource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UrlBasedCorsConfigurationSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>source<span class="token punctuation">.</span><span class="token function">registerCorsConfiguration</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CorsFilter</span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorsFilter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="2-URI"><a href="#2-URI" class="headerlink" title="2. URI"></a>2. URI</h2><ol><li><p>可以是用<code>UriComponentsBuilder</code>创建<code>UriComponents</code>,<code>URI</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">UriComponents</span> uriComponents <span class="token operator">=</span> <span class="token class-name">UriComponentsBuilder</span>        <span class="token punctuation">.</span><span class="token function">fromUriString</span><span class="token punctuation">(</span><span class="token string">"https://example.com/hotels/&#123;hotel&#125;"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">queryParam</span><span class="token punctuation">(</span><span class="token string">"q"</span><span class="token punctuation">,</span> <span class="token string">"&#123;q&#125;"</span><span class="token punctuation">)</span>          <span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">URI</span> uri <span class="token operator">=</span> uriComponents<span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span><span class="token string">"Westin"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用<code>UriBuilder</code>,<code>UriBuilderFactory</code>,<code>UriComponentsBuilder</code>实现了<code>UriBuilder</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> baseUrl <span class="token operator">=</span> <span class="token string">"https://example.org"</span><span class="token punctuation">;</span><span class="token class-name">DefaultUriBuilderFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultUriBuilderFactory</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>factory<span class="token punctuation">.</span><span class="token function">setEncodingMode</span><span class="token punctuation">(</span><span class="token class-name">EncodingMode</span><span class="token punctuation">.</span><span class="token constant">TEMPLATE_AND_VALUES</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>RestTemplate</code>或者<code>WebClient</code>操作URI:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>restTemplate<span class="token punctuation">.</span><span class="token function">setUriTemplateHandler</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">WebClient</span> client <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uriBuilderFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="3-Asyn"><a href="#3-Asyn" class="headerlink" title="3. Asyn"></a>3. Asyn</h2><p>Spring MVC提供了异步接口使用。</p><ol><li><p>DeferredResult</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/quotes"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token class-name">DeferredResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">quotes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">DeferredResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> deferredResult <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeferredResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Save the deferredResult somewhere..</span>    <span class="token keyword">return</span> deferredResult<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// From some other thread...</span>deferredResult<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Callable</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token keyword">public</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">processUpload</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// ...</span>            <span class="token keyword">return</span> <span class="token string">"someView"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4. 缓存"></a>4. 缓存</h2><p><code>CacheControl</code>提供对配置与<code>Cache-Control</code>标头相关的设置的支持。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Cache for an hour - "Cache-Control: max-age=3600"</span><span class="token class-name">CacheControl</span> ccCacheOneHour <span class="token operator">=</span> <span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">HOURS</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Prevent caching - "Cache-Control: no-store"</span><span class="token class-name">CacheControl</span> ccNoStore <span class="token operator">=</span> <span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">noStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Cache for ten days in public and private caches,</span><span class="token comment">// public caches should not transform the response</span><span class="token comment">// "Cache-Control: max-age=864000, public, no-transform"</span><span class="token class-name">CacheControl</span> ccCustom <span class="token operator">=</span> <span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noTransform</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cachePublic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/book/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Book</span><span class="token punctuation">></span></span> <span class="token function">showBook</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token function">findBook</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> version <span class="token operator">=</span> book<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span>        <span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">cacheControl</span><span class="token punctuation">(</span><span class="token class-name">CacheControl</span><span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">DAYS</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">eTag</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span> <span class="token comment">// lastModified is also available</span>        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用mybatis-generator及git生成代码</title>
      <link href="/2018/06/16/mybatis-generator/"/>
      <url>/2018/06/16/mybatis-generator/</url>
      
        <content type="html"><![CDATA[<p>在基于Spring,Spring MVC,mybatis进行java web开发时，往往会需要写大量的重复性代码，可以使用mybatis-generator及git配合生成重复代码。</p><span id="more"></span><ol><li>mybatis-generator</li><li>git提交一次模板代码</li><li>提取模板patch</li><li>生成相关patch</li><li>合并patch到分支</li><li>修改可能产生的错误</li></ol><h2 id="1-mybatis-generator"><a href="#1-mybatis-generator" class="headerlink" title="1. mybatis-generator"></a>1. mybatis-generator</h2><p>可以通过mybatis-generator jar方式执行生成DAO，这里通过maven方式生成</p><ol><li>创建generatorConfig.xml文件<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>         <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>        <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classPathEntry</span>            <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql-connector-java-x.x.x.jar path<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zq_mysql_tables<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.SerializablePlugin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span>                        <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql url<span class="token punctuation">"</span></span>                        <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql username<span class="token punctuation">"</span></span>                        <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mysql userpassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaTypeResolver</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>forceBigDecimals<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaTypeResolver</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>domian package<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>trimStrings<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaModelGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapper package<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sqlMapGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xml package<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>enableSubPackages<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javaClientGenerator</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tableName<span class="token punctuation">"</span></span> <span class="token attr-name">domainObjectName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DomainName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatedKey</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>private key<span class="token punctuation">"</span></span> <span class="token attr-name">sqlStatement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MySql<span class="token punctuation">"</span></span> <span class="token attr-name">identity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>引入build，pom.xml如下：<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-generator-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行maven命令<br>mybatis-generator:generate -e<br>这样就会生成DAO。</li></ol><h2 id="2-git提交一次模板代码"><a href="#2-git提交一次模板代码" class="headerlink" title="2. git提交一次模板代码"></a>2. git提交一次模板代码</h2><p>写好Controller,Service等相关代码，然后做一次提交。</p><h2 id="3-提取模板patch"><a href="#3-提取模板patch" class="headerlink" title="3. 提取模板patch"></a>3. 提取模板patch</h2><p>执行git format-patch HEAD^提取提交的patch文件</p><h2 id="4-生成相关patch"><a href="#4-生成相关patch" class="headerlink" title="4. 生成相关patch"></a>4. 生成相关patch</h2><ol><li>创建GenerateCode.java如下：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenerateCode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATCH_PATH</span> <span class="token operator">=</span> <span class="token string">"模板patch文件地址"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PATCH_BASE_PATH</span> <span class="token operator">=</span> <span class="token string">"目标patch生成地址"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> reader<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> allKeys<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GenerateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token function">getBufferedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> allKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//新表，定义新的内容（将要替换的内容），每个表都需要添加</span>        allKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"表前缀"</span><span class="token punctuation">,</span> <span class="token string">"表model名"</span><span class="token punctuation">,</span> <span class="token string">"详细描述"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        allKeys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"表前缀"</span><span class="token punctuation">,</span> <span class="token string">"表model名"</span><span class="token punctuation">,</span> <span class="token string">"详细描述"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">GenerateCode</span> generateCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenerateCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            generateCode<span class="token punctuation">.</span><span class="token function">setAllKeys</span><span class="token punctuation">(</span>allKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>            generateCode<span class="token punctuation">.</span><span class="token function">generatePatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">generatePatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATCH_BASE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">:</span> allKeys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            reader <span class="token operator">=</span> <span class="token function">getBufferedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">replacePatch</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">replacePatch</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> newStrs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> lineStr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lineStr <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            newStrs<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">replaceStr</span><span class="token punctuation">(</span>lineStr<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">writePatch</span><span class="token punctuation">(</span>newStrs<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writePatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">,</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATCH_BASE_PATH</span> <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">".patch"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PrintStream</span> ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> <span class="token function">getBufferedReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token constant">PATCH_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">replaceStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> originStr<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//原来的内容，要被替换掉的内容</span>        <span class="token keyword">return</span> originStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"表前缀"</span><span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"表model名 Foo"</span><span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"表model名变量名 foo"</span><span class="token punctuation">,</span> <span class="token function">toLowerCaseFirstOne</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"文字描述"</span><span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> <span class="token function">getAllKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> allKeys<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAllKeys</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> allKeys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allKeys <span class="token operator">=</span> allKeys<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCaseFirstOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>执行main方法，生成patch文件<br>原理为：生成模板patch，然后通过构建新表的对象名，描述等信息替换模板patch中的关键字内容并生成新的patch文件。</li></ol><h2 id="5-合并patch到分支"><a href="#5-合并patch到分支" class="headerlink" title="5. 合并patch到分支"></a>5. 合并patch到分支</h2><p>执行git am *.patch，将新生成的patch文件合并到代码分支</p><h2 id="6-修改可能产生的错误"><a href="#6-修改可能产生的错误" class="headerlink" title="6. 修改可能产生的错误"></a>6. 修改可能产生的错误</h2><p>批量生成避免不了产生语法错误的代码，稍做修改并完善即可。</p><p>这样就快速的生成了代码，大大提高了生产力。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring MVC:自定义配置</title>
      <link href="/2018/05/18/spring-mvc3/"/>
      <url>/2018/05/18/spring-mvc3/</url>
      
        <content type="html"><![CDATA[<p>使用Spring Web MVC，开发者可以直接访问官方文档<a href="https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC文档Version 5.2.1.RELEASE</a>，本文及Spring MVC系列文章都参考于此文档及源码。</p><p>这一节主要为Spring MVC的配置，这也是我们最常用的。</p><span id="more"></span><h2 id="1-启用"><a href="#1-启用" class="headerlink" title="1. 启用"></a>1. 启用</h2><ol><li>可以使用<code>@EnableWebMvc</code>注解启用MVC配置<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>可以使用<code>&lt;mvc:annotation-driven&gt;</code>xml配置启用MVC配置<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="2-Api"><a href="#2-Api" class="headerlink" title="2. Api"></a>2. Api</h2><p>可以使用实现<code>WebMvcConfigurer</code>进行配置</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Implement configuration methods...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-类型"><a href="#3-类型" class="headerlink" title="3. 类型"></a>3. 类型</h2><p>Spring MVC已经包含了数字转换<code>@NumberFormat</code>，时间转换<code>@DateTimeFormat</code>。我们可以自定义类型转换:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFormatters</span><span class="token punctuation">(</span><span class="token class-name">FormatterRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-校验"><a href="#4-校验" class="headerlink" title="4. 校验"></a>4. 校验</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-拦截器"><a href="#5-拦截器" class="headerlink" title="5. 拦截器"></a>5. 拦截器</h2><p>注册拦截器：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LocaleChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThemeChangeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/admin/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SecurityInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/secure/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-内容"><a href="#6-内容" class="headerlink" title="6. 内容"></a>6. 内容</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    configurer<span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    configurer<span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">"xml"</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-消息"><a href="#7-消息" class="headerlink" title="7. 消息"></a>7. 消息</h2><p>可以重写<code>configureMessageConverters()</code>或<code>extendMessageConverters()</code>来自定义<code>HttpMessageConverter</code>实现数据转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jackson2ObjectMapperBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2ObjectMapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">indentOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">modulesToInstall</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParameterNamesModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2XmlHttpMessageConverter</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">createXmlMapper</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xmlMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>indentOutput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>simpleDateFormat</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yyyy-MM-dd<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">p:</span>modulesToInstall</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.fasterxml.jackson.module.paramnames.ParameterNamesModule<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xmlMapper<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>createXmlMapper</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-视图"><a href="#8-视图" class="headerlink" title="8. 视图"></a>8. 视图</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>view-controller</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span> <span class="token attr-name">view-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-解析器"><a href="#9-解析器" class="headerlink" title="9. 解析器"></a>9. 解析器</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span><span class="token class-name">ViewControllerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"home"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-静态文件"><a href="#10-静态文件" class="headerlink" title="10. 静态文件"></a>10. 静态文件</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/resources/**"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"/public"</span><span class="token punctuation">,</span> <span class="token string">"classpath:/static/"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setCachePeriod</span><span class="token punctuation">(</span><span class="token number">31556926</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-默认Servlet"><a href="#11-默认Servlet" class="headerlink" title="11. 默认Servlet"></a>11. 默认Servlet</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-路径匹配"><a href="#12-路径匹配" class="headerlink" title="12. 路径匹配"></a>12. 路径匹配</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    configurer        <span class="token punctuation">.</span><span class="token function">setUseSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUseTrailingSlashMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUseRegisteredSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setPathMatcher</span><span class="token punctuation">(</span><span class="token function">antPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">setUrlPathHelper</span><span class="token punctuation">(</span><span class="token function">urlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">addPathPrefix</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">,</span>                <span class="token class-name">HandlerTypePredicate</span><span class="token punctuation">.</span><span class="token function">forAnnotation</span><span class="token punctuation">(</span><span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-more"><a href="#13-more" class="headerlink" title="13. more"></a>13. more</h2><p><code>@EnableWebMvc</code>为程序提供配置，检测委托<code>WebMvcConfigurer</code>实现自定义配置。<br>去除<code>@EnableWebMvc</code>,<code>WebMvcConfigurer</code>，继承扩展<code>DelegatingWebMvcConfiguration</code>可实现更多高级配置。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">extends</span> <span class="token class-name">DelegatingWebMvcConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xml:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu下开启ssh</title>
      <link href="/2018/05/10/ubuntu-ssh/"/>
      <url>/2018/05/10/ubuntu-ssh/</url>
      
        <content type="html"><![CDATA[<p>本文分享了在Ubuntu下开启ssh</p><span id="more"></span><p>安装启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件<code>/etc/ssh/sshd_config</code><br>将注释的<code>Port 22</code>放开<br>重启<code>ssh</code>服务</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring MVC:Controller</title>
      <link href="/2018/04/13/spring-mvc2/"/>
      <url>/2018/04/13/spring-mvc2/</url>
      
        <content type="html"><![CDATA[<p>使用Spring Web MVC，开发者可以直接访问官方文档<a href="https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC文档Version 5.2.1.RELEASE</a>，本文及Spring MVC系列文章都参考于此文档及源码。</p><p>这一节来看Spring MVC具体使用方法。</p><span id="more"></span><h2 id="1-Controller"><a href="#1-Controller" class="headerlink" title="1. @Controller"></a>1. @Controller</h2><h3 id="1-Controller-1"><a href="#1-Controller-1" class="headerlink" title="1. @Controller"></a>1. @Controller</h3><p>Spring MVC provides an annotation-based programming model where <code>@Controller</code> and <code>@RestController</code> components use annotations to express request mappings, request input, exception handling, and more. Annotated controllers have flexible method signatures and do not have to extend base classes nor implement specific interfaces. </p><p>使用<code>@Controller</code>，<code>@RestController</code>就可以实现一个接口，不需要继承或者实现base。</p><p>The following example shows a controller defined by annotations：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-声明"><a href="#2-声明" class="headerlink" title="2. 声明"></a>2. 声明</h3><p>需要配置configuration来自动扫描<code>@Controller</code>beans。</p><ol><li>java configuration<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"org.example.web"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>spring.xml<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>        http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.example.web<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- more --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>引申内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">RestController</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//@AliasFor互为别名</span><span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span>annotation <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-映射"><a href="#3-映射" class="headerlink" title="3. 映射"></a>3. 映射</h3><ol><li><p>可以使用<code>@RequestMapping</code>映射request到方法上，也可以使用<code>@RequestMapping</code>的其他注解：<code>@GetMapping</code>,<code>@PostMapping</code>…</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/persons"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PersonController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/&#123;id&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以使用通配符来映射如:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/owners/&#123;ownerId&#125;"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OwnerController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/pets/&#123;petId&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Pet</span> <span class="token function">findPet</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> ownerId<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> petId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>也可以使用<code>@GetMapping(&quot;/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&#123;ext:\\.[a-z]+&#125;&quot;)</code>。多种模式匹配，会进行最优匹配。</p></li><li><p>注解中还一些其他参数：<code>consumes</code>,<code>produces</code>,<code>params</code></p></li><li><p>Spring MVC还支持带有自定义请求匹配逻辑的自定义请求映射属性。需要<code>RequestMappingHandlerMapping</code>对<code>getCustomMethodCondition</code>方法进行覆盖，可以在其中检查<code>custom</code>属性并返回您自己的方法<code>RequestCondition</code>。</p></li><li><p>可以通过代码注册</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHandlerMapping</span><span class="token punctuation">(</span><span class="token class-name">RequestMappingHandlerMapping</span> mapping<span class="token punctuation">,</span> <span class="token class-name">UserHandler</span> handler<span class="token punctuation">)</span>             <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//映射数据</span>        <span class="token class-name">RequestMappingInfo</span> info <span class="token operator">=</span> <span class="token class-name">RequestMappingInfo</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/user/&#123;id&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">methods</span><span class="token punctuation">(</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//方法数据</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">UserHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getUser"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//注册方法映射</span>        mapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-处理方法"><a href="#4-处理方法" class="headerlink" title="4. 处理方法"></a>4. 处理方法</h3><p>Spring MVC提供许多注解和参数供我们使用，详细可参照官方文档。这里简单的介绍一部分内容</p><ol><li><p>@PathVariable: 用于访问URI模板变量。</p></li><li><p>@MatrixVariable: 用于访问URI路径段中的名称/值对。</p></li><li><p>@RequestParam: 用于访问Servlet请求参数，包括Multipart。</p></li><li><p>@RequestHeader: 用于访问请求头。</p></li><li><p>@CookieValue: 用于访问cookie。</p></li><li><p>@RequestBody: 用于访问HTTP请求Body。通过使用<code>HttpMessageConverter</code>实现转换，具体方法见下文。</p></li><li><p>@RequestPart: 用于<code>multipart/form-data</code>请求中的内容。</p></li><li><p>@ResponseBody: 用于返回值通过<code>HttpMessageConverter</code>实现进行转换并写入响应。</p></li></ol><p>这里简单举个例子：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/pets"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditPetForm</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>    <span class="token annotation punctuation">@GetMapping</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">setupForm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"petId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> petId<span class="token punctuation">,</span> <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clinic<span class="token punctuation">.</span><span class="token function">loadPet</span><span class="token punctuation">(</span>petId<span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"pet"</span><span class="token punctuation">,</span> pet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"petForm"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更加常用的是通过<code>HttpMessageConverter</code>序列化和反序列化到对象。<code>@RequestBody</code>,<code>@ResponseBody</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/accounts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token class-name">Account</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Account</span> account<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以覆盖<code>HttpMessageConverter</code>中<code>configureMessageConverters()</code>方法或者<code>extendMessageConverters()</code>方法进行配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jackson2ObjectMapperBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2ObjectMapperBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">indentOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">modulesToInstall</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParameterNamesModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2XmlHttpMessageConverter</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">createXmlMapper</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li><p>@ModelAttribute: 可以注解在参数等地方，简单的理解就是作为一个模板覆盖或者实例化请求参数对象或者其他的对象。</p></li><li><p>@InitBinder: 可以继承<code>PropertyEditorSupport</code>自定义</p></li><li><p>@ExceptionHandler: 异常处理</p></li></ol><p><code>@ExceptionHandler</code>,<code>@InitBinder</code>和<code>@ModelAttribute</code>应该使用在Base中，这样就可以做到跨控制器。如果我们需要更加全局的使用，则可以是用<code>@ControllerAdvice</code>或者<code>@RestControllerAdvice</code>。</p><p>默认情况下，<code>@ControllerAdvice</code>方法适用于每个请求。当然也可以缩小范围:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Target all Controllers annotated with @RestController</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>annotations <span class="token operator">=</span> <span class="token class-name">RestController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleAdvice1</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Target all Controllers within specific packages</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span><span class="token string">"org.example.controllers"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleAdvice2</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// Target all Controllers assignable to specific classes</span><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>assignableTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token class-name">ControllerInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">AbstractController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExampleAdvice3</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Spring MVC:DispatcherServlet</title>
      <link href="/2018/04/01/spring-mvc1/"/>
      <url>/2018/04/01/spring-mvc1/</url>
      
        <content type="html"><![CDATA[<p>使用Spring Web MVC，开发者可以直接访问官方文档<a href="https://docs.spring.io/spring/docs/5.2.1.RELEASE/spring-framework-reference/web.html#mvc">Spring Web MVC文档Version 5.2.1.RELEASE</a>，本文及Spring MVC系列文章都参考于此文档及源码。</p><span id="more"></span><p>先看文档是如何介绍Spring MVC的：</p><p><code>Spring Web MVC</code> is the original web framework built on the <code>Servlet API</code> and has been included in the Spring Framework from the very beginning. The formal name, “Spring Web MVC,” comes from the name of its source module (spring-webmvc), but it is more commonly known as “Spring MVC”</p><p>同时也提到到了<code>Spring WebFlux</code>。</p><h2 id="1-Spring-MVC引入"><a href="#1-Spring-MVC引入" class="headerlink" title="1. Spring MVC引入"></a>1. Spring MVC引入</h2><p>这里使用maven：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;spring.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-DispatcherServlet"><a href="#2-DispatcherServlet" class="headerlink" title="2. DispatcherServlet"></a>2. DispatcherServlet</h2><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h3><p>The <code>DispatcherServlet</code>, as any <code>Servlet</code>, needs to be declared and mapped according to the Servlet specification by using <code>Java configuration</code> or in <code>web.xml</code></p><p>可以看到需要通过<code>Java configuration</code>或者<code>web.xml</code>来申明配置<code>DispatcherServlet</code>，也就是Web容器寻找的入口。</p><ol><li>Java configuration<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebApplicationInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">WebApplicationInitializer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletCxt<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Load Spring web application configuration</span><span class="token class-name">AnnotationConfigWebApplicationContext</span> ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ac<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ac<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create and register the DispatcherServlet</span><span class="token class-name">DispatcherServlet</span> servlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRegistration<span class="token punctuation">.</span>Dynamic</span> registration <span class="token operator">=</span> servletCxt<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">,</span> servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/app/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>web.xml<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">></span></span>org.springframework.web.context.ContextLoaderListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>/WEB-INF/app-context.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>app<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/app/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-上下文"><a href="#2-上下文" class="headerlink" title="2. 上下文"></a>2. 上下文</h3><p><code>DispatcherServlet</code> expects a <code>WebApplicationContext</code> (an extension of a plain ApplicationContext) for its own configuration。</p><p><code>WebApplicationContext</code>和<code>ServletContext</code>通过监听器实现共存亡的关系。可以从源码中看到：</p><p><code>ContextLoaderListener</code>,<code>ContextCleanupListener</code>等实现了<code>Servlet</code>中的<code>ServletContextListener</code>。</p><p>例如：<code>ContextLoaderListener</code>中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextLoaderListener</span> <span class="token keyword">extends</span> <span class="token class-name">ContextLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContextListener</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span><span class="token class-name">WebApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 项目启动，创建ServletContext时初始化WebApplicationContext */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 项目关闭，销毁ServletContext时调用ContextCleanupListener销毁清理WebApplicationContext */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletContextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">closeWebApplicationContext</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ContextCleanupListener</span><span class="token punctuation">.</span><span class="token function">cleanupAttributes</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h3><p>可以在源码中看到初始化<code>DispatcherServlet</code>时使用<code>onRefresh</code>方法，<code>onRefresh</code>又调用了<code>initStrategies</code>，在<code>initStrategies</code>中初始化了这9个实例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以自定义扩张或者替换这些组件。当没有配置时，会调用默认的配置。</p><p>例如在<code>initHandlerAdapters</code>中，没有找到自定义配置的<code>handlerAdapters</code>则会调用<code>getDefaultStrategies</code>获取默认配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerAdapters <span class="token operator">=</span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">HandlerAdapter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No HandlerAdapters declared for servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"': using default strategies from DispatcherServlet.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再看一下如何获取的默认配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取默认配置属性</span><span class="token comment">//Create a List of default strategy objects for the given strategy interface.</span><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getDefaultStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategyInterface<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> key <span class="token operator">=</span> strategyInterface<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> value <span class="token operator">=</span> defaultStrategies<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> classNames <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> strategies <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>classNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> className <span class="token operator">:</span> classNames<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> clazz <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> strategy <span class="token operator">=</span> <span class="token function">createDefaultStrategy</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>strategies<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> strategy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span><span class="token string">"Could not find DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span><span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LinkageError</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanInitializationException</span><span class="token punctuation">(</span><span class="token string">"Unresolvable class definition for DispatcherServlet's default strategy class ["</span> <span class="token operator">+</span>className <span class="token operator">+</span> <span class="token string">"] for interface ["</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> strategies<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>defaultStrategies</code>作为配置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> defaultStrategies<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">&#123;</span><span class="token comment">// Load default strategy implementations from properties file.</span><span class="token comment">// This is currently strictly internal and not meant to be customized</span><span class="token comment">// by application developers.</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">ClassPathResource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_STRATEGIES_PATH</span><span class="token punctuation">,</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>defaultStrategies <span class="token operator">=</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Could not load '"</span> <span class="token operator">+</span> <span class="token constant">DEFAULT_STRATEGIES_PATH</span> <span class="token operator">+</span> <span class="token string">"': "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而这里加载的<code>DEFAULT_STRATEGIES_PATH</code>可以在申明中找到：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DEFAULT_STRATEGIES_PATH</span> <span class="token operator">=</span> <span class="token string">"DispatcherServlet.properties"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也就是说会通过默认<code>DispatcherServlet.properties</code>配置文件来初始化默认实例。</p><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><p>上面说到需要通过<code>WebApplicationInitializer</code>或者<code>web.xml</code>配置容器。</p><p>An abstract base class implementation of <code>WebApplicationInitializer</code> named <code>AbstractDispatcherServletInitializer</code> makes it even easier to register the DispatcherServlet by overriding methods to specify the servlet mapping and the location of the DispatcherServlet configuration.</p><p>可以继承<code>AbstractDispatcherServletInitializer</code>注册一个Servlet。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyWebAppInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">MyWebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token string">"/"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//添加Filter 实例并将其自动映射快捷方法</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">HiddenHttpMethodFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果使用xml配置，也可以使用<code>AbstractDispatcherServletInitializer</code>。</p><p>如果需要进一步的自定义<code>DispatcherServlet</code>，可以重写<code>createDispatcherServlet</code>方法。</p><h3 id="4-处理一个请求"><a href="#4-处理一个请求" class="headerlink" title="4. 处理一个请求"></a>4. 处理一个请求</h3><p>可以在源码中看到如何处理一个请求的。在<code>DispatcherServlet</code>中<code>doService</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token function">logRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把request中数据备份到attributesSnapshot中，以便还原</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> attributesSnapshot <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> attrName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_STRATEGIES_PREFIX</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// request设置WebApplicationContext属性</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">WEB_APPLICATION_CONTEXT_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定解析器</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">LOCALE_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_RESOLVER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">THEME_SOURCE_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">FlashMap</span> inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">INPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">OUTPUT_FLASH_MAP_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token constant">FLASH_MAP_MANAGER_ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//交由doDispatch处理请求</span><span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span><span class="token comment">//还原request</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// Restore the original attribute snapshot, in case of an include.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-拦截"><a href="#5-拦截" class="headerlink" title="5. 拦截"></a>5. 拦截</h3><p>通过实现<code>HandlerMapping</code>，并且使用<code>setter</code>注册可以实现处理程序的拦截器。</p><ol><li><p>preHandle(..)：执行实际的处理程序之前</p></li><li><p>postHandle(..)：处理程序执行后</p></li><li><p>afterCompletion(..)：完整请求完成后</p></li></ol><h3 id="6-异常"><a href="#6-异常" class="headerlink" title="6. 异常"></a>6. 异常</h3><p>if an exception occurs during request mapping or is thrown from a request handler (such as a @Controller), the DispatcherServlet delegates to a chain of HandlerExceptionResolver beans to resolve the exception and provide alternative handling, which is typically an error response.</p><p>如果异常在请求映射或者期间发生，<code>DispatcherServlet</code>会委托<code>HandlerExceptionResolver</code>来处理。</p><p><code>HandlerExceptionResolver</code>的实现有：</p><ol><li><p>SimpleMappingExceptionResolver: 异常类名称和错误视图名称之间的映射。</p></li><li><p>DefaultHandlerExceptionResolver: 解决了Spring MVC引发的异常，并将它们映射到HTTP状态代码。</p></li><li><p>ResponseStatusExceptionResolver: 使用@ResponseStatus注释解决异常，并根据注释中的值将它们映射到HTTP状态代码。</p></li><li><p>ExceptionHandlerExceptionResolver: 通过调用@ExceptionHandlera @Controller或 @ControllerAdviceclass中的方法来解决异常。</p></li></ol><p>可以在Spring configuration设置<code>HandlerExceptionResolver beans</code>,并且能够设置<code>order</code>优先级来处理异常。也可以使用<code>@ResponseStatus</code>,<code>@ExceptionHandler</code></p><p>可以在定义它的错误页面<code>&lt;location&gt;/error&lt;/location&gt;</code></p><p>我们可以看到Spring MVC提供了一个抽象方法<code>AbstractHandlerExceptionResolver</code>，他实现了<code>HandlerExceptionResolver</code>,当然就可以通过<code>AbstractHandlerExceptionResolver</code>来自定义异常的解析。从来做到项目异常的统一管理。</p><h3 id="7-视图"><a href="#7-视图" class="headerlink" title="7. 视图"></a>7. 视图</h3><p>在处理请求<code>doService</code>中，可以看到<code>request</code>绑定了一个视图解析器<code>ViewResolver</code>。</p><p>在源码包<code>view</code>中，可以看到<code>freemarker</code>,<code>groovy</code>,<code>json</code>,<code>script</code>,<code>xml</code>。</p><p>可以申明多个解析器，并通过设置<code>order</code>链接。</p><p>可以<code>redirect</code>,<code>forward</code></p><h3 id="5-国际化"><a href="#5-国际化" class="headerlink" title="5. 国际化"></a>5. 国际化</h3><p>Spirng MVC通过<code>LocaleResolver</code>对象完成国际化。我们也在<code>doService</code>看到<code>request</code>绑定了一个解析器<code>LocaleResolver</code>。可以使用<code>RequestContext.getLocale()</code></p><p>可以从<code>i18n</code>包中如下解析器：</p><ol><li>Time Zone: 获取请求语言时区环境</li><li>Header Resolver: 检查请求头信息，如<code>accept-language</code></li><li>Cookie Resolver: 请求Cookie解析，可以通过<code>CookieLocaleResolver</code>设置属性</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localeResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.i18n.CookieLocaleResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clientlanguage<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment">&lt;!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookieMaxAge<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cookiePath<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>Session Resolver: Session解析</li><li>Locale Interceptor: 拦截器，可以自定义添加<code>LocaleChangeInterceptor</code>来改变语言区域环境</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localeChangeInterceptor<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.i18n.LocaleChangeInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>paramName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>siteLanguage<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localeResolver<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.i18n.CookieLocaleResolver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>urlMapping<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>interceptors<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>localeChangeInterceptor<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mappings<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/**/*.view=someController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-主题"><a href="#6-主题" class="headerlink" title="6. 主题"></a>6. 主题</h3><p>需要实现<code>ThemeSource</code>接口，当然他提供了一个抽象类<code>AbstractThemeResolver</code>便于我们实现。</p><p>Spring还提供了<code>ThemeChangeInterceptor</code>进行更改。</p><h3 id="7-Multipart-Resolver"><a href="#7-Multipart-Resolver" class="headerlink" title="7. Multipart Resolver"></a>7. Multipart Resolver</h3><p><code>multipart/form-data</code></p><h3 id="8-日志"><a href="#8-日志" class="headerlink" title="8. 日志"></a>8. 日志</h3><p><code>enableLoggingRequestDetails</code></p>]]></content>
      
      
      <categories>
          
          <category> Spring MVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析servlet</title>
      <link href="/2018/03/11/java-servlet/"/>
      <url>/2018/03/11/java-servlet/</url>
      
        <content type="html"><![CDATA[<p>浅析在java web开发中使用的servlet。</p><span id="more"></span><h2 id="1-main"><a href="#1-main" class="headerlink" title="1. main"></a>1. main</h2><pre class="line-numbers language-none"><code class="language-none">graph BTHttpServlet --&gt; GenericServletGenericServlet -.-&gt; SerializableGenericServlet -.-&gt; ServletGenericServlet -.-&gt; ServletConfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">graph BTHttpServletRequestWrapper --&gt;ServletRequestWrapperHttpServletRequestWrapper -.-&gt;HttpServletRequestServletRequestWrapper -.-&gt; ServletRequestHttpServletRequest --&gt; ServletRequestHttpServletResponseWrapper --&gt;ServletResponseWrapperHttpServletResponseWrapper -.-&gt;HttpServletResponseServletResponseWrapper -.-&gt; ServletResponse HttpServletResponse --&gt; ServletResponse <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servlet实例化,服务。</p><ol><li><code>Servlet</code>: init,service,destroy</li><li><code>GenericServlet</code></li><li><code>HttpServlet</code>: doGet,doPost…</li><li><code>ServletConfig</code>: Config</li><li><code>ServletContext</code>: Context</li><li><code>Request</code>: 请求</li><li><code>Response</code>: 响应</li></ol><h2 id="2-Wrapper"><a href="#2-Wrapper" class="headerlink" title="2. Wrapper"></a>2. Wrapper</h2><p><code>ServletRequestWrapper</code>,<code>ServletResponseWrapper</code>,<code>HttpServletRequestWrapper</code>,<code>HttpServletResponseWrapper</code></p><p>对于<code>ServletRequest</code>,<code>ServletResponse</code>,<code>HttpServletRequest</code>,<code>HttpServletResponse</code>，servlet提供给开发者wrapper装饰类。开发者可以使用改变属性，扩展功能等,例如验证参数，过滤数据，自定义功能等。</p><h2 id="3-ServletContainerInitializer"><a href="#3-ServletContainerInitializer" class="headerlink" title="3. ServletContainerInitializer"></a>3. ServletContainerInitializer</h2><p>servlet 3.0提供开发者<code>ServletContainerInitializer</code>，可以通过实现<code>ServletContainerInitializer</code>接口来注册初始化应用，从而取代<code>web.xml</code>。</p><ol><li>使用<code>web.xml</code>时，web容器会寻找<code>web.xml</code>进行初始化应用。</li><li>使用实现<code>ServletContainerInitializer</code>时，web容器会寻找<code>ServletContainerInitializer</code>的实现类，并调用<code>onStartup</code>进行初始化应用。</li></ol><p>可参考<code>SpringServletContainerInitializer</code>,<code>TomcatStarter</code></p><h2 id="4-Listener"><a href="#4-Listener" class="headerlink" title="4. Listener"></a>4. Listener</h2><p>servlet有如下Listener：</p><ol><li><p><code>ServletContextListener</code>，<code>ServletContextAttributeListener</code>：</p><p> 监听<code>ServletContext</code>，例如Spring中<code>ContextLoaderListener</code>创建<code>WebApplicationContext</code>。</p></li><li><p><code>ServletRequestListener</code>，<code>ServletRequestAttributeListener</code>：</p><p> 监听<code>ServletRequest</code>，例如Spring中<code>RequestContextListener</code>，进行<code>setLocale</code>等。</p></li><li><p><code>AsyncListener</code></p><p> 异步监听</p></li><li><p><code>HttpSessionListener</code>，<code>HttpSessionIdListener</code>，<code>HttpSessionAttributeListener</code> </p><p>session的监听，创建，销毁，属性值变化，sessionIdChanged</p></li><li><p><code>HttpSessionActivationListener</code></p><p>session序列化监听</p></li><li><p><code>HttpSessionBindingListener</code></p><p><code>valueBound()</code>: 数据对象绑定到session监听</p><p><code>valueUnbound</code>: 解绑监听</p></li><li><p><code>WriteListener</code>,<code>ReadListener</code></p></li></ol><p>名称以Listener结尾的一般为创建销毁监听，AttributeListener为属性变化监听。</p><h2 id="5-Filter"><a href="#5-Filter" class="headerlink" title="5. Filter"></a>5. Filter</h2><p><code>Filter</code>,<code>FilterChain</code>,<code>FilterConfig</code></p><h2 id="6-Asyn"><a href="#6-Asyn" class="headerlink" title="6. Asyn"></a>6. Asyn</h2><p>servlet3.0支持异步。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> run<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sevn的互联网之旅</title>
      <link href="/2017/11/06/sevn/"/>
      <url>/2017/11/06/sevn/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>个人简历</title>
      <link href="/2016/03/16/my/"/>
      <url>/2016/03/16/my/</url>
      
        <content type="html"><![CDATA[<p>me</p><span id="more"></span><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>信息：sevn/男/1991</li><li>邮箱：<a href="mailto:sevndata@gmail.com">sevndata@gmail.com</a></li><li>github：<a href="https://github.com/sevndata">https://github.com/sevndata</a></li><li>个人主页：<a href="https://sevndata.com">https://sevndata.com</a></li></ul><hr><h2 id="个人优势"><a href="#个人优势" class="headerlink" title="个人优势"></a>个人优势</h2><ul><li>支付</li><li>区块链</li></ul><hr><h2 id="专业技能"><a href="#专业技能" class="headerlink" title="专业技能"></a>专业技能</h2><ul><li>java</li><li>go</li></ul><hr><h3 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h3><p>感谢您花宝贵时间阅读我的简历，期待能有机会和您共事。</p>]]></content>
      
      
      <categories>
          
          <category> me </category>
          
      </categories>
      
      
        <tags>
            
            <tag> me </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
